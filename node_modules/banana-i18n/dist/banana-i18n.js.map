{"version":3,"sources":["webpack://Banana/webpack/universalModuleDefinition","webpack://Banana/webpack/bootstrap","webpack://Banana/./src/languages/language.js","webpack://Banana/./src/languages/index.js","webpack://Banana/./src/languages/bs.js","webpack://Banana/./src/languages/dsb.js","webpack://Banana/./src/languages/fi.js","webpack://Banana/./src/languages/ga.js","webpack://Banana/./src/languages/he.js","webpack://Banana/./src/languages/hsb.js","webpack://Banana/./src/languages/hu.js","webpack://Banana/./src/languages/hy.js","webpack://Banana/./src/languages/la.js","webpack://Banana/./src/languages/os.js","webpack://Banana/./src/languages/ru.js","webpack://Banana/./src/languages/sl.js","webpack://Banana/./src/languages/uk.js","webpack://Banana/./src/emitter.js","webpack://Banana/./src/ast.js","webpack://Banana/./src/parser.js","webpack://Banana/./src/messagestore.js","webpack://Banana/./src/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","locale","count","forms","explicitPluralPattern","RegExp","length","index","form","test","parseInt","slice","indexOf","undefined","filter","pluralFormIndex","getPluralForm","Math","min","number","pluralRules","Intl","PluralRules","pluralCategories","resolvedOptions","select","f","includes","num","integer","transformTable","digitTransformTable","numberString","String","convertedNumber","parseFloat","tmp","item","word","gender","push","language","split","aou","match","origWord","replace","endAllative","jot","hyphen","ending","strongDirRegExp","languages","node","replacements","ret","subnodes","operation","map","emit","toLowerCase","Error","nodes","result","forEach","convertNumber","convertPlural","convertGrammar","anchor","page","charAt","url","dir","text","strongDirFromContent","BananaMessage","message","escapedOrLiteralWithoutBar","escapedOrRegularLiteral","templateContents","templateName","expression","paramExpression","pos","choice","parserSyntax","sequence","originalPos","res","nOrMore","parsed","makeStringParser","len","makeRegexParser","regex","matches","whitespace","pipe","colon","backslash","anyCharacter","dollar","digits","regularLiteral","regularLiteralWithoutBar","regularLiteralWithoutSpace","escapedOrLiteralWithoutSpace","escapedLiteral","replacement","fn","templateParam","expr","concat","templateWithReplacement","templateWithOutReplacement","toString","openTemplate","closeTemplate","openWikilink","closeWikilink","openExtlink","closeExtlink","template","wikilinkContents","wikilink","parsedResult","parsedLinkContents","extlink","nonWhitespaceExpression","join","start","emitter","params","ast","simpleParse","parameters","str","BananaMessageStore","options","sourceMap","Map","messageSource","load","has","set","assign","localeMessages","parser","messageStore","messages","finalFallback","parse","getMessage","fallbacks","messageKey","fallbackIndex","fallbackLocales","getFallbackLocales","localeParts","localePartIndex","tryingLocale"],"mappings":"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","file":"banana-i18n.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Banana\"] = factory();\n\telse\n\t\troot[\"Banana\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","import DIGITTRANSFORMTABLE from './digit-transform.json'\n\nexport default class BananaLanguage {\n  constructor (locale) {\n    this.locale = locale\n  }\n\n  /**\n   * Plural form transformations, needed for some languages.\n   *\n   * @param {integer} count Non-localized quantifier\n   * @param {Array} forms List of plural forms\n   * @return {string} Correct form for quantifier in this language\n  */\n  convertPlural (count, forms) {\n    var explicitPluralPattern = new RegExp('\\\\d+=', 'i')\n\n    if (!forms || forms.length === 0) {\n      return ''\n    }\n\n    // Handle for Explicit 0= & 1= values\n    for (let index = 0; index < forms.length; index++) {\n      let form = forms[ index ]\n      if (explicitPluralPattern.test(form)) {\n        let formCount = parseInt(form.slice(0, form.indexOf('=')), 10)\n        if (formCount === count) {\n          return (form.slice(form.indexOf('=') + 1))\n        }\n        forms[ index ] = undefined\n      }\n    }\n\n    forms = forms.filter((form) => !!form)\n\n    let pluralFormIndex = this.getPluralForm(count, this.locale)\n    pluralFormIndex = Math.min(pluralFormIndex, forms.length - 1)\n\n    return forms[ pluralFormIndex ]\n  }\n\n  /**\n   * For the number, get the plural for index\n   *\n   * @param {integer} number\n   * @param {string} locale\n   * @return {integer} plural form index\n   */\n  getPluralForm (number, locale) {\n    // Allowed forms as per CLDR spec\n    const pluralForms = [ 'zero', 'one', 'two', 'few', 'many', 'other' ]\n    // Create an instance of Intl PluralRules. If the locale is invalid or\n    // not supported, it fallbacks to `en`.\n    const pluralRules = new Intl.PluralRules(locale)\n    // For a locale, find the plural categories\n    const pluralCategories = pluralRules.resolvedOptions().pluralCategories\n    // Get the plural form. `select` method return values are like 'one', 'few' etc.\n    const form = pluralRules.select(number)\n    // The index of form we need to return is the index in pluralCategories.\n    // And the index should be based on the order defined in pluralForms above.\n    // So we need make sure pluralCategories follow same order as in pluralForms.\n    // For that, get an intersection of pluralForms and pluralCategories.\n    const pluralFormIndex = pluralForms.filter(f => pluralCategories.includes(f)).indexOf(form)\n    return pluralFormIndex\n  }\n\n  /**\n   * Converts a number using digitTransformTable.\n   *\n   * @param {number} num Value to be converted\n   * @param {boolean} integer Convert the return value to an integer\n   * @return {string} The number converted into a String.\n   */\n  convertNumber (num, integer) {\n    // Set the target Transform table:\n    let transformTable = this.digitTransformTable(this.locale)\n    let numberString = String(num)\n    let convertedNumber = ''\n\n    if (!transformTable) {\n      return num\n    }\n\n    // Check if the restore to Latin number flag is set:\n    if (integer) {\n      if (parseFloat(num, 10) === num) {\n        return num\n      }\n\n      let tmp = []\n\n      for (let item in transformTable) {\n        tmp[ transformTable[ item ] ] = item\n      }\n\n      transformTable = tmp\n    }\n\n    for (let i = 0; i < numberString.length; i++) {\n      if (transformTable[ numberString[ i ] ]) {\n        convertedNumber += transformTable[ numberString[ i ] ]\n      } else {\n        convertedNumber += numberString[ i ]\n      }\n    }\n\n    return integer ? parseFloat(convertedNumber, 10) : convertedNumber\n  }\n\n  /**\n   * Grammatical transformations, needed for inflected languages.\n   * Invoked by putting {{grammar:form|word}} in a message.\n   * Override this method for languages that need special grammar rules\n   * applied dynamically.\n   *\n   * @param {string} word\n   * @param {string} form\n   * @return {string}\n   */\n  // eslint-disable-next-line no-unused-vars\n  convertGrammar (word, form) {\n    return word\n  }\n\n  /**\n   * Provides an alternative text depending on specified gender. Usage\n   * {{gender:[gender|user object]|masculine|feminine|neutral}}. If second\n   * or third parameter are not specified, masculine is used.\n   *\n   * These details may be overriden per language.\n   *\n   * @param {string} gender male, female, or anything else for neutral.\n   * @param {Array} forms List of gender forms\n   * @return {string}\n   */\n  gender (gender, forms) {\n    if (!forms || forms.length === 0) {\n      return ''\n    }\n\n    while (forms.length < 2) {\n      forms.push(forms[ forms.length - 1 ])\n    }\n\n    if (gender === 'male') {\n      return forms[ 0 ]\n    }\n\n    if (gender === 'female') {\n      return forms[ 1 ]\n    }\n\n    return (forms.length === 3) ? forms[ 2 ] : forms[ 0 ]\n  }\n\n  /**\n   * Get the digit transform table for the given language\n   * See http://cldr.unicode.org/translation/numbering-systems\n   *\n   * @param {string} language\n   * @return {Array|boolean} List of digits in the passed language or false\n   * representation, or boolean false if there is no information.\n   */\n  digitTransformTable (language) {\n    if (!DIGITTRANSFORMTABLE[ language ]) {\n      return false\n    }\n\n    return DIGITTRANSFORMTABLE[ language ].split('')\n  }\n}\n","import BananaLanguage from './language'\nimport HebrewLanguage from './he'\nimport BosnianLanguage from './bs'\nimport DolnoserbskiLanguage from './dsb'\nimport HornjoserbsceLanguage from './hsb'\nimport FinnishLanguage from './fi'\nimport RussianLanguage from './ru'\nimport SlovenianLanguage from './sl'\nimport LatinLanguage from './la'\nimport ArmenianLanguage from './hy'\nimport IrishLanguage from './ga'\nimport HungarianLanguage from './hu'\nimport OssetianLanguage from './os'\nimport UkrainianLanguage from './uk'\n\nexport default {\n  'bs': BosnianLanguage,\n  'default': BananaLanguage,\n  'dsb': DolnoserbskiLanguage,\n  'fi': FinnishLanguage,\n  'ga': IrishLanguage,\n  'he': HebrewLanguage,\n  'hsb': HornjoserbsceLanguage,\n  'hu': HungarianLanguage,\n  'hy': ArmenianLanguage,\n  'la': LatinLanguage,\n  'os': OssetianLanguage,\n  'ru': RussianLanguage,\n  'sl': SlovenianLanguage,\n  'uk': UkrainianLanguage\n}\n","/**\n * Bosnian (bosanski) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class BosnianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 's ' + word\n        break\n      case 'lokativ': // locative\n        word = 'o ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Lower Sorbian (Dolnoserbski) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class DolnoserbskiLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 'z ' + word\n        break\n      case 'lokatiw': // lokatiw\n        word = 'wo ' + word\n        break\n    }\n    return word\n  }\n}\n","/**\n * Finnish (Suomi) language functions\n *\n * @author Santhosh Thottingal\n */\n\nimport BananaLanguage from './language'\n\nexport default class FinnishLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    // vowel harmony flag\n    let aou = word.match(/[aou][^äöy]*$/i)\n\n    let origWord = word\n    if (word.match(/wiki$/i)) {\n      aou = false\n    }\n\n    // append i after final consonant\n    if (word.match(/[bcdfghjklmnpqrstvwxz]$/i)) {\n      word += 'i'\n    }\n\n    switch (form) {\n      case 'genitive':\n        word += 'n'\n        break\n      case 'elative':\n        word += (aou ? 'sta' : 'stä')\n        break\n      case 'partitive':\n        word += (aou ? 'a' : 'ä')\n        break\n      case 'illative':\n        // Double the last letter and add 'n'\n        word += word.slice(-1) + 'n'\n        break\n      case 'inessive':\n        word += (aou ? 'ssa' : 'ssä')\n        break\n      default:\n        word = origWord\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Irish (Gaeilge) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class IrishLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'ainmlae') {\n      switch (word) {\n        case 'an Domhnach':\n          word = 'Dé Domhnaigh'\n          break\n        case 'an Luan':\n          word = 'Dé Luain'\n          break\n        case 'an Mháirt':\n          word = 'Dé Mháirt'\n          break\n        case 'an Chéadaoin':\n          word = 'Dé Chéadaoin'\n          break\n        case 'an Déardaoin':\n          word = 'Déardaoin'\n          break\n        case 'an Aoine':\n          word = 'Dé hAoine'\n          break\n        case 'an Satharn':\n          word = 'Dé Sathairn'\n          break\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Hebrew (עברית) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class HebrewLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'prefixed':\n      case 'תחילית': // the same word in Hebrew\n        // Duplicate prefixed \"Waw\", but only if it's not already double\n        if (word.slice(0, 1) === 'ו' && word.slice(0, 2) !== 'וו') {\n          word = 'ו' + word\n        }\n\n        // Remove the \"He\" if prefixed\n        if (word.slice(0, 1) === 'ה') {\n          word = word.slice(1)\n        }\n\n        // Add a hyphen (maqaf) before numbers and non-Hebrew letters\n        if (word.slice(0, 1) < 'א' || word.slice(0, 1) > 'ת') {\n          word = '־' + word\n        }\n    }\n\n    return word\n  }\n}\n","/**\n * Upper Sorbian (Hornjoserbsce) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class HornjoserbsceLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'instrumental': // instrumental\n        word = 'z ' + word\n        break\n      case 'lokatiw': // lokatiw\n        word = 'wo ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Hungarian language functions\n *\n */\nimport BananaLanguage from './language'\n\nexport default class HungarianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'rol':\n        word += 'ról'\n        break\n      case 'ba':\n        word += 'ba'\n        break\n      case 'k':\n        word += 'k'\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Armenian (Հայերեն) language functions\n */\n\nimport BananaLanguage from './language'\n\nexport default class ArmenianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'genitive') { // սեռական հոլով\n      if (word.slice(-1) === 'ա') {\n        word = word.slice(0, -1) + 'այի'\n      } else if (word.slice(-1) === 'ո') {\n        word = word.slice(0, -1) + 'ոյի'\n      } else if (word.slice(-4) === 'գիրք') {\n        word = word.slice(0, -4) + 'գրքի'\n      } else {\n        word = word + 'ի'\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Latin (lingua Latina) language functions\n *\n */\nimport BananaLanguage from './language'\n\nexport default class LatinLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'genitive':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'i') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'ommunium') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'ae') // 1st declension singular\n        word = word.replace(/libri$/i, 'librorum') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntiorum') // 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tionis') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'ntis')\n        word = word.replace(/as$/i, 'atis')\n        word = word.replace(/es$/i, 'ei') // 5th declension singular\n        break\n      case 'accusative':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'um') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'am') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'ommunia') // 1st declension singular\n        word = word.replace(/libri$/i, 'libros') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntios')// 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tionem') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'ntem')\n        word = word.replace(/as$/i, 'atem')\n        word = word.replace(/es$/i, 'em') // 5th declension singular\n        break\n      case 'ablative':\n        // only a few declensions, and even for those mostly the singular only\n        word = word.replace(/u[ms]$/i, 'o') // 2nd declension singular\n        word = word.replace(/ommunia$/i, 'ommunibus') // 3rd declension neuter plural (partly)\n        word = word.replace(/a$/i, 'a') // 1st declension singular\n        word = word.replace(/libri$/i, 'libris') // 2nd declension plural (partly)\n        word = word.replace(/nuntii$/i, 'nuntiis') // 2nd declension plural (partly)\n        word = word.replace(/tio$/i, 'tione') // 3rd declension singular (partly)\n        word = word.replace(/ns$/i, 'nte')\n        word = word.replace(/as$/i, 'ate')\n        word = word.replace(/es$/i, 'e') // 5th declension singular\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Ossetian (Ирон) language functions\n *\n * @author Santhosh Thottingal\n */\nimport BananaLanguage from './language'\n\nexport default class OssetianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    var endAllative, jot, hyphen, ending\n\n    // Ending for allative case\n    endAllative = 'мæ'\n    // Variable for 'j' beetwen vowels\n    jot = ''\n    // Variable for \"-\" for not Ossetic words\n    hyphen = ''\n    // Variable for ending\n    ending = ''\n\n    if (word.match(/тæ$/i)) {\n      // Checking if the $word is in plural form\n      word = word.slice(0, -1)\n      endAllative = 'æм'\n    } else if (word.match(/[аæеёиоыэюя]$/i)) {\n      // Works if word is in singular form.\n      // Checking if word ends on one of the vowels: е, ё, и, о, ы, э, ю,\n      // я.\n      jot = 'й'\n    } else if (word.match(/у$/i)) {\n      // Checking if word ends on 'у'. 'У' can be either consonant 'W' or\n      // vowel 'U' in cyrillic Ossetic.\n      // Examples: {{grammar:genitive|аунеу}} = аунеуы,\n      // {{grammar:genitive|лæппу}} = лæппуйы.\n      if (!word.slice(-2, -1)\n        .match(/[аæеёиоыэюя]$/i)) {\n        jot = 'й'\n      }\n    } else if (!word.match(/[бвгджзйклмнопрстфхцчшщьъ]$/i)) {\n      hyphen = '-'\n    }\n\n    switch (form) {\n      case 'genitive':\n        ending = hyphen + jot + 'ы'\n        break\n      case 'dative':\n        ending = hyphen + jot + 'æн'\n        break\n      case 'allative':\n        ending = hyphen + endAllative\n        break\n      case 'ablative':\n        if (jot === 'й') {\n          ending = hyphen + jot + 'æ'\n        } else {\n          ending = hyphen + jot + 'æй'\n        }\n        break\n      case 'superessive':\n        ending = hyphen + jot + 'ыл'\n        break\n      case 'equative':\n        ending = hyphen + jot + 'ау'\n        break\n      case 'comitative':\n        ending = hyphen + 'имæ'\n        break\n    }\n\n    return word + ending\n  }\n}\n","/**\n * Russian (Русский) language functions\n */\n\nimport BananaLanguage from './language'\n\nexport default class RussianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    if (form === 'genitive') { // родительный падеж\n      if (word.slice(-1) === 'ь') {\n        word = word.slice(0, -1) + 'я'\n      } else if (word.slice(-2) === 'ия') {\n        word = word.slice(0, -2) + 'ии'\n      } else if (word.slice(-2) === 'ка') {\n        word = word.slice(0, -2) + 'ки'\n      } else if (word.slice(-2) === 'ти') {\n        word = word.slice(0, -2) + 'тей'\n      } else if (word.slice(-2) === 'ды') {\n        word = word.slice(0, -2) + 'дов'\n      } else if (word.slice(-3) === 'ник') {\n        word = word.slice(0, -3) + 'ника'\n      }\n    }\n\n    return word\n  }\n}\n","/**\n * Slovenian (Slovenščina) language functions\n */\nimport BananaLanguage from './language'\n\nexport default class SlovenianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      // locative\n      case 'mestnik':\n        word = 'o ' + word\n        break\n        // instrumental\n      case 'orodnik':\n        word = 'z ' + word\n        break\n    }\n\n    return word\n  }\n}\n","/**\n * Ukrainian (Українська) language functions\n */\n\nimport BananaLanguage from './language'\n\nexport default class UkrainianLanguage extends BananaLanguage {\n  convertGrammar (word, form) {\n    switch (form) {\n      case 'genitive': // родовий відмінок\n        if (word.slice(-1) === 'ь') {\n          word = word.slice(0, -1) + 'я'\n        } else if (word.slice(-2) === 'ія') {\n          word = word.slice(0, -2) + 'ії'\n        } else if (word.slice(-2) === 'ка') {\n          word = word.slice(0, -2) + 'ки'\n        } else if (word.slice(-2) === 'ти') {\n          word = word.slice(0, -2) + 'тей'\n        } else if (word.slice(-2) === 'ды') {\n          word = word.slice(0, -2) + 'дов'\n        } else if (word.slice(-3) === 'ник') {\n          word = word.slice(0, -3) + 'ника'\n        }\n\n        break\n      case 'accusative': // знахідний відмінок\n        if (word.slice(-2) === 'ія') {\n          word = word.slice(0, -2) + 'ію'\n        }\n\n        break\n    }\n\n    return word\n  }\n}\n","import languages from './languages'\n\n/**\n * Matches the first strong directionality codepoint:\n * - in group 1 if it is LTR\n * - in group 2 if it is RTL\n * Does not match if there is no strong directionality codepoint.\n *\n * Generated by UnicodeJS (see tools/strongDir) from the UCD; see\n * https://phabricator.wikimedia.org/diffusion/GUJS/ .\n */\nconst strongDirRegExp = new RegExp(\n  '(?:' +\n    '(' +\n    '[\\u0041-\\u005a\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02b8\\u02bb-\\u02c1\\u02d0\\u02d1\\u02e0-\\u02e4\\u02ee\\u0370-\\u0373\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0482\\u048a-\\u052f\\u0531-\\u0556\\u0559-\\u055f\\u0561-\\u0587\\u0589\\u0903-\\u0939\\u093b\\u093d-\\u0940\\u0949-\\u094c\\u094e-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd-\\u09c0\\u09c7\\u09c8\\u09cb\\u09cc\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e1\\u09e6-\\u09f1\\u09f4-\\u09fa\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3e-\\u0a40\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a6f\\u0a72-\\u0a74\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd-\\u0ac0\\u0ac9\\u0acb\\u0acc\\u0ad0\\u0ae0\\u0ae1\\u0ae6-\\u0af0\\u0af9\\u0b02\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b3e\\u0b40\\u0b47\\u0b48\\u0b4b\\u0b4c\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b66-\\u0b77\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe\\u0bbf\\u0bc1\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcc\\u0bd0\\u0bd7\\u0be6-\\u0bf2\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c41-\\u0c44\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c66-\\u0c6f\\u0c7f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd-\\u0cc4\\u0cc6-\\u0cc8\\u0cca\\u0ccb\\u0cd5\\u0cd6\\u0cde\\u0ce0\\u0ce1\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d40\\u0d46-\\u0d48\\u0d4a-\\u0d4c\\u0d4e\\u0d57\\u0d5f-\\u0d61\\u0d66-\\u0d75\\u0d79-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dcf-\\u0dd1\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2-\\u0df4\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e4f-\\u0e5b\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00-\\u0f17\\u0f1a-\\u0f34\\u0f36\\u0f38\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f7f\\u0f85\\u0f88-\\u0f8c\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce-\\u0fda\\u1000-\\u102c\\u1031\\u1038\\u103b\\u103c\\u103f-\\u1057\\u105a-\\u105d\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108c\\u108e-\\u109c\\u109e-\\u10c5\\u10c7\\u10cd\\u10d0-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1360-\\u137c\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u167f\\u1681-\\u169a\\u16a0-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1735\\u1736\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17b6\\u17be-\\u17c5\\u17c7\\u17c8\\u17d4-\\u17da\\u17dc\\u17e0-\\u17e9\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1923-\\u1926\\u1929-\\u192b\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19da\\u1a00-\\u1a16\\u1a19\\u1a1a\\u1a1e-\\u1a55\\u1a57\\u1a61\\u1a63\\u1a64\\u1a6d-\\u1a72\\u1a80-\\u1a89\\u1a90-\\u1a99\\u1aa0-\\u1aad\\u1b04-\\u1b33\\u1b35\\u1b3b\\u1b3d-\\u1b41\\u1b43-\\u1b4b\\u1b50-\\u1b6a\\u1b74-\\u1b7c\\u1b82-\\u1ba1\\u1ba6\\u1ba7\\u1baa\\u1bae-\\u1be5\\u1be7\\u1bea-\\u1bec\\u1bee\\u1bf2\\u1bf3\\u1bfc-\\u1c2b\\u1c34\\u1c35\\u1c3b-\\u1c49\\u1c4d-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u1ce1\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200e\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u214f\\u2160-\\u2188\\u2336-\\u237a\\u2395\\u249c-\\u24e9\\u26ac\\u2800-\\u28ff\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d70\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u302e\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u3190-\\u31ba\\u31f0-\\u321c\\u3220-\\u324f\\u3260-\\u327b\\u327f-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u32fe\\u3300-\\u3376\\u337b-\\u33dd\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66e\\ua680-\\ua69d\\ua6a0-\\ua6ef\\ua6f2-\\ua6f7\\ua722-\\ua787\\ua789-\\ua7ad\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua824\\ua827\\ua830-\\ua837\\ua840-\\ua873\\ua880-\\ua8c3\\ua8ce-\\ua8d9\\ua8f2-\\ua8fd\\ua900-\\ua925\\ua92e-\\ua946\\ua952\\ua953\\ua95f-\\ua97c\\ua983-\\ua9b2\\ua9b4\\ua9b5\\ua9ba\\ua9bb\\ua9bd-\\ua9cd\\ua9cf-\\ua9d9\\ua9de-\\ua9e4\\ua9e6-\\ua9fe\\uaa00-\\uaa28\\uaa2f\\uaa30\\uaa33\\uaa34\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa4d\\uaa50-\\uaa59\\uaa5c-\\uaa7b\\uaa7d-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaaeb\\uaaee-\\uaaf5\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab65\\uab70-\\uabe4\\uabe6\\uabe7\\uabe9-\\uabec\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ue000-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b]|\\ud800[\\udc0d-\\udc26]|\\ud800[\\udc28-\\udc3a]|\\ud800\\udc3c|\\ud800\\udc3d|\\ud800[\\udc3f-\\udc4d]|\\ud800[\\udc50-\\udc5d]|\\ud800[\\udc80-\\udcfa]|\\ud800\\udd00|\\ud800\\udd02|\\ud800[\\udd07-\\udd33]|\\ud800[\\udd37-\\udd3f]|\\ud800[\\uddd0-\\uddfc]|\\ud800[\\ude80-\\ude9c]|\\ud800[\\udea0-\\uded0]|\\ud800[\\udf00-\\udf23]|\\ud800[\\udf30-\\udf4a]|\\ud800[\\udf50-\\udf75]|\\ud800[\\udf80-\\udf9d]|\\ud800[\\udf9f-\\udfc3]|\\ud800[\\udfc8-\\udfd5]|\\ud801[\\udc00-\\udc9d]|\\ud801[\\udca0-\\udca9]|\\ud801[\\udd00-\\udd27]|\\ud801[\\udd30-\\udd63]|\\ud801\\udd6f|\\ud801[\\ude00-\\udf36]|\\ud801[\\udf40-\\udf55]|\\ud801[\\udf60-\\udf67]|\\ud804\\udc00|\\ud804[\\udc02-\\udc37]|\\ud804[\\udc47-\\udc4d]|\\ud804[\\udc66-\\udc6f]|\\ud804[\\udc82-\\udcb2]|\\ud804\\udcb7|\\ud804\\udcb8|\\ud804[\\udcbb-\\udcc1]|\\ud804[\\udcd0-\\udce8]|\\ud804[\\udcf0-\\udcf9]|\\ud804[\\udd03-\\udd26]|\\ud804\\udd2c|\\ud804[\\udd36-\\udd43]|\\ud804[\\udd50-\\udd72]|\\ud804[\\udd74-\\udd76]|\\ud804[\\udd82-\\uddb5]|\\ud804[\\uddbf-\\uddc9]|\\ud804\\uddcd|\\ud804[\\uddd0-\\udddf]|\\ud804[\\udde1-\\uddf4]|\\ud804[\\ude00-\\ude11]|\\ud804[\\ude13-\\ude2e]|\\ud804\\ude32|\\ud804\\ude33|\\ud804\\ude35|\\ud804[\\ude38-\\ude3d]|\\ud804[\\ude80-\\ude86]|\\ud804\\ude88|\\ud804[\\ude8a-\\ude8d]|\\ud804[\\ude8f-\\ude9d]|\\ud804[\\ude9f-\\udea9]|\\ud804[\\udeb0-\\udede]|\\ud804[\\udee0-\\udee2]|\\ud804[\\udef0-\\udef9]|\\ud804\\udf02|\\ud804\\udf03|\\ud804[\\udf05-\\udf0c]|\\ud804\\udf0f|\\ud804\\udf10|\\ud804[\\udf13-\\udf28]|\\ud804[\\udf2a-\\udf30]|\\ud804\\udf32|\\ud804\\udf33|\\ud804[\\udf35-\\udf39]|\\ud804[\\udf3d-\\udf3f]|\\ud804[\\udf41-\\udf44]|\\ud804\\udf47|\\ud804\\udf48|\\ud804[\\udf4b-\\udf4d]|\\ud804\\udf50|\\ud804\\udf57|\\ud804[\\udf5d-\\udf63]|\\ud805[\\udc80-\\udcb2]|\\ud805\\udcb9|\\ud805[\\udcbb-\\udcbe]|\\ud805\\udcc1|\\ud805[\\udcc4-\\udcc7]|\\ud805[\\udcd0-\\udcd9]|\\ud805[\\udd80-\\uddb1]|\\ud805[\\uddb8-\\uddbb]|\\ud805\\uddbe|\\ud805[\\uddc1-\\udddb]|\\ud805[\\ude00-\\ude32]|\\ud805\\ude3b|\\ud805\\ude3c|\\ud805\\ude3e|\\ud805[\\ude41-\\ude44]|\\ud805[\\ude50-\\ude59]|\\ud805[\\ude80-\\udeaa]|\\ud805\\udeac|\\ud805\\udeae|\\ud805\\udeaf|\\ud805\\udeb6|\\ud805[\\udec0-\\udec9]|\\ud805[\\udf00-\\udf19]|\\ud805\\udf20|\\ud805\\udf21|\\ud805\\udf26|\\ud805[\\udf30-\\udf3f]|\\ud806[\\udca0-\\udcf2]|\\ud806\\udcff|\\ud806[\\udec0-\\udef8]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e]|\\ud809[\\udc70-\\udc74]|\\ud809[\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38]|\\ud81a[\\ude40-\\ude5e]|\\ud81a[\\ude60-\\ude69]|\\ud81a\\ude6e|\\ud81a\\ude6f|\\ud81a[\\uded0-\\udeed]|\\ud81a\\udef5|\\ud81a[\\udf00-\\udf2f]|\\ud81a[\\udf37-\\udf45]|\\ud81a[\\udf50-\\udf59]|\\ud81a[\\udf5b-\\udf61]|\\ud81a[\\udf63-\\udf77]|\\ud81a[\\udf7d-\\udf8f]|\\ud81b[\\udf00-\\udf44]|\\ud81b[\\udf50-\\udf7e]|\\ud81b[\\udf93-\\udf9f]|\\ud82c\\udc00|\\ud82c\\udc01|\\ud82f[\\udc00-\\udc6a]|\\ud82f[\\udc70-\\udc7c]|\\ud82f[\\udc80-\\udc88]|\\ud82f[\\udc90-\\udc99]|\\ud82f\\udc9c|\\ud82f\\udc9f|\\ud834[\\udc00-\\udcf5]|\\ud834[\\udd00-\\udd26]|\\ud834[\\udd29-\\udd66]|\\ud834[\\udd6a-\\udd72]|\\ud834\\udd83|\\ud834\\udd84|\\ud834[\\udd8c-\\udda9]|\\ud834[\\uddae-\\udde8]|\\ud834[\\udf60-\\udf71]|\\ud835[\\udc00-\\udc54]|\\ud835[\\udc56-\\udc9c]|\\ud835\\udc9e|\\ud835\\udc9f|\\ud835\\udca2|\\ud835\\udca5|\\ud835\\udca6|\\ud835[\\udca9-\\udcac]|\\ud835[\\udcae-\\udcb9]|\\ud835\\udcbb|\\ud835[\\udcbd-\\udcc3]|\\ud835[\\udcc5-\\udd05]|\\ud835[\\udd07-\\udd0a]|\\ud835[\\udd0d-\\udd14]|\\ud835[\\udd16-\\udd1c]|\\ud835[\\udd1e-\\udd39]|\\ud835[\\udd3b-\\udd3e]|\\ud835[\\udd40-\\udd44]|\\ud835\\udd46|\\ud835[\\udd4a-\\udd50]|\\ud835[\\udd52-\\udea5]|\\ud835[\\udea8-\\udeda]|\\ud835[\\udedc-\\udf14]|\\ud835[\\udf16-\\udf4e]|\\ud835[\\udf50-\\udf88]|\\ud835[\\udf8a-\\udfc2]|\\ud835[\\udfc4-\\udfcb]|\\ud836[\\udc00-\\uddff]|\\ud836[\\ude37-\\ude3a]|\\ud836[\\ude6d-\\ude74]|\\ud836[\\ude76-\\ude83]|\\ud836[\\ude85-\\ude8b]|\\ud83c[\\udd10-\\udd2e]|\\ud83c[\\udd30-\\udd69]|\\ud83c[\\udd70-\\udd9a]|\\ud83c[\\udde6-\\ude02]|\\ud83c[\\ude10-\\ude3a]|\\ud83c[\\ude40-\\ude48]|\\ud83c\\ude50|\\ud83c\\ude51|[\\ud840-\\ud868][\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6]|\\ud869[\\udf00-\\udfff]|[\\ud86a-\\ud86c][\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34]|\\ud86d[\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d]|\\ud86e[\\udc20-\\udfff]|[\\ud86f-\\ud872][\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1]|\\ud87e[\\udc00-\\ude1d]|[\\udb80-\\udbbe][\\udc00-\\udfff]|\\udbbf[\\udc00-\\udffd]|[\\udbc0-\\udbfe][\\udc00-\\udfff]|\\udbff[\\udc00-\\udffd]' +\n    ')|(' +\n    '[\\u0590\\u05be\\u05c0\\u05c3\\u05c6\\u05c8-\\u05ff\\u07c0-\\u07ea\\u07f4\\u07f5\\u07fa-\\u0815\\u081a\\u0824\\u0828\\u082e-\\u0858\\u085c-\\u089f\\u200f\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb4f\\u0608\\u060b\\u060d\\u061b-\\u064a\\u066d-\\u066f\\u0671-\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u0710\\u0712-\\u072f\\u074b-\\u07a5\\u07b1-\\u07bf\\u08a0-\\u08e2\\ufb50-\\ufd3d\\ufd40-\\ufdcf\\ufdf0-\\ufdfc\\ufdfe\\ufdff\\ufe70-\\ufefe]|\\ud802[\\udc00-\\udd1e]|\\ud802[\\udd20-\\ude00]|\\ud802\\ude04|\\ud802[\\ude07-\\ude0b]|\\ud802[\\ude10-\\ude37]|\\ud802[\\ude3b-\\ude3e]|\\ud802[\\ude40-\\udee4]|\\ud802[\\udee7-\\udf38]|\\ud802[\\udf40-\\udfff]|\\ud803[\\udc00-\\ude5f]|\\ud803[\\ude7f-\\udfff]|\\ud83a[\\udc00-\\udccf]|\\ud83a[\\udcd7-\\udfff]|\\ud83b[\\udc00-\\uddff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\udf00-\\udfff]|\\ud83b[\\ude00-\\udeef]|\\ud83b[\\udef2-\\udeff]' +\n    ')' +\n    ')'\n)\n\nclass BananaEmitter {\n  constructor (locale) {\n    this.locale = locale\n    this.language = new (languages[locale] || languages['default'])(locale)\n  }\n\n  /**\n   * (We put this method definition here, and not in prototype, to make\n   * sure it's not overwritten by any magic.) Walk entire node structure,\n   * applying replacements and template functions when appropriate\n   *\n   * @param {Mixed} node abstract syntax tree (top node or subnode)\n   * @param {Array} replacements for $1, $2, ... $n\n   * @return {Mixed} single-string node or array of nodes suitable for\n   *  jQuery appending.\n   */\n  emit (node, replacements) {\n    let ret\n    let subnodes\n    let operation\n\n    switch (typeof node) {\n      case 'string':\n      case 'number':\n        ret = node\n        break\n      case 'object':\n        // node is an array of nodes\n        subnodes = node.slice(1).map((n) => this.emit(n, replacements))\n\n        operation = node[0].toLowerCase()\n\n        if (typeof this[operation] === 'function') {\n          ret = this[operation](subnodes, replacements)\n        } else {\n          throw new Error('unknown operation \"' + operation + '\"')\n        }\n\n        break\n      case 'undefined':\n        // Parsing the empty string (as an entire expression, or as a\n        // paramExpression in a template) results in undefined\n        // Perhaps a more clever parser can detect this, and return the\n        // empty string? Or is that useful information?\n        // The logical thing is probably to return the empty string here\n        // when we encounter undefined.\n        ret = ''\n        break\n      default:\n        throw new Error('unexpected type in AST: ' + typeof node)\n    }\n\n    return ret\n  }\n\n  /**\n   * Parsing has been applied depth-first we can assume that all nodes\n   * here are single nodes Must return a single node to parents -- a\n   * jQuery with synthetic span However, unwrap any other synthetic spans\n   * in our children and pass them upwards\n   *\n   * @param {Array} nodes Mixed, some single nodes, some arrays of nodes.\n   * @return {string}\n   */\n  concat (nodes) {\n    let result = ''\n\n    nodes.forEach((node) => {\n      // strings, integers, anything else\n      result += node\n    })\n\n    return result\n  }\n\n  /**\n   * Return escaped replacement of correct index, or string if\n   * unavailable. Note that we expect the parsed parameter to be\n   * zero-based. i.e. $1 should have become [ 0 ]. if the specified\n   * parameter is not found return the same string (e.g. \"$99\" ->\n    parameter 98 -> not found -> return \"$99\" ) TODO throw error if\n   * nodes.length > 1 ?\n   *\n   * @param {Array} nodes One element, integer, n >= 0\n   * @param {Array} replacements for $1, $2, ... $n\n   * @return {string} replacement\n   */\n  replace (nodes, replacements) {\n    let index = parseInt(nodes[0], 10)\n\n    if (index < replacements.length) {\n      // replacement is not a string, don't touch!\n      return replacements[index]\n    } else {\n      // index not found, fallback to displaying letiable\n      return '$' + (index + 1)\n    }\n  }\n\n  /**\n   * Transform parsed structure into pluralization n.b. The first node may\n   * be a non-integer (for instance, a string representing an Arabic\n   * number). So convert it back with the current language's\n   * convertNumber.\n   *\n   * @param {Array} nodes List [ {String|Number}, {String}, {String} ... ]\n   * @return {string} selected pluralized form according to current\n   *  language.\n   */\n  plural (nodes) {\n    let count = parseFloat(this.language.convertNumber(nodes[0], 10))\n    let forms = nodes.slice(1)\n    return forms.length ? this.language.convertPlural(count, forms) : ''\n  }\n\n  /**\n   * Transform parsed structure into gender Usage\n   * {{gender:gender|masculine|feminine|neutral}}.\n   *\n   * @param {Array} nodes List [ {String}, {String}, {String} , {String} ]\n   * @return {string} selected gender form according to current language\n   */\n  gender (nodes) {\n    let gender = nodes[0]\n    let forms = nodes.slice(1)\n    return this.language.gender(gender, forms)\n  }\n\n  /**\n   * Transform parsed structure into grammar conversion. Invoked by\n   * putting {{grammar:form|word}} in a message\n   *\n   * @param {Array} nodes List [{Grammar case eg: genitive}, {String word}]\n   * @return {string} selected grammatical form according to current\n   *  language.\n   */\n  grammar (nodes) {\n    let form = nodes[0]\n    let word = nodes[1]\n    return word && form && this.language.convertGrammar(word, form)\n  }\n\n  /**\n   * Transform wiki-link\n   *\n   * @param {String[]} nodes\n   * @return {String}\n   */\n  wikilink (nodes) {\n    let anchor\n    let page = nodes[0]\n    // Strip leading ':', which is used to suppress special behavior in wikitext links,\n    // e.g. [[:Category:Foo]] or [[:File:Foo.jpg]]\n    if (page.charAt(0) === ':') {\n      page = page.slice(1)\n    }\n    const url = `./${page}`\n\n    if (nodes.length === 1) {\n      // [[Some Page]] or [[Namespace:Some Page]]\n      anchor = page\n    } else {\n      // [[Some Page|anchor text]] or [[Namespace:Some Page|anchor]]\n      anchor = nodes[1]\n    }\n\n    return `<a href=\"${url}\" title=\"${page}\">${anchor}</a>`\n  }\n\n  /**\n   * Transform parsed structure into external link.\n   *\n   * @param {String[]} nodes\n   * @return {String}\n   */\n  extlink (nodes) {\n    if (nodes.length !== 2) {\n      throw Error('Expected two items in the node')\n    }\n    return `<a href=\"${nodes[0]}\">${nodes[1]}</a>`\n  }\n\n  /**\n   * Wraps argument with unicode control characters for directionality safety\n   *\n   * This solves the problem where directionality-neutral characters at the edge of\n   * the argument string get interpreted with the wrong directionality from the\n   * enclosing context, giving renderings that look corrupted like \"(Ben_(WMF\".\n   *\n   * The wrapping is LRE...PDF or RLE...PDF, depending on the detected\n   * directionality of the argument string, using the BIDI algorithm's own \"First\n   * strong directional codepoint\" rule. Essentially, this works round the fact that\n   * there is no embedding equivalent of U+2068 FSI (isolation with heuristic\n   * direction inference). The latter is cleaner but still not widely supported.\n   *\n   * @param {string[]} nodes The text nodes from which to take the first item.\n   * @return {string} Wrapped String of content as needed.\n   */\n  bidi (nodes) {\n    var dir = strongDirFromContent(nodes[0])\n    if (dir === 'ltr') {\n    // Wrap in LEFT-TO-RIGHT EMBEDDING ... POP DIRECTIONAL FORMATTING\n      return '\\u202A' + nodes[0] + '\\u202C'\n    }\n    if (dir === 'rtl') {\n    // Wrap in RIGHT-TO-LEFT EMBEDDING ... POP DIRECTIONAL FORMATTING\n      return '\\u202B' + nodes[0] + '\\u202C'\n    }\n    // No strong directionality: do not wrap\n    return nodes[0]\n  }\n}\n\n/**\n * Gets directionality of the first strongly directional codepoint\n *\n * This is the rule the BIDI algorithm uses to determine the directionality of\n * paragraphs ( http://unicode.org/reports/tr9/#The_Paragraph_Level ) and\n * FSI isolates ( http://unicode.org/reports/tr9/#Explicit_Directional_Isolates ).\n *\n * TODO: Does not handle BIDI control characters inside the text.\n * TODO: Does not handle unallocated characters.\n *\n * @param {string} text The text from which to extract initial directionality.\n * @return {string} Directionality (either 'ltr' or 'rtl')\n */\nfunction strongDirFromContent (text) {\n  var m = text.match(strongDirRegExp)\n  if (!m) {\n    return null\n  }\n  if (m[2] === undefined) {\n    return 'ltr'\n  }\n  return 'rtl'\n}\n\nexport default BananaEmitter\n","/**\n * Abstract Syntax Tree for a localization message in 'Banana' format\n * @param {string} message\n */\nexport default function BananaMessage (message) {\n  let escapedOrLiteralWithoutBar,\n    escapedOrRegularLiteral, templateContents, templateName,\n    expression, paramExpression, result\n\n  let pos = 0\n\n  // Try parsers until one works, if none work return null\n  function choice (parserSyntax) {\n    return () => {\n      for (let i = 0; i < parserSyntax.length; i++) {\n        let result = parserSyntax[ i ]()\n\n        if (result !== null) {\n          return result\n        }\n      }\n\n      return null\n    }\n  }\n\n  // Try several parserSyntax-es in a row.\n  // All must succeed; otherwise, return null.\n  // This is the only eager one.\n  function sequence (parserSyntax) {\n    let originalPos = pos\n\n    let result = []\n\n    for (let i = 0; i < parserSyntax.length; i++) {\n      let res = parserSyntax[ i ]()\n\n      if (res === null) {\n        pos = originalPos\n\n        return null\n      }\n\n      result.push(res)\n    }\n\n    return result\n  }\n\n  // Run the same parser over and over until it fails.\n  // Must succeed a minimum of n times; otherwise, return null.\n  function nOrMore (n, p) {\n    return () => {\n      let originalPos = pos\n\n      let result = []\n\n      let parsed = p()\n\n      while (parsed !== null) {\n        result.push(parsed)\n        parsed = p()\n      }\n\n      if (result.length < n) {\n        pos = originalPos\n\n        return null\n      }\n\n      return result\n    }\n  }\n\n  // Helpers -- just make parserSyntax out of simpler JS builtin types\n\n  function makeStringParser (s) {\n    let len = s.length\n\n    return () => {\n      let result = null\n\n      if (message.slice(pos, pos + len) === s) {\n        result = s\n        pos += len\n      }\n\n      return result\n    }\n  }\n\n  function makeRegexParser (regex) {\n    return () => {\n      let matches = message.slice(pos).match(regex)\n\n      if (matches === null) {\n        return null\n      }\n\n      pos += matches[ 0 ].length\n\n      return matches[ 0 ]\n    }\n  }\n\n  const whitespace = makeRegexParser(/^\\s+/)\n  const pipe = makeStringParser('|')\n  const colon = makeStringParser(':')\n  const backslash = makeStringParser('\\\\')\n  const anyCharacter = makeRegexParser(/^./)\n  const dollar = makeStringParser('$')\n  const digits = makeRegexParser(/^\\d+/)\n  const regularLiteral = makeRegexParser(/^[^{}[\\]$\\\\]/)\n  const regularLiteralWithoutBar = makeRegexParser(/^[^{}[\\]$\\\\|]/)\n  const regularLiteralWithoutSpace = makeRegexParser(/^[^{}[\\]$\\s]/)\n\n  // There is a general pattern:\n  // parse a thing;\n  // if it worked, apply transform,\n  // otherwise return null.\n  // But using this as a combinator seems to cause problems\n  // when combined with nOrMore().\n  // May be some scoping issue.\n  function transform (p, fn) {\n    return () => {\n      let result = p()\n      return result === null ? null : fn(result)\n    }\n  }\n\n  // Used to define \"literals\" within template parameters. The pipe\n  // character is the parameter delimeter, so by default\n  // it is not a literal in the parameter\n  function literalWithoutBar () {\n    let result = nOrMore(1, escapedOrLiteralWithoutBar)()\n\n    return result === null ? null : result.join('')\n  }\n\n  // Used to define \"literals\" within template parameters.\n  // The pipe character is the parameter delimeter, so by default\n  // it is not a literal in the parameter\n  function literal () {\n    const result = nOrMore(1, escapedOrRegularLiteral)()\n    return result === null ? null : result.join('')\n  }\n\n  const escapedOrLiteralWithoutSpace = choice([\n    escapedLiteral,\n    regularLiteralWithoutSpace\n  ])\n\n  // Used to define \"literals\" without spaces, in space-delimited situations\n  function literalWithoutSpace () {\n    const result = nOrMore(1, escapedOrLiteralWithoutSpace)()\n    return result === null ? null : result.join('')\n  }\n\n  function escapedLiteral () {\n    let result = sequence([ backslash, anyCharacter ])\n\n    return result === null ? null : result[ 1 ]\n  }\n\n  choice([ escapedLiteral, regularLiteralWithoutSpace ])\n  escapedOrLiteralWithoutBar = choice([ escapedLiteral, regularLiteralWithoutBar ])\n  escapedOrRegularLiteral = choice([ escapedLiteral, regularLiteral ])\n\n  function replacement () {\n    let result = sequence([ dollar, digits ])\n\n    if (result === null) {\n      return null\n    }\n\n    return [ 'REPLACE', parseInt(result[ 1 ], 10) - 1 ]\n  }\n\n  templateName = transform(\n    // see $wgLegalTitleChars\n    // not allowing : due to the need to catch \"PLURAL:$1\"\n    makeRegexParser(/^[ !\"$&'()*,./0-9;=?@A-Z^_`a-z~\\x80-\\xFF+-]+/),\n\n    function (result) {\n      return result.toString()\n    }\n  )\n\n  function templateParam () {\n    let result = sequence([ pipe, nOrMore(0, paramExpression) ])\n\n    if (result === null) {\n      return null\n    }\n\n    let expr = result[ 1 ]\n\n    // use a \"CONCAT\" operator if there are multiple nodes,\n    // otherwise return the first node, raw.\n    return expr.length > 1 ? [ 'CONCAT' ].concat(expr) : expr[ 0 ]\n  }\n\n  function templateWithReplacement () {\n    let result = sequence([ templateName, colon, replacement ])\n\n    return result === null ? null : [ result[ 0 ], result[ 2 ] ]\n  }\n\n  function templateWithOutReplacement () {\n    let result = sequence([ templateName, colon, paramExpression ])\n\n    return result === null ? null : [ result[ 0 ], result[ 2 ] ]\n  }\n\n  templateContents = choice([\n    function () {\n      let res = sequence([\n        // templates can have placeholders for dynamic\n        // replacement eg: {{PLURAL:$1|one car|$1 cars}}\n        // or no placeholders eg:\n        // {{GRAMMAR:genitive|{{SITENAME}}}\n        choice([ templateWithReplacement, templateWithOutReplacement ]),\n        nOrMore(0, templateParam)\n      ])\n\n      return res === null ? null : res[ 0 ].concat(res[ 1 ])\n    },\n    function () {\n      let res = sequence([ templateName, nOrMore(0, templateParam) ])\n\n      if (res === null) {\n        return null\n      }\n\n      return [ res[ 0 ] ].concat(res[ 1 ])\n    }\n  ])\n\n  const openTemplate = makeStringParser('{{')\n  const closeTemplate = makeStringParser('}}')\n  const openWikilink = makeStringParser('[[')\n  const closeWikilink = makeStringParser(']]')\n  const openExtlink = makeStringParser('[')\n  const closeExtlink = makeStringParser(']')\n\n  function template () {\n    let result = sequence([ openTemplate, templateContents, closeTemplate ])\n\n    return result === null ? null : result[ 1 ]\n  }\n\n  function pipedWikilink () {\n    var result = sequence([\n      nOrMore(1, paramExpression),\n      pipe,\n      nOrMore(1, expression)\n    ])\n    return result === null ? null : [\n      [ 'CONCAT' ].concat(result[ 0 ]),\n      [ 'CONCAT' ].concat(result[ 2 ])\n    ]\n  }\n\n  function unpipedWikilink () {\n    var result = sequence([\n      nOrMore(1, paramExpression)\n    ])\n    return result === null ? null : [\n      [ 'CONCAT' ].concat(result[ 0 ])\n    ]\n  }\n\n  const wikilinkContents = choice([\n    pipedWikilink,\n    unpipedWikilink\n  ])\n\n  function wikilink () {\n    let result = null\n\n    const parsedResult = sequence([\n      openWikilink,\n      wikilinkContents,\n      closeWikilink\n    ])\n\n    if (parsedResult !== null) {\n      const parsedLinkContents = parsedResult[ 1 ]\n      result = [ 'WIKILINK' ].concat(parsedLinkContents)\n    }\n\n    return result\n  }\n\n  // this extlink MUST have inner contents, e.g. [foo] not allowed; [foo bar] [foo <i>bar</i>], etc. are allowed\n  function extlink () {\n    let result = null\n\n    const parsedResult = sequence([\n      openExtlink,\n      nOrMore(1, nonWhitespaceExpression),\n      whitespace,\n      nOrMore(1, expression),\n      closeExtlink\n    ])\n\n    if (parsedResult !== null) {\n      // When the entire link target is a single parameter, we can't use CONCAT, as we allow\n      // passing fancy parameters (like a whole jQuery object or a function) to use for the\n      // link. Check only if it's a single match, since we can either do CONCAT or not for\n      // singles with the same effect.\n      const target = parsedResult[ 1 ].length === 1\n        ? parsedResult[ 1 ][ 0 ]\n        : [ 'CONCAT' ].concat(parsedResult[ 1 ])\n      result = [\n        'EXTLINK',\n        target,\n        [ 'CONCAT' ].concat(parsedResult[ 3 ])\n      ]\n    }\n\n    return result\n  }\n\n  const nonWhitespaceExpression = choice([\n    template,\n    replacement,\n    wikilink,\n    extlink,\n    literalWithoutSpace\n  ])\n\n  expression = choice([\n    template,\n    replacement,\n    wikilink,\n    extlink,\n    literal\n  ])\n\n  paramExpression = choice([ template, replacement, literalWithoutBar ])\n\n  function start () {\n    let result = nOrMore(0, expression)()\n\n    if (result === null) {\n      return null\n    }\n\n    return [ 'CONCAT' ].concat(result)\n  }\n\n  result = start()\n\n  /*\n   * For success, the pos must have gotten to the end of the input\n   * and returned a non-null.\n   * n.b. This is part of language infrastructure, so we do not throw an internationalizable message.\n   */\n  if (result === null || pos !== message.length) {\n    throw new Error('Parse error at position ' + pos.toString() + ' in input: ' + message)\n  }\n\n  return result\n}\n","import BananaEmitter from './emitter'\nimport BananaMessage from './ast'\n\nexport default class BananaParser {\n  constructor (locale) {\n    this.locale = locale\n    this.emitter = new BananaEmitter(this.locale)\n  }\n\n  parse (message, params) {\n    if (message.includes('{{') || message.includes('[')) {\n      let ast = new BananaMessage(message)\n      return this.emitter.emit(ast, params)\n    } else {\n      return this.simpleParse(message, params)\n    }\n  }\n\n  simpleParse (message, parameters) {\n    return message.replace(/\\$(\\d+)/g, (str, match) => {\n      let index = parseInt(match, 10) - 1\n      return parameters[ index ] !== undefined ? parameters[ index ] : '$' + match\n    })\n  }\n}\n","export default class BananaMessageStore {\n  constructor (options) {\n    this.sourceMap = new Map()\n  }\n\n  /**\n   *\n   * @param {Object} messageSource\n   * @param {string} locale BCP 47 language tag.  In its most common form\n   *   it can contain, in order: a language code, a script code, and a country\n   *   or region code, all separated by hyphens. A very minimal validation\n   *   is done.\n   */\n  load (messageSource, locale) {\n    if (typeof messageSource !== 'object') {\n      throw Error(`Invalid message source. Must be an object`)\n    }\n\n    if (locale) {\n      // Validate locale. This is a very minimal test for BCP 47 language tag\n      if (!/^[a-zA-Z0-9-]+$/.test(locale)) {\n        throw Error(`Invalid locale ${locale}`)\n      }\n      // Validate messages\n      for (let key in messageSource) {\n        if (key.indexOf('@') === 0) continue\n        // Check if the message source is locale - message data\n        if (typeof messageSource[key] === 'object') {\n          // The passed locale argument is irrelevant here.\n          return this.load(messageSource)\n        }\n        if (typeof messageSource[key] !== 'string') {\n          throw Error(`Invalid message for message ${key} in ${locale} locale.`)\n        }\n        break\n      }\n      if (this.sourceMap.has(locale)) {\n        this.sourceMap.set(locale, Object.assign(this.sourceMap.get(locale), messageSource))\n      } else {\n        this.sourceMap.set(locale, messageSource)\n      }\n    } else {\n      for (locale in messageSource) {\n        this.load(messageSource[locale], locale)\n      }\n    }\n  }\n\n  getMessage (key, locale) {\n    let localeMessages = this.sourceMap.get(locale)\n    return localeMessages ? localeMessages[key] : null\n  }\n\n  /**\n   * Check if the given locale is present in the message store or not\n   * @param {string} locale\n   * @returns {boolean}\n   */\n  hasLocale (locale) {\n    return this.sourceMap.has(locale)\n  }\n}\n","import BananaParser from './parser'\nimport BananaMessageStore from './messagestore'\nimport fallbacks from './languages/fallbacks.json'\n\nexport default class Banana {\n  constructor (locale, options) {\n    options = options || {}\n    this.locale = locale\n    this.parser = new BananaParser(this.locale)\n    this.messageStore = new BananaMessageStore()\n    if (options.messages) {\n      this.load(options.messages, this.locale)\n    }\n    this.finalFallback = options.finalFallback || 'en'\n  }\n\n  /**\n   * Load localized messages for a locale\n   * If locale not provided, the keys in messageSource will be used as locales.\n   * @param {Object} messageSource\n   * @param {string} [locale]\n   */\n  load (messageSource, locale) {\n    return this.messageStore.load(messageSource, locale || this.locale)\n  }\n\n  i18n (key, ...parameters) {\n    return this.parser.parse(this.getMessage(key), parameters)\n  }\n\n  setLocale (locale) {\n    this.locale = locale\n    // Update parser\n    this.parser = new BananaParser(this.locale)\n  }\n\n  getFallbackLocales () {\n    return [...(fallbacks[this.locale] || []), this.finalFallback]\n  }\n\n  getMessage (messageKey) {\n    let locale = this.locale\n    let fallbackIndex = 0\n    const fallbackLocales = this.getFallbackLocales(this.locale)\n    while (locale) {\n      // Iterate through locales starting at most-specific until\n      // localization is found. As in fi-Latn-FI, fi-Latn and fi.\n      let localeParts = locale.split('-')\n      let localePartIndex = localeParts.length\n\n      do {\n        let tryingLocale = localeParts.slice(0, localePartIndex).join('-')\n\n        let message = this.messageStore.getMessage(messageKey, tryingLocale)\n\n        if (message) {\n          return message\n        }\n\n        localePartIndex--\n      } while (localePartIndex)\n\n      locale = fallbackLocales[fallbackIndex]\n      fallbackIndex++\n    }\n    return messageKey\n  }\n}\n"],"sourceRoot":""}