var Implicit =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js":
/*!***************************************************************!*\
  !*** ./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.logUserAction = logUserAction;\r\nexports.logActivity = logActivity;\r\nexports.sendTelemetryEvent = sendTelemetryEvent;\r\nexports.sendActivityEvent = sendActivityEvent;\r\nexports.sendOtelEvent = sendOtelEvent;\r\nexports.sendUserActionEvent = sendUserActionEvent;\r\nexports.addNamespaceMapping = addNamespaceMapping;\r\nexports.setEnabledState = setEnabledState;\r\nexports.shutdown = shutdown;\r\nexports.registerEventHandler = registerEventHandler; // Assume that telemetry is disabled and simply drop events on the floor unless the developer called initialize(true /*enabled*/).\r\n// This should work well for component / unittest environments since nobody will end up listening to the events.\r\n// The alternative is to cache them, but given that nobody will ever process them it might cause issues since the events would be cached forever.\r\n\r\nvar telemetryEnabled = false;\r\nvar events = [];\r\nvar eventHandler;\r\nvar numberOfDroppedEvents = 0;\r\nvar maxQueueSize = 20000;\r\nvar unknownStr = 'Unknown'; // Primary consumer public API\r\n// ========================================================================================================================\r\n// Call LogUserAction for logging a user action to Otel.\r\n// This is similar to the bSqm actions that used to be logged earlier (deprecated now).\r\n// Make sure you read the documentation below for userActionName and the Kusto table name implications.\r\n// userActionName: Name of the user action, this should come from your app's commands,\r\n//     for example: OneNoteCommands in office-online-ui\\packages\\onenote-online-ux\\src\\store\\OneNoteCommands.ts (https://office.visualstudio.com/OC/_git/office-online-ui?path=%2Fpackages%2Fonenote-online-ux%2Fsrc%2Fstore%2FOneNoteCommands.ts&version=GBmaster)\r\n//     Note that the userActionName will be the name of your table in Aria Kusto. So if 'ABC' is passed in for userActionName, the table in Kusto will be called Office_OneNote_Online_UserAction_ABC (or generically speaking Office_{AppName}_Online_UserAction_ABC )\r\n//     Look at Kusto connection https://kusto.aria.microsoft.com and databases Office Word Online or Office OneNote Online, etc. and look at *UserAction* tables.\r\n// success: Status of the user action (success is true, failure is false).\r\n// parentNameStr: parent surface of the user action (example, tabView, tabHelp, Layout, etc).\r\n// inputMethod: how the user action was performed (for example, via keyboard, or mouse, touch, etc.)\r\n//             See the enum in /packages/app-commanding-ui/src/UISurfaces/controls/InputMethod.ts\r\n//             Pass in this param as:  InputMethod.Keyboard.toString() instead of passing in \"Keyboard\"\r\n// uiLocation: the surface where the user action was initiated from (example, ribbon, FileMenu, TellMe, etc).\r\n//             See enum in /packages/app-commanding-ui/src/UISurfaces/controls/UILocation.ts\r\n//             Pass in this param as:  UILocation.SingleLineRibbon.toString() instead of passing in \"SingleLineRibbon\"\r\n// durationMsec: the time taken by the action (if relevant to the action)\r\n// dataFieldArr: These are custom fields that you may want to add for your user action.\r\n//               Example: InsertTable action may log custom data fields such as rowSize and colSize of the table inserted.\r\n//                      Or in Excel, a cell related action may log the x and y coordinates of the cell.\r\n// Note that things such as sessionID, data center, etc will be added to all user action logs.\r\n\r\nfunction logUserAction(userActionName, success, parentNameStr, inputMethod, uiLocation, durationMsec, dataFieldArr) {\r\n  if (success === void 0) {\r\n    success = true;\r\n  }\r\n\r\n  if (parentNameStr === void 0) {\r\n    parentNameStr = unknownStr;\r\n  }\r\n\r\n  if (inputMethod === void 0) {\r\n    inputMethod = unknownStr;\r\n  }\r\n\r\n  if (uiLocation === void 0) {\r\n    uiLocation = unknownStr;\r\n  }\r\n\r\n  if (durationMsec === void 0) {\r\n    durationMsec = 0;\r\n  }\r\n\r\n  if (dataFieldArr === void 0) {\r\n    dataFieldArr = [];\r\n  } // passing null for 'name' field, which is the event table name. We will determine that in sendUserAction in full\\api.ts as there we know what app we are, and hence what the event table name is\r\n\r\n\r\n  sendUserActionEvent({\r\n    name: null,\r\n    actionName: userActionName,\r\n    commandSurface: uiLocation,\r\n    parentName: parentNameStr,\r\n    triggerMethod: inputMethod,\r\n    durationMs: durationMsec,\r\n    succeeded: success,\r\n    dataFields: dataFieldArr\r\n  });\r\n} //////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Call logActivity for logging an activity to Otel.\r\n// This will be logged under Office {App} Online Data tenant\r\n// For example, if your activity name is \"ABC\",\r\n// it will go to a table called \"Office_Word_Online_Data_Activity_ABC\" for Word or \"Office_OneNote_Online_Data_Activity_ABC\" for OneNote.\r\n// activityName: name of activity being logged\r\n// success: Status of the activity (success is true, failure is false).\r\n// durationMsec: the time taken by the action (if relevant to the action)\r\n// dataFieldArr: These are custom fields that you may want to add for your activity, and will be added as columns to the activity table.\r\n//               Example: dataFields has typingSpeedPerSec (integer) and dayOfWeek (string) in it, the activity table for this particular activity will contain these two custom fields.\r\n// Note that things such as sessionID, data center, etc will be added to all user action logs.\r\n\r\n\r\nfunction logActivity(activityName, success, durationMsec, dataFieldArr) {\r\n  if (success === void 0) {\r\n    success = true;\r\n  }\r\n\r\n  if (durationMsec === void 0) {\r\n    durationMsec = 0;\r\n  }\r\n\r\n  if (dataFieldArr === void 0) {\r\n    dataFieldArr = [];\r\n  }\r\n\r\n  sendActivityEvent({\r\n    name: activityName,\r\n    succeeded: success,\r\n    durationMs: durationMsec,\r\n    dataFields: dataFieldArr\r\n  });\r\n} // Call LogNonUserAction for logging a non user action to Otel.\r\n// This is\r\n// activityName: Name of the action (non user)\r\n//     Note that the userActionName will be what your table will be named in Aria Kusto. So if 'ABC' is passed in for non user action, the table in Kusto will be called Office_OneNote_Online_NonUser_ABC\r\n//     Look at Kusto connection https://kusto.aria.microsoft.com and databases Office Word Online or Office OneNote Online, etc. and look at *NonUser* tables.\r\n// succeeded: Status of the user action (success is true, failure is false).\r\n// parentName: parent surface of the user action (example, tabView, tabHelp, Layout, etc).\r\n// inputMethod: how the user action was performed (for example, via keyboard, or mouse, touch, etc.)\r\n// uiLocation: the surface where the user action was initiated from (example, ribbon, FileMenu, TellMe, etc)\r\n// startTime: start time of the activity\r\n// endTime: end time of the activity\r\n// dataFields: These are custom fields that you may want to add for your user action.\r\n//             Example: InsertTable action may log custom data fields such as rowSize and colSize of the table inserted.\r\n//                      Or in Excel, a cell related action may log the x and y coordinates of the cell.\r\n//             Note that things such as sessionID, data center, etc will be added to all user action logs.\r\n\r\n/*\r\nBeing commented out as we dont think we should expose this API. But code is here in case someone educates us on why this should be exposed (it is being used historically in scriptsharp in OtelActionListener.cs (WsaListener.cs))\r\n\r\nexport const nonUserActionPrefix = 'non_user_action_'; // used in full\\api.ts sendActivityEvent to determine if an activity is non user action or a regular activity\r\n\r\nIf this code is reinstated, then we need to add the following in full\\api.ts:\r\n\r\nimport { nonUserActionPrefix } from '../core';\r\nnonUserActionEventName = 'Office.Online.NonUserAction';\r\nnonUserActionEventName = `Office.${settings.alwaysOnMetadata.name}.Online.NonUser.`;\r\n\r\nfunction ContainsNonUserActionPrefix(eventName: string): boolean {\r\n  return eventName.indexOf(nonUserActionPrefix) == 0;\r\n}\r\n\r\nAnd these lines in sendActivity function in full\\api.ts\r\n\r\n  if (event.name != null) {\r\n    if (ContainsNonUserActionPrefix(event.name)) {\r\n      event.name = nonUserActionEventName + event.name.substring(nonUserActionPrefix.length);\r\n    }\r\n  }\r\n\r\nexport function LogNonUserAction(\r\n  activityName: string,\r\n  succeeded: boolean = true,\r\n  parentName: string = unknownStr,\r\n  inputMethod: InputMethod = InputMethod.Unknown,\r\n  uiLocation: UILocation | null = null,\r\n  startTime: number = 0,\r\n  endTime: number = 0,\r\n  dataFields: DataField[] = []\r\n) {\r\n  let durationMs: number = Math.max(endTime - startTime, 0);\r\n\r\n  dataFields!.push({ name: 'ParentName', string: parentName != null ? parentName : unknownStr });\r\n  dataFields!.push({ name: 'TriggerMethod', string: inputMethod != null ? inputMethod.toString() : unknownStr });\r\n  dataFields!.push({ name: 'CommandSurface', string: uiLocation != null ? uiLocation.toString() : unknownStr });\r\n  dataFields!.push({ name: 'ActionName', string: activityName });\r\n  dataFields!.push({ name: 'StartTime', double: startTime });\r\n  dataFields!.push({ name: 'EndTime', double: endTime });\r\n  dataFields!.push({ name: 'Succeeded', bool: succeeded });\r\n\r\n  // add a sentinel prefix to activity name such that we know we need to add the non user activity event table name (instead of a regular activity event table name) in  sendActivityEvent in full\\api.ts as there we know what app we are, and hence what the event table name is\r\n  let activityNameWithPrefix = nonUserActionPrefix;\r\n  if (activityName != null) {\r\n    activityNameWithPrefix = activityNameWithPrefix.concat(activityName);\r\n  }\r\n\r\n  sendActivityEvent({\r\n    name: activityNameWithPrefix,\r\n    dataFields: dataFields,\r\n    durationMs: durationMs,\r\n    succeeded: succeeded\r\n  });\r\n}\r\n*/\r\n\r\n\r\nfunction sendTelemetryEvent(event) {\r\n  raiseEvent({\r\n    kind: 'event',\r\n    event: event,\r\n    timestamp: new Date().getTime()\r\n  });\r\n}\r\n\r\nfunction sendActivityEvent(event) {\r\n  raiseEvent({\r\n    kind: 'activity',\r\n    event: event,\r\n    timestamp: new Date().getTime()\r\n  });\r\n}\r\n\r\nfunction sendOtelEvent(event) {\r\n  raiseEvent({\r\n    kind: 'otel',\r\n    event: event\r\n  });\r\n}\r\n\r\nfunction sendUserActionEvent(event) {\r\n  raiseEvent({\r\n    kind: 'action',\r\n    event: event,\r\n    timestamp: new Date().getTime()\r\n  });\r\n}\r\n\r\nfunction addNamespaceMapping(namespace, ariaTenantToken) {\r\n  raiseEvent({\r\n    kind: 'addNamespaceMapping',\r\n    namespace: namespace,\r\n    ariaTenantToken: ariaTenantToken\r\n  });\r\n} // Initialization / Shutdown\r\n// ========================================================================================================================\r\n\r\n\r\nfunction setEnabledState(enabled) {\r\n  telemetryEnabled = enabled; // If the caller disables the queue, be sure to drop all of the outstanding events.\r\n  // This can happen in cases where the slice with event processor functionality failed to load.\r\n\r\n  if (!telemetryEnabled) {\r\n    events = [];\r\n  }\r\n}\r\n\r\nfunction shutdown() {\r\n  raiseEvent({\r\n    kind: 'shutdown'\r\n  });\r\n  return events.length + numberOfDroppedEvents;\r\n}\r\n\r\nfunction registerEventHandler(handler) {\r\n  eventHandler = handler; // Then go through the queue and process the events in the order in which they were received\r\n  // VSO.2533164: Push batch event processing to otelFull and add a lightweight queue\r\n\r\n  events.forEach(function (event) {\r\n    return raiseEvent(event);\r\n  });\r\n  events = [];\r\n}\r\n\r\nfunction raiseEvent(event) {\r\n  if (!telemetryEnabled) {\r\n    return;\r\n  }\r\n\r\n  if (eventHandler) {\r\n    eventHandler(event);\r\n  } else {\r\n    if (events.length <= maxQueueSize) {\r\n      events.push(event);\r\n    } else {\r\n      numberOfDroppedEvents += 1;\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://Implicit/./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js?");

/***/ }),

/***/ "./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js":
/*!****************************************************************!*\
  !*** ./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*! msal v1.2.1 2020-01-15 */\r\n\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__webpack_require__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__webpack_require__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__webpack_require__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 23);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar extendStatics = function (d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b)\r\n            if (b.hasOwnProperty(p))\r\n                d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\nexports.__extends = __extends;\r\nexports.__assign = function () {\r\n    exports.__assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s)\r\n                if (Object.prototype.hasOwnProperty.call(s, p))\r\n                    t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return exports.__assign.apply(this, arguments);\r\n};\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s)\r\n        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\nexports.__rest = __rest;\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\r\n        r = Reflect.decorate(decorators, target, key, desc);\r\n    else\r\n        for (var i = decorators.length - 1; i >= 0; i--)\r\n            if (d = decorators[i])\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\nexports.__decorate = __decorate;\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); };\r\n}\r\nexports.__param = __param;\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\r\n        return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\nexports.__metadata = __metadata;\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try {\r\n            step(generator.next(value));\r\n        }\r\n        catch (e) {\r\n            reject(e);\r\n        } }\r\n        function rejected(value) { try {\r\n            step(generator[\"throw\"](value));\r\n        }\r\n        catch (e) {\r\n            reject(e);\r\n        } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\nexports.__awaiter = __awaiter;\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function () { if (t[0] & 1)\r\n            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f)\r\n            throw new TypeError(\"Generator is already executing.\");\r\n        while (_)\r\n            try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\r\n                    return t;\r\n                if (y = 0, t)\r\n                    op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0:\r\n                    case 1:\r\n                        t = op;\r\n                        break;\r\n                    case 4:\r\n                        _.label++;\r\n                        return { value: op[1], done: false };\r\n                    case 5:\r\n                        _.label++;\r\n                        y = op[1];\r\n                        op = [0];\r\n                        continue;\r\n                    case 7:\r\n                        op = _.ops.pop();\r\n                        _.trys.pop();\r\n                        continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\r\n                            _ = 0;\r\n                            continue;\r\n                        }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\r\n                            _.label = op[1];\r\n                            break;\r\n                        }\r\n                        if (op[0] === 6 && _.label < t[1]) {\r\n                            _.label = t[1];\r\n                            t = op;\r\n                            break;\r\n                        }\r\n                        if (t && _.label < t[2]) {\r\n                            _.label = t[2];\r\n                            _.ops.push(op);\r\n                            break;\r\n                        }\r\n                        if (t[2])\r\n                            _.ops.pop();\r\n                        _.trys.pop();\r\n                        continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            }\r\n            catch (e) {\r\n                op = [6, e];\r\n                y = 0;\r\n            }\r\n            finally {\r\n                f = t = 0;\r\n            }\r\n        if (op[0] & 5)\r\n            throw op[1];\r\n        return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\nexports.__generator = __generator;\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m)\r\n        if (!exports.hasOwnProperty(p))\r\n            exports[p] = m[p];\r\n}\r\nexports.__exportStar = __exportStar;\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m)\r\n        return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length)\r\n                o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\nexports.__values = __values;\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m)\r\n        return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\r\n            ar.push(r.value);\r\n    }\r\n    catch (error) {\r\n        e = { error: error };\r\n    }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"]))\r\n                m.call(i);\r\n        }\r\n        finally {\r\n            if (e)\r\n                throw e.error;\r\n        }\r\n    }\r\n    return ar;\r\n}\r\nexports.__read = __read;\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\nexports.__spread = __spread;\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++)\r\n        s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\nexports.__spreadArrays = __spreadArrays;\r\n;\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\nexports.__await = __await;\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator)\r\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n])\r\n        i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try {\r\n        step(g[n](v));\r\n    }\r\n    catch (e) {\r\n        settle(q[0][3], e);\r\n    } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length)\r\n        resume(q[0][0], q[0][1]); }\r\n}\r\nexports.__asyncGenerator = __asyncGenerator;\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\nexports.__asyncDelegator = __asyncDelegator;\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator)\r\n        throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\nexports.__asyncValues = __asyncValues;\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) {\r\n        Object.defineProperty(cooked, \"raw\", { value: raw });\r\n    }\r\n    else {\r\n        cooked.raw = raw;\r\n    }\r\n    return cooked;\r\n}\r\nexports.__makeTemplateObject = __makeTemplateObject;\r\n;\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule)\r\n        return mod;\r\n    var result = {};\r\n    if (mod != null)\r\n        for (var k in mod)\r\n            if (Object.hasOwnProperty.call(mod, k))\r\n                result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\nexports.__importStar = __importStar;\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\nexports.__importDefault = __importDefault;\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * Check if a string is empty\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    return StringUtils;\r\n}());\r\nexports.StringUtils = StringUtils;\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar CryptoUtils = /** @class */ (function () {\r\n    function CryptoUtils() {\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state?\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoUtils.createNewGuid = function () {\r\n        /*\r\n         * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n         * pseudo-random numbers.\r\n         * The algorithm is as follows:\r\n         *     Set the two most significant bits (bits 6 and 7) of the\r\n         *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n         *     Set the four most significant bits (bits 12 through 15) of the\r\n         *        time_hi_and_version field to the 4-bit version number from\r\n         *        Section 4.1.3. Version4\r\n         *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n         *     values.\r\n         * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n         * time-low               = 4hexOctet\r\n         * time-mid               = 2hexOctet\r\n         * time-high-and-version  = 2hexOctet\r\n         * clock-seq-and-reserved = hexOctet:\r\n         * clock-seq-low          = hexOctet\r\n         * node                   = 6hexOctet\r\n         * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n         * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n         * y values are 8, 9, A, B\r\n         */\r\n        var cryptoObj = window.crypto; // for IE 11\r\n        if (cryptoObj && cryptoObj.getRandomValues) {\r\n            var buffer = new Uint8Array(16);\r\n            cryptoObj.getRandomValues(buffer);\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n            return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])\r\n                + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])\r\n                + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])\r\n                + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])\r\n                + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\r\n        }\r\n        else {\r\n            var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            var hex = \"0123456789abcdef\";\r\n            var r = 0;\r\n            var guidResponse = \"\";\r\n            for (var i = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                }\r\n                else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                }\r\n                else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    };\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    CryptoUtils.isGuid = function (guid) {\r\n        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    };\r\n    /**\r\n     * Decimal to Hex\r\n     *\r\n     * @param num\r\n     */\r\n    CryptoUtils.decimalToHex = function (num) {\r\n        var hex = num.toString(16);\r\n        while (hex.length < 2) {\r\n            hex = \"0\" + hex;\r\n        }\r\n        return hex;\r\n    };\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\r\n    /**\r\n     * encoding string to base64 - platform specific check\r\n     *\r\n     * @param input\r\n     */\r\n    CryptoUtils.base64Encode = function (input) {\r\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\r\n            return String.fromCharCode(Number(\"0x\" + p1));\r\n        }));\r\n    };\r\n    /**\r\n     * Decodes a base64 encoded string.\r\n     *\r\n     * @param input\r\n     */\r\n    CryptoUtils.base64Decode = function (input) {\r\n        var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n        return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(\"\"));\r\n    };\r\n    /**\r\n     * deserialize a string\r\n     *\r\n     * @param query\r\n     */\r\n    CryptoUtils.deserialize = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    return CryptoUtils;\r\n}());\r\nexports.CryptoUtils = CryptoUtils;\r\n\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n * Constants\r\n */\r\nvar Constants = /** @class */ (function () {\r\n    function Constants() {\r\n    }\r\n    Object.defineProperty(Constants, \"claims\", {\r\n        get: function () { return \"claims\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"clientId\", {\r\n        get: function () { return \"clientId\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"adalIdToken\", {\r\n        get: function () { return \"adal.idtoken\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"cachePrefix\", {\r\n        get: function () { return \"msal\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"scopes\", {\r\n        get: function () { return \"scopes\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"no_account\", {\r\n        get: function () { return \"NO_ACCOUNT\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"consumersUtid\", {\r\n        get: function () { return \"9188040d-6c67-4c5b-b112-36a304b66dad\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"upn\", {\r\n        get: function () { return \"upn\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"prompt_select_account\", {\r\n        get: function () { return \"&prompt=select_account\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"prompt_none\", {\r\n        get: function () { return \"&prompt=none\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"prompt\", {\r\n        get: function () { return \"prompt\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"response_mode_fragment\", {\r\n        get: function () { return \"&response_mode=fragment\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"resourceDelimiter\", {\r\n        get: function () { return \"|\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"cacheDelimiter\", {\r\n        get: function () { return \".\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"popUpWidth\", {\r\n        get: function () { return this._popUpWidth; },\r\n        set: function (width) {\r\n            this._popUpWidth = width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"popUpHeight\", {\r\n        get: function () { return this._popUpHeight; },\r\n        set: function (height) {\r\n            this._popUpHeight = height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"login\", {\r\n        get: function () { return \"LOGIN\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"renewToken\", {\r\n        get: function () { return \"RENEW_TOKEN\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"unknown\", {\r\n        get: function () { return \"UNKNOWN\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"homeAccountIdentifier\", {\r\n        get: function () { return \"homeAccountIdentifier\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"common\", {\r\n        get: function () { return \"common\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"openidScope\", {\r\n        get: function () { return \"openid\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"profileScope\", {\r\n        get: function () { return \"profile\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"interactionTypeRedirect\", {\r\n        get: function () { return \"redirectInteraction\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"interactionTypePopup\", {\r\n        get: function () { return \"popupInteraction\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, \"inProgress\", {\r\n        get: function () { return \"inProgress\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Constants._popUpWidth = 483;\r\n    Constants._popUpHeight = 600;\r\n    return Constants;\r\n}());\r\nexports.Constants = Constants;\r\n/**\r\n * Keys in the hashParams\r\n */\r\nvar ServerHashParamKeys;\r\n(function (ServerHashParamKeys) {\r\n    ServerHashParamKeys[\"SCOPE\"] = \"scope\";\r\n    ServerHashParamKeys[\"ERROR\"] = \"error\";\r\n    ServerHashParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\r\n    ServerHashParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    ServerHashParamKeys[\"ID_TOKEN\"] = \"id_token\";\r\n    ServerHashParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\r\n    ServerHashParamKeys[\"SESSION_STATE\"] = \"session_state\";\r\n    ServerHashParamKeys[\"CLIENT_INFO\"] = \"client_info\";\r\n})(ServerHashParamKeys = exports.ServerHashParamKeys || (exports.ServerHashParamKeys = {}));\r\n;\r\n/**\r\n * @hidden\r\n * CacheKeys for MSAL\r\n */\r\nvar TemporaryCacheKeys;\r\n(function (TemporaryCacheKeys) {\r\n    TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\r\n    TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireTokenAccount\";\r\n    TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\r\n    TemporaryCacheKeys[\"STATE_LOGIN\"] = \"state.login\";\r\n    TemporaryCacheKeys[\"STATE_ACQ_TOKEN\"] = \"state.acquireToken\";\r\n    TemporaryCacheKeys[\"STATE_RENEW\"] = \"state.renew\";\r\n    TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.idtoken\";\r\n    TemporaryCacheKeys[\"LOGIN_REQUEST\"] = \"login.request\";\r\n    TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\r\n    TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\r\n    TemporaryCacheKeys[\"ANGULAR_LOGIN_REQUEST\"] = \"angular.login.request\";\r\n    TemporaryCacheKeys[\"INTERACTION_STATUS\"] = \"interaction_status\";\r\n    TemporaryCacheKeys[\"REDIRECT_REQUEST\"] = \"redirect_request\";\r\n})(TemporaryCacheKeys = exports.TemporaryCacheKeys || (exports.TemporaryCacheKeys = {}));\r\nvar PersistentCacheKeys;\r\n(function (PersistentCacheKeys) {\r\n    PersistentCacheKeys[\"IDTOKEN\"] = \"idtoken\";\r\n    PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\r\n})(PersistentCacheKeys = exports.PersistentCacheKeys || (exports.PersistentCacheKeys = {}));\r\nvar ErrorCacheKeys;\r\n(function (ErrorCacheKeys) {\r\n    ErrorCacheKeys[\"LOGIN_ERROR\"] = \"login.error\";\r\n    ErrorCacheKeys[\"ERROR\"] = \"error\";\r\n    ErrorCacheKeys[\"ERROR_DESC\"] = \"error.description\";\r\n})(ErrorCacheKeys = exports.ErrorCacheKeys || (exports.ErrorCacheKeys = {}));\r\nexports.AADTrustedHostList = {\r\n    \"login.windows.net\": \"login.windows.net\",\r\n    \"login.chinacloudapi.cn\": \"login.chinacloudapi.cn\",\r\n    \"login.cloudgovapi.us\": \"login.cloudgovapi.us\",\r\n    \"login.microsoftonline.com\": \"login.microsoftonline.com\",\r\n    \"login.microsoftonline.de\": \"login.microsoftonline.de\",\r\n    \"login.microsoftonline.us\": \"login.microsoftonline.us\"\r\n};\r\n/**\r\n * @hidden\r\n * SSO Types - generated to populate hints\r\n */\r\nvar SSOTypes;\r\n(function (SSOTypes) {\r\n    SSOTypes[\"ACCOUNT\"] = \"account\";\r\n    SSOTypes[\"SID\"] = \"sid\";\r\n    SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\r\n    SSOTypes[\"ID_TOKEN\"] = \"id_token\";\r\n    SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\r\n    SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\r\n    SSOTypes[\"CONSUMERS\"] = \"consumers\";\r\n    SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\r\n    SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\r\n    SSOTypes[\"LOGIN_REQ\"] = \"login_req\";\r\n    SSOTypes[\"DOMAIN_REQ\"] = \"domain_req\";\r\n})(SSOTypes = exports.SSOTypes || (exports.SSOTypes = {}));\r\n;\r\n/**\r\n * @hidden\r\n */\r\nexports.BlacklistedEQParams = [\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n * @hidden\r\n */\r\nexports.PromptState = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n};\r\n/**\r\n * MSAL JS Library Version\r\n */\r\nfunction libraryVersion() {\r\n    return \"1.2.1\";\r\n}\r\nexports.libraryVersion = libraryVersion;\r\n\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nexports.ClientConfigurationErrorMessage = {\r\n    configurationNotSet: {\r\n        code: \"no_config_set\",\r\n        desc: \"Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object.\"\r\n    },\r\n    storageNotSupported: {\r\n        code: \"storage_not_supported\",\r\n        desc: \"The value for the cacheLocation is not supported.\"\r\n    },\r\n    noRedirectCallbacksSet: {\r\n        code: \"no_redirect_callbacks\",\r\n        desc: \"No redirect callbacks have been set. Please call handleRedirectCallback() with the appropriate function arguments before continuing. \" +\r\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    invalidCallbackObject: {\r\n        code: \"invalid_callback_object\",\r\n        desc: \"The object passed for the callback was invalid. \" +\r\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    scopesRequired: {\r\n        code: \"scopes_required\",\r\n        desc: \"Scopes are required to obtain an access token.\"\r\n    },\r\n    emptyScopes: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as empty array.\"\r\n    },\r\n    nonArrayScopes: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientScope: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent' and 'none'\",\r\n    },\r\n    invalidAuthorityType: {\r\n        code: \"invalid_authority_type\",\r\n        desc: \"The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.\"\r\n    },\r\n    authorityUriInvalidPath: {\r\n        code: \"authority_uri_invalid_path\",\r\n        desc: \"Given authority URI is invalid.\"\r\n    },\r\n    unsupportedAuthorityValidation: {\r\n        code: \"unsupported_authority_validation\",\r\n        desc: \"The authority validation is not supported for this authority type.\"\r\n    },\r\n    b2cAuthorityUriInvalidPath: {\r\n        code: \"b2c_authority_uri_invalid_path\",\r\n        desc: \"The given URI for the B2C authority is invalid.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    emptyRequestError: {\r\n        code: \"empty_request_error\",\r\n        desc: \"Request object is required.\"\r\n    },\r\n    invalidCorrelationIdError: {\r\n        code: \"invalid_guid_sent_as_correlationId\",\r\n        desc: \"Please set the correlationId as a valid guid\"\r\n    },\r\n    telemetryConfigError: {\r\n        code: \"telemetry_config_error\",\r\n        desc: \"Telemetry config is not configured with required values\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the .js library.\r\n */\r\nvar ClientConfigurationError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    ClientConfigurationError.createNoSetConfigurationError = function () {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.configurationNotSet.code, \"\" + exports.ClientConfigurationErrorMessage.configurationNotSet.desc);\r\n    };\r\n    ClientConfigurationError.createStorageNotSupportedError = function (givenCacheLocation) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.storageNotSupported.code, exports.ClientConfigurationErrorMessage.storageNotSupported.desc + \" Given location: \" + givenCacheLocation);\r\n    };\r\n    ClientConfigurationError.createRedirectCallbacksNotSetError = function () {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.noRedirectCallbacksSet.code, exports.ClientConfigurationErrorMessage.noRedirectCallbacksSet.desc);\r\n    };\r\n    ClientConfigurationError.createInvalidCallbackObjectError = function (callbackObject) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.invalidCallbackObject.code, exports.ClientConfigurationErrorMessage.invalidCallbackObject.desc + \" Given value for callback function: \" + callbackObject);\r\n    };\r\n    ClientConfigurationError.createEmptyScopesArrayError = function (scopesValue) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.emptyScopes.code, exports.ClientConfigurationErrorMessage.emptyScopes.desc + \" Given value: \" + scopesValue + \".\");\r\n    };\r\n    ClientConfigurationError.createScopesNonArrayError = function (scopesValue) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.nonArrayScopes.code, exports.ClientConfigurationErrorMessage.nonArrayScopes.desc + \" Given value: \" + scopesValue + \".\");\r\n    };\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (scopesValue) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.clientScope.code, exports.ClientConfigurationErrorMessage.clientScope.desc + \" Given value: \" + scopesValue + \".\");\r\n    };\r\n    ClientConfigurationError.createScopesRequiredError = function (scopesValue) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.scopesRequired.code, exports.ClientConfigurationErrorMessage.scopesRequired.desc + \" Given value: \" + scopesValue);\r\n    };\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.invalidPrompt.code, exports.ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\r\n    };\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.claimsRequestParsingError.code, exports.ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\r\n    };\r\n    ClientConfigurationError.createEmptyRequestError = function () {\r\n        var _a = exports.ClientConfigurationErrorMessage.emptyRequestError, code = _a.code, desc = _a.desc;\r\n        return new ClientConfigurationError(code, desc);\r\n    };\r\n    ClientConfigurationError.createInvalidCorrelationIdError = function () {\r\n        return new ClientConfigurationError(exports.ClientConfigurationErrorMessage.invalidCorrelationIdError.code, exports.ClientConfigurationErrorMessage.invalidCorrelationIdError.desc);\r\n    };\r\n    ClientConfigurationError.createTelemetryConfigError = function (config) {\r\n        var _a = exports.ClientConfigurationErrorMessage.telemetryConfigError, code = _a.code, desc = _a.desc;\r\n        var requiredKeys = {\r\n            applicationName: \"string\",\r\n            applicationVersion: \"string\",\r\n            telemetryEmitter: \"function\"\r\n        };\r\n        var missingKeys = Object.keys(requiredKeys)\r\n            .reduce(function (keys, key) {\r\n            return config[key] ? keys : keys.concat([key + \" (\" + requiredKeys[key] + \")\"]);\r\n        }, []);\r\n        return new ClientConfigurationError(code, desc + \" mising values: \" + missingKeys.join(\",\"));\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError_1.ClientAuthError));\r\nexports.ClientConfigurationError = ClientConfigurationError;\r\n\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Constants_1 = __webpack_require__(3);\r\nvar ScopeSet_1 = __webpack_require__(10);\r\nvar StringUtils_1 = __webpack_require__(1);\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\n/**\r\n * @hidden\r\n */\r\nvar UrlUtils = /** @class */ (function () {\r\n    function UrlUtils() {\r\n    }\r\n    /**\r\n     * generates the URL with QueryString Parameters\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigateUrl = function (serverRequestParams) {\r\n        var str = this.createNavigationUrlString(serverRequestParams);\r\n        var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint;\r\n        // if the endpoint already has queryparams, lets add to it, otherwise add the first one\r\n        if (authEndpoint.indexOf(\"?\") < 0) {\r\n            authEndpoint += \"?\";\r\n        }\r\n        else {\r\n            authEndpoint += \"&\";\r\n        }\r\n        var requestUrl = \"\" + authEndpoint + str.join(\"&\");\r\n        return requestUrl;\r\n    };\r\n    /**\r\n     * Generate the array of all QueryStringParams to be sent to the server\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigationUrlString = function (serverRequestParams) {\r\n        var scopes = serverRequestParams.scopes;\r\n        if (scopes.indexOf(serverRequestParams.clientId) === -1) {\r\n            scopes.push(serverRequestParams.clientId);\r\n        }\r\n        var str = [];\r\n        str.push(\"response_type=\" + serverRequestParams.responseType);\r\n        this.translateclientIdUsedInScope(scopes, serverRequestParams.clientId);\r\n        str.push(\"scope=\" + encodeURIComponent(ScopeSet_1.ScopeSet.parseScope(scopes)));\r\n        str.push(\"client_id=\" + encodeURIComponent(serverRequestParams.clientId));\r\n        str.push(\"redirect_uri=\" + encodeURIComponent(serverRequestParams.redirectUri));\r\n        str.push(\"state=\" + encodeURIComponent(serverRequestParams.state));\r\n        str.push(\"nonce=\" + encodeURIComponent(serverRequestParams.nonce));\r\n        str.push(\"client_info=1\");\r\n        str.push(\"x-client-SKU=\" + serverRequestParams.xClientSku);\r\n        str.push(\"x-client-Ver=\" + serverRequestParams.xClientVer);\r\n        if (serverRequestParams.promptValue) {\r\n            str.push(\"prompt=\" + encodeURIComponent(serverRequestParams.promptValue));\r\n        }\r\n        if (serverRequestParams.claimsValue) {\r\n            str.push(\"claims=\" + encodeURIComponent(serverRequestParams.claimsValue));\r\n        }\r\n        if (serverRequestParams.queryParameters) {\r\n            str.push(serverRequestParams.queryParameters);\r\n        }\r\n        if (serverRequestParams.extraQueryParameters) {\r\n            str.push(serverRequestParams.extraQueryParameters);\r\n        }\r\n        str.push(\"client-request-id=\" + encodeURIComponent(serverRequestParams.correlationId));\r\n        return str;\r\n    };\r\n    /**\r\n     * append the required scopes: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes\r\n     * @param scopes\r\n     */\r\n    UrlUtils.translateclientIdUsedInScope = function (scopes, clientId) {\r\n        var clientIdIndex = scopes.indexOf(clientId);\r\n        if (clientIdIndex >= 0) {\r\n            scopes.splice(clientIdIndex, 1);\r\n            if (scopes.indexOf(\"openid\") === -1) {\r\n                scopes.push(\"openid\");\r\n            }\r\n            if (scopes.indexOf(\"profile\") === -1) {\r\n                scopes.push(\"profile\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    UrlUtils.getDefaultRedirectUri = function () {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlUtils.replaceTenantPath = function (url, tenantId) {\r\n        url = url.toLowerCase();\r\n        var urlObject = this.GetUrlComponents(url);\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === Constants_1.Constants.common || pathArray[0] === Constants_1.SSOTypes.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return this.constructAuthorityUriFromObject(urlObject, pathArray);\r\n    };\r\n    UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {\r\n        return this.CanonicalizeUri(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + pathArray.join(\"/\"));\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlUtils.GetUrlComponents = function (url) {\r\n        if (!url) {\r\n            throw \"Url required\";\r\n        }\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        var match = url.match(regEx);\r\n        if (!match || match.length < 6) {\r\n            throw \"Valid url required\";\r\n        }\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        return urlComponents;\r\n    };\r\n    /**\r\n     * Given a url or path, append a trailing slash if one doesnt exist\r\n     *\r\n     * @param url\r\n     */\r\n    UrlUtils.CanonicalizeUri = function (url) {\r\n        if (url) {\r\n            url = url.toLowerCase();\r\n        }\r\n        if (url && !UrlUtils.endsWith(url, \"/\")) {\r\n            url += \"/\";\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Checks to see if the url ends with the suffix\r\n     * Required because we are compiling for es5 instead of es6\r\n     * @param url\r\n     * @param str\r\n     */\r\n    // TODO: Rename this, not clear what it is supposed to do\r\n    UrlUtils.endsWith = function (url, suffix) {\r\n        if (!url || !suffix) {\r\n            return false;\r\n        }\r\n        return url.indexOf(suffix, url.length - suffix.length) !== -1;\r\n    };\r\n    /**\r\n     * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlUtils.urlRemoveQueryStringParameter = function (url, name) {\r\n        if (StringUtils_1.StringUtils.isEmpty(url)) {\r\n            return url;\r\n        }\r\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        url = url.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        url = url.replace(regex, \"\");\r\n        return url;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlUtils.getHashFromUrl = function (urlStringOrFragment) {\r\n        var hashIndex1 = urlStringOrFragment.indexOf(\"#\");\r\n        var hashIndex2 = urlStringOrFragment.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex1 + 1);\r\n        }\r\n        return urlStringOrFragment;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Check if the url contains a hash with known properties\r\n     * @ignore\r\n     */\r\n    UrlUtils.urlContainsHash = function (urlString) {\r\n        var parameters = UrlUtils.deserializeHash(urlString);\r\n        return (parameters.hasOwnProperty(Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION) ||\r\n            parameters.hasOwnProperty(Constants_1.ServerHashParamKeys.ERROR) ||\r\n            parameters.hasOwnProperty(Constants_1.ServerHashParamKeys.ACCESS_TOKEN) ||\r\n            parameters.hasOwnProperty(Constants_1.ServerHashParamKeys.ID_TOKEN));\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Returns deserialized portion of URL hash\r\n     * @ignore\r\n     */\r\n    UrlUtils.deserializeHash = function (urlFragment) {\r\n        var hash = UrlUtils.getHashFromUrl(urlFragment);\r\n        return CryptoUtils_1.CryptoUtils.deserialize(hash);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @param {string} URI\r\n     * @returns {string} host from the URI\r\n     *\r\n     * extract URI from the host\r\n     */\r\n    UrlUtils.getHostFromUri = function (uri) {\r\n        // remove http:// or https:// from uri\r\n        var extractedUri = String(uri).replace(/^(https?:)\\/\\//, \"\");\r\n        extractedUri = extractedUri.split(\"/\")[0];\r\n        return extractedUri;\r\n    };\r\n    return UrlUtils;\r\n}());\r\nexports.UrlUtils = UrlUtils;\r\n\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar AuthError_1 = __webpack_require__(7);\r\nvar StringUtils_1 = __webpack_require__(1);\r\nexports.ClientAuthErrorMessage = {\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements like authority.\"\r\n    },\r\n    multipleCacheAuthorities: {\r\n        code: \"multiple_authorities\",\r\n        desc: \"Multiple authorities found in the cache. Pass authority in the API overload.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    popUpWindowError: {\r\n        code: \"popup_window_error\",\r\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\r\n    },\r\n    tokenRenewalError: {\r\n        code: \"token_renewal_error\",\r\n        desc: \"Token renewal operation failed due to timeout.\"\r\n    },\r\n    invalidIdToken: {\r\n        code: \"invalid_id_token\",\r\n        desc: \"Invalid ID token format.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state_error\",\r\n        desc: \"Invalid state.\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch_error\",\r\n        desc: \"Nonce is not matching, Nonce received: \"\r\n    },\r\n    loginProgressError: {\r\n        code: \"login_progress_error\",\r\n        desc: \"Login_In_Progress: Error during login call - login is already in progress.\"\r\n    },\r\n    acquireTokenProgressError: {\r\n        code: \"acquiretoken_progress_error\",\r\n        desc: \"AcquireToken_In_Progress: Error during login call - login is already in progress.\"\r\n    },\r\n    userCancelledError: {\r\n        code: \"user_cancelled\",\r\n        desc: \"User cancelled the flow.\"\r\n    },\r\n    callbackError: {\r\n        code: \"callback_error\",\r\n        desc: \"Error occurred in token received callback function.\"\r\n    },\r\n    userLoginRequiredError: {\r\n        code: \"user_login_error\",\r\n        desc: \"User login is required.\"\r\n    },\r\n    userDoesNotExistError: {\r\n        code: \"user_non_existent\",\r\n        desc: \"User object does not exist. Please call a login API.\"\r\n    },\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoNotPopulatedError: {\r\n        code: \"client_info_not_populated_error\",\r\n        desc: \"The service did not populate client_info in the response, Please verify with the service team\"\r\n    },\r\n    nullOrEmptyIdToken: {\r\n        code: \"null_or_empty_id_token\",\r\n        desc: \"The idToken is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    idTokenNotParsed: {\r\n        code: \"id_token_parsing_error\",\r\n        desc: \"ID token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    tokenEncodingError: {\r\n        code: \"token_encoding_error\",\r\n        desc: \"The token to be decoded is not encoded correctly.\"\r\n    },\r\n    invalidInteractionType: {\r\n        code: \"invalid_interaction_type\",\r\n        desc: \"The interaction type passed to the handler was incorrect or unknown\"\r\n    },\r\n    cacheParseError: {\r\n        code: \"cannot_parse_cache\",\r\n        desc: \"The cached token key is not a valid JSON and cannot be parsed\"\r\n    },\r\n    blockTokenRequestsInHiddenIframe: {\r\n        code: \"block_token_requests\",\r\n        desc: \"Token calls are blocked in hidden iframes\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    ClientAuthError.createEndpointResolutionError = function (errDetail) {\r\n        var errorMessage = exports.ClientAuthErrorMessage.endpointResolutionError.desc;\r\n        if (errDetail && !StringUtils_1.StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += \" Details: \" + errDetail;\r\n        }\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.endpointResolutionError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function (scope) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.multipleMatchingTokens.code, \"Cache error for scope \" + scope + \": \" + exports.ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    ClientAuthError.createMultipleAuthoritiesInCacheError = function (scope) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.multipleCacheAuthorities.code, \"Cache error for scope \" + scope + \": \" + exports.ClientAuthErrorMessage.multipleCacheAuthorities.desc + \".\");\r\n    };\r\n    ClientAuthError.createPopupWindowError = function (errDetail) {\r\n        var errorMessage = exports.ClientAuthErrorMessage.popUpWindowError.desc;\r\n        if (errDetail && !StringUtils_1.StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += \" Details: \" + errDetail;\r\n        }\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.popUpWindowError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createTokenRenewalTimeoutError = function (urlNavigate) {\r\n        var errorMessage = \"URL navigated to is \" + urlNavigate + \", \" + exports.ClientAuthErrorMessage.tokenRenewalError.desc;\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.tokenRenewalError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createInvalidIdTokenError = function (idToken) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.invalidIdToken.code, exports.ClientAuthErrorMessage.invalidIdToken.desc + \" Given token: \" + idToken);\r\n    };\r\n    // TODO: Is this not a security flaw to send the user the state expected??\r\n    ClientAuthError.createInvalidStateError = function (invalidState, actualState) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.invalidStateError.code, exports.ClientAuthErrorMessage.invalidStateError.desc + \" \" + invalidState + \", state expected : \" + actualState + \".\");\r\n    };\r\n    // TODO: Is this not a security flaw to send the user the Nonce expected??\r\n    ClientAuthError.createNonceMismatchError = function (invalidNonce, actualNonce) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.nonceMismatchError.code, exports.ClientAuthErrorMessage.nonceMismatchError.desc + \" \" + invalidNonce + \", nonce expected : \" + actualNonce + \".\");\r\n    };\r\n    ClientAuthError.createLoginInProgressError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.loginProgressError.code, exports.ClientAuthErrorMessage.loginProgressError.desc);\r\n    };\r\n    ClientAuthError.createAcquireTokenInProgressError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.acquireTokenProgressError.code, exports.ClientAuthErrorMessage.acquireTokenProgressError.desc);\r\n    };\r\n    ClientAuthError.createUserCancelledError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.userCancelledError.code, exports.ClientAuthErrorMessage.userCancelledError.desc);\r\n    };\r\n    ClientAuthError.createErrorInCallbackFunction = function (errorDesc) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.callbackError.code, exports.ClientAuthErrorMessage.callbackError.desc + \" \" + errorDesc + \".\");\r\n    };\r\n    ClientAuthError.createUserLoginRequiredError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.userLoginRequiredError.code, exports.ClientAuthErrorMessage.userLoginRequiredError.desc);\r\n    };\r\n    ClientAuthError.createUserDoesNotExistError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.userDoesNotExistError.code, exports.ClientAuthErrorMessage.userDoesNotExistError.desc);\r\n    };\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.clientInfoDecodingError.code, exports.ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    ClientAuthError.createClientInfoNotPopulatedError = function (caughtError) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.clientInfoNotPopulatedError.code, exports.ClientAuthErrorMessage.clientInfoNotPopulatedError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    ClientAuthError.createIdTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.nullOrEmptyIdToken.code, exports.ClientAuthErrorMessage.nullOrEmptyIdToken.desc + \" Raw ID Token Value: \" + invalidRawTokenString);\r\n    };\r\n    ClientAuthError.createIdTokenParsingError = function (caughtParsingError) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.idTokenNotParsed.code, exports.ClientAuthErrorMessage.idTokenNotParsed.desc + \" Failed with error: \" + caughtParsingError);\r\n    };\r\n    ClientAuthError.createTokenEncodingError = function (incorrectlyEncodedToken) {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.tokenEncodingError.code, exports.ClientAuthErrorMessage.tokenEncodingError.desc + \" Attempted to decode: \" + incorrectlyEncodedToken);\r\n    };\r\n    ClientAuthError.createInvalidInteractionTypeError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.invalidInteractionType.code, exports.ClientAuthErrorMessage.invalidInteractionType.desc);\r\n    };\r\n    ClientAuthError.createCacheParseError = function (key) {\r\n        var errorMessage = \"invalid key: \" + key + \", \" + exports.ClientAuthErrorMessage.cacheParseError.desc;\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.cacheParseError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createBlockTokenRequestsInHiddenIframeError = function () {\r\n        return new ClientAuthError(exports.ClientAuthErrorMessage.blockTokenRequestsInHiddenIframe.code, exports.ClientAuthErrorMessage.blockTokenRequestsInHiddenIframe.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError_1.AuthError));\r\nexports.ClientAuthError = ClientAuthError;\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nexports.AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: \"unexpected_error\",\r\n        desc: \"Unexpected error in authentication.\"\r\n    },\r\n    noWindowObjectError: {\r\n        code: \"no_window_object\",\r\n        desc: \"No window object available. Details:\"\r\n    }\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nvar AuthError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AuthError, _super);\r\n    function AuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorMessage) || this;\r\n        Object.setPrototypeOf(_this, AuthError.prototype);\r\n        _this.errorCode = errorCode;\r\n        _this.errorMessage = errorMessage;\r\n        _this.name = \"AuthError\";\r\n        return _this;\r\n    }\r\n    AuthError.createUnexpectedError = function (errDesc) {\r\n        return new AuthError(exports.AuthErrorMessage.unexpectedError.code, exports.AuthErrorMessage.unexpectedError.desc + \": \" + errDesc);\r\n    };\r\n    AuthError.createNoWindowObjectError = function (errDesc) {\r\n        return new AuthError(exports.AuthErrorMessage.noWindowObjectError.code, exports.AuthErrorMessage.noWindowObjectError.desc + \" \" + errDesc);\r\n    };\r\n    return AuthError;\r\n}(Error));\r\nexports.AuthError = AuthError;\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar XHRClient_1 = __webpack_require__(17);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\n/**\r\n * @hidden\r\n */\r\nvar AuthorityType;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n    AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\r\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\r\n/**\r\n * @hidden\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, validateAuthority) {\r\n        this.IsValidationEnabled = validateAuthority;\r\n        this.CanonicalAuthority = authority;\r\n        this.validateAsUri();\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"Tenant\", {\r\n        get: function () {\r\n            return this.CanonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Authority.prototype.validateResolved = function () {\r\n        if (!this.tenantDiscoveryResponse) {\r\n            throw \"Please call ResolveEndpointsAsync first\";\r\n        }\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthority;\r\n        },\r\n        set: function (url) {\r\n            this.canonicalAuthority = UrlUtils_1.UrlUtils.CanonicalizeUri(url);\r\n            this.canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\r\n        get: function () {\r\n            if (!this.canonicalAuthorityUrlComponents) {\r\n                this.canonicalAuthorityUrlComponents = UrlUtils_1.UrlUtils.GetUrlComponents(this.CanonicalAuthority);\r\n            }\r\n            return this.canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n         */\r\n        get: function () {\r\n            return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Given a string, validate that it is of the form https://domain/path\r\n     */\r\n    Authority.prototype.validateAsUri = function () {\r\n        var components;\r\n        try {\r\n            components = this.CanonicalAuthorityUrlComponents;\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError_1.ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError_1.ClientConfigurationErrorMessage.authorityUriInsecure;\r\n        }\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ClientConfigurationError_1.ClientConfigurationErrorMessage.authorityUriInvalidPath;\r\n        }\r\n    };\r\n    /**\r\n     * Calls the OIDC endpoint and returns the response\r\n     */\r\n    Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\r\n        var client = new XHRClient_1.XhrClient();\r\n        return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\", /* enableCaching: */ true)\r\n            .then(function (response) {\r\n            return {\r\n                AuthorizationEndpoint: response.authorization_endpoint,\r\n                EndSessionEndpoint: response.end_session_endpoint,\r\n                Issuer: response.issuer\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise.\r\n     * Checks to see if the authority is in the cache\r\n     * Discover endpoints via openid-configuration\r\n     * If successful, caches the endpoint for later use in OIDC\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\r\n            var openIdConfigurationEndpointResponse, _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.GetOpenIdConfigurationEndpointAsync()];\r\n                    case 1:\r\n                        openIdConfigurationEndpointResponse = _b.sent();\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.DiscoverEndpoints(openIdConfigurationEndpointResponse)];\r\n                    case 2:\r\n                        _a.tenantDiscoveryResponse = _b.sent();\r\n                        return [2 /*return*/, this];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Authority;\r\n}());\r\nexports.Authority = Authority;\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EVENT_NAME_PREFIX = \"msal.\";\r\nexports.EVENT_NAME_KEY = \"event_name\";\r\nexports.START_TIME_KEY = \"start_time\";\r\nexports.ELAPSED_TIME_KEY = \"elapsed_time\";\r\nexports.TELEMETRY_BLOB_EVENT_NAMES = {\r\n    MsalCorrelationIdConstStrKey: \"Microsoft.MSAL.correlation_id\",\r\n    ApiTelemIdConstStrKey: \"msal.api_telem_id\",\r\n    ApiIdConstStrKey: \"msal.api_id\",\r\n    BrokerAppConstStrKey: \"Microsoft_MSAL_broker_app\",\r\n    CacheEventCountConstStrKey: \"Microsoft_MSAL_cache_event_count\",\r\n    HttpEventCountTelemetryBatchKey: \"Microsoft_MSAL_http_event_count\",\r\n    IdpConstStrKey: \"Microsoft_MSAL_idp\",\r\n    IsSilentTelemetryBatchKey: \"\",\r\n    IsSuccessfulConstStrKey: \"Microsoft_MSAL_is_successful\",\r\n    ResponseTimeConstStrKey: \"Microsoft_MSAL_response_time\",\r\n    TenantIdConstStrKey: \"Microsoft_MSAL_tenant_id\",\r\n    UiEventCountTelemetryBatchKey: \"Microsoft_MSAL_ui_event_count\"\r\n};\r\n// This is used to replace the real tenant in telemetry info\r\nexports.TENANT_PLACEHOLDER = \"<tenant>\";\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet() {\r\n    }\r\n    /**\r\n     * Check if there are dup scopes in a given request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\r\n    ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        for (var i = 0; i < scopes.length; i++) {\r\n            if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check if a given scope is present in the request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    ScopeSet.containsScope = function (cachedScopes, scopes) {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        return scopes.every(function (value) { return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });\r\n    };\r\n    /**\r\n     * toLower\r\n     *\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.convertToLowerCase = function (scopes) {\r\n        return scopes.map(function (scope) { return scope.toLowerCase(); });\r\n    };\r\n    /**\r\n     * remove one element from a scope array\r\n     *\r\n     * @param scopes\r\n     * @param scope\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.removeElement = function (scopes, scope) {\r\n        return scopes.filter(function (value) { return value !== scope; });\r\n    };\r\n    /**\r\n     * Parse the scopes into a formatted scopeList\r\n     * @param scopes\r\n     */\r\n    ScopeSet.parseScope = function (scopes) {\r\n        var scopeList = \"\";\r\n        if (scopes) {\r\n            for (var i = 0; i < scopes.length; ++i) {\r\n                scopeList += (i !== scopes.length - 1) ? scopes[i] + \" \" : scopes[i];\r\n            }\r\n        }\r\n        return scopeList;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     * @ignore\r\n     */\r\n    ScopeSet.validateInputScope = function (scopes, scopesRequired, clientId) {\r\n        if (!scopes) {\r\n            if (scopesRequired) {\r\n                throw ClientConfigurationError_1.ClientConfigurationError.createScopesRequiredError(scopes);\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        // Check that scopes is an array object (also throws error if scopes == null)\r\n        if (!Array.isArray(scopes)) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createScopesNonArrayError(scopes);\r\n        }\r\n        // Check that scopes is not an empty array\r\n        if (scopes.length < 1) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\r\n        }\r\n        // Check that clientId is passed as single scope\r\n        if (scopes.indexOf(clientId) > -1) {\r\n            if (scopes.length > 1) {\r\n                throw ClientConfigurationError_1.ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts scope value from the state sent with the authentication request.\r\n     * @param {string} state\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    ScopeSet.getScopeFromState = function (state) {\r\n        if (state) {\r\n            var splitIndex = state.indexOf(\"|\");\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Appends extraScopesToConsent if passed\r\n     * @param {@link AuthenticationParameters}\r\n     */\r\n    ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\r\n        if (reqScopes) {\r\n            return reqExtraScopesToConsent ? reqScopes.concat(reqExtraScopesToConsent) : reqScopes;\r\n        }\r\n        return null;\r\n    };\r\n    return ScopeSet;\r\n}());\r\nexports.ScopeSet = ScopeSet;\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = __webpack_require__(1);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(localCallback, options) {\r\n        if (options === void 0) { options = {}; }\r\n        /**\r\n         * @hidden\r\n         */\r\n        this.level = LogLevel.Info;\r\n        var _a = options.correlationId, correlationId = _a === void 0 ? \"\" : _a, _b = options.level, level = _b === void 0 ? LogLevel.Info : _b, _c = options.piiLoggingEnabled, piiLoggingEnabled = _c === void 0 ? false : _c;\r\n        this.localCallback = localCallback;\r\n        this.correlationId = correlationId;\r\n        this.level = level;\r\n        this.piiLoggingEnabled = piiLoggingEnabled;\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.logMessage = function (logLevel, logMessage, containsPii) {\r\n        if ((logLevel > this.level) || (!this.piiLoggingEnabled && containsPii)) {\r\n            return;\r\n        }\r\n        var timestamp = new Date().toUTCString();\r\n        var log;\r\n        if (!StringUtils_1.StringUtils.isEmpty(this.correlationId)) {\r\n            log = timestamp + \":\" + this.correlationId + \"-\" + Constants_1.libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\r\n        }\r\n        else {\r\n            log = timestamp + \":\" + Constants_1.libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\r\n        }\r\n        this.executeCallback(logLevel, log, containsPii);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.executeCallback = function (level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.error = function (message) {\r\n        this.logMessage(LogLevel.Error, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.errorPii = function (message) {\r\n        this.logMessage(LogLevel.Error, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.warning = function (message) {\r\n        this.logMessage(LogLevel.Warning, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.warningPii = function (message) {\r\n        this.logMessage(LogLevel.Warning, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.info = function (message) {\r\n        this.logMessage(LogLevel.Info, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.infoPii = function (message) {\r\n        this.logMessage(LogLevel.Info, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.verbose = function (message) {\r\n        this.logMessage(LogLevel.Verbose, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.verbosePii = function (message) {\r\n        this.logMessage(LogLevel.Verbose, message, true);\r\n    };\r\n    Logger.prototype.isPiiLoggingEnabled = function () {\r\n        return this.piiLoggingEnabled;\r\n    };\r\n    return Logger;\r\n}());\r\nexports.Logger = Logger;\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar AuthError_1 = __webpack_require__(7);\r\nexports.ServerErrorMessage = {\r\n    serverUnavailable: {\r\n        code: \"server_unavailable\",\r\n        desc: \"Server is temporarily unavailable.\"\r\n    },\r\n    unknownServerError: {\r\n        code: \"unknown_server_error\"\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nvar ServerError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ServerError, _super);\r\n    function ServerError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ServerError\";\r\n        Object.setPrototypeOf(_this, ServerError.prototype);\r\n        return _this;\r\n    }\r\n    ServerError.createServerUnavailableError = function () {\r\n        return new ServerError(exports.ServerErrorMessage.serverUnavailable.code, exports.ServerErrorMessage.serverUnavailable.desc);\r\n    };\r\n    ServerError.createUnknownServerError = function (errorDesc) {\r\n        return new ServerError(exports.ServerErrorMessage.unknownServerError.code, errorDesc);\r\n    };\r\n    return ServerError;\r\n}(AuthError_1.AuthError));\r\nexports.ServerError = ServerError;\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar AccessTokenKey_1 = __webpack_require__(25);\r\nvar AccessTokenValue_1 = __webpack_require__(26);\r\nvar ServerRequestParameters_1 = __webpack_require__(27);\r\nvar ClientInfo_1 = __webpack_require__(28);\r\nvar IdToken_1 = __webpack_require__(29);\r\nvar AuthCache_1 = __webpack_require__(30);\r\nvar Account_1 = __webpack_require__(15);\r\nvar ScopeSet_1 = __webpack_require__(10);\r\nvar StringUtils_1 = __webpack_require__(1);\r\nvar WindowUtils_1 = __webpack_require__(33);\r\nvar TokenUtils_1 = __webpack_require__(14);\r\nvar TimeUtils_1 = __webpack_require__(34);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\nvar RequestUtils_1 = __webpack_require__(35);\r\nvar ResponseUtils_1 = __webpack_require__(36);\r\nvar AuthorityFactory_1 = __webpack_require__(37);\r\nvar Configuration_1 = __webpack_require__(19);\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar AuthError_1 = __webpack_require__(7);\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nvar ServerError_1 = __webpack_require__(12);\r\nvar InteractionRequiredAuthError_1 = __webpack_require__(20);\r\nvar AuthResponse_1 = __webpack_require__(21);\r\nvar TelemetryManager_1 = tslib_1.__importDefault(__webpack_require__(38));\r\nvar Constants_1 = __webpack_require__(3);\r\n// default authority\r\nvar DEFAULT_AUTHORITY = \"https://login.microsoftonline.com/common\";\r\n/**\r\n * @hidden\r\n * @ignore\r\n * response_type from OpenIDConnect\r\n * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1\r\n * Since we support only implicit flow in this library, we restrict the response_type support to only 'token' and 'id_token'\r\n *\r\n */\r\nvar ResponseTypes = {\r\n    id_token: \"id_token\",\r\n    token: \"token\",\r\n    id_token_token: \"id_token token\"\r\n};\r\n/**\r\n * UserAgentApplication class\r\n *\r\n * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions\r\n */\r\nvar UserAgentApplication = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application.\r\n     * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     *\r\n     * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/\r\n     *\r\n     * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance\r\n     */\r\n    function UserAgentApplication(configuration) {\r\n        // callbacks for token/error\r\n        this.authResponseCallback = null;\r\n        this.tokenReceivedCallback = null;\r\n        this.errorReceivedCallback = null;\r\n        // Set the Configuration\r\n        this.config = Configuration_1.buildConfiguration(configuration);\r\n        // Set the callback boolean\r\n        this.redirectCallbacksSet = false;\r\n        this.logger = this.config.system.logger;\r\n        this.clientId = this.config.auth.clientId;\r\n        this.inCookie = this.config.cache.storeAuthStateInCookie;\r\n        this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId);\r\n        // if no authority is passed, set the default: \"https://login.microsoftonline.com/common\"\r\n        this.authority = this.config.auth.authority || DEFAULT_AUTHORITY;\r\n        // cache keys msal - typescript throws an error if any value other than \"localStorage\" or \"sessionStorage\" is passed\r\n        this.cacheStorage = new AuthCache_1.AuthCache(this.clientId, this.config.cache.cacheLocation, this.inCookie);\r\n        // Initialize window handling code\r\n        window.activeRenewals = {};\r\n        window.renewStates = [];\r\n        window.callbackMappedToRenewStates = {};\r\n        window.promiseMappedToRenewStates = {};\r\n        window.msal = this;\r\n        var urlHash = window.location.hash;\r\n        var urlContainsHash = UrlUtils_1.UrlUtils.urlContainsHash(urlHash);\r\n        // check if back button is pressed\r\n        WindowUtils_1.WindowUtils.checkIfBackButtonIsPressed(this.cacheStorage);\r\n        // On the server 302 - Redirect, handle this\r\n        if (urlContainsHash && !WindowUtils_1.WindowUtils.isInIframe() && !WindowUtils_1.WindowUtils.isInPopup()) {\r\n            this.handleAuthenticationResponse(urlHash);\r\n        }\r\n    }\r\n    Object.defineProperty(UserAgentApplication.prototype, \"authority\", {\r\n        /**\r\n         * Method to manage the authority URL.\r\n         *\r\n         * @returns {string} authority\r\n         */\r\n        get: function () {\r\n            return this.authorityInstance.CanonicalAuthority;\r\n        },\r\n        /**\r\n         * setter for the authority URL\r\n         * @param {string} authority\r\n         */\r\n        // If the developer passes an authority, create an instance\r\n        set: function (val) {\r\n            this.authorityInstance = AuthorityFactory_1.AuthorityFactory.CreateInstance(val, this.config.auth.validateAuthority);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the current authority instance from the MSAL configuration object\r\n     *\r\n     * @returns {@link Authority} authority instance\r\n     */\r\n    UserAgentApplication.prototype.getAuthorityInstance = function () {\r\n        return this.authorityInstance;\r\n    };\r\n    UserAgentApplication.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {\r\n        if (!authOrTokenCallback) {\r\n            this.redirectCallbacksSet = false;\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createInvalidCallbackObjectError(authOrTokenCallback);\r\n        }\r\n        // Set callbacks\r\n        if (errorReceivedCallback) {\r\n            this.tokenReceivedCallback = authOrTokenCallback;\r\n            this.errorReceivedCallback = errorReceivedCallback;\r\n            this.logger.warning(\"This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).\");\r\n        }\r\n        else {\r\n            this.authResponseCallback = authOrTokenCallback;\r\n        }\r\n        this.redirectCallbacksSet = true;\r\n        // On the server 302 - Redirect, handle this\r\n        var cachedHash = this.cacheStorage.getItem(Constants_1.TemporaryCacheKeys.URL_HASH);\r\n        if (cachedHash) {\r\n            this.processCallBack(cachedHash, null);\r\n        }\r\n    };\r\n    /**\r\n     * Public API to verify if the URL contains the hash with known properties\r\n     * @param hash\r\n     */\r\n    UserAgentApplication.prototype.urlContainsHash = function (hash) {\r\n        return UrlUtils_1.UrlUtils.urlContainsHash(hash);\r\n    };\r\n    UserAgentApplication.prototype.authResponseHandler = function (interactionType, response, resolve) {\r\n        if (interactionType === Constants_1.Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.tokenReceivedCallback(response);\r\n            }\r\n            else if (this.authResponseCallback) {\r\n                this.authResponseCallback(null, response);\r\n            }\r\n        }\r\n        else if (interactionType === Constants_1.Constants.interactionTypePopup) {\r\n            resolve(response);\r\n        }\r\n        else {\r\n            throw ClientAuthError_1.ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    };\r\n    UserAgentApplication.prototype.authErrorHandler = function (interactionType, authErr, response, reject) {\r\n        // set interaction_status to complete\r\n        this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n        if (interactionType === Constants_1.Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.errorReceivedCallback(authErr, response.accountState);\r\n            }\r\n            else {\r\n                this.authResponseCallback(authErr, response);\r\n            }\r\n        }\r\n        else if (interactionType === Constants_1.Constants.interactionTypePopup) {\r\n            reject(authErr);\r\n        }\r\n        else {\r\n            throw ClientAuthError_1.ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    };\r\n    // #endregion\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     */\r\n    UserAgentApplication.prototype.loginRedirect = function (userRequest) {\r\n        // validate request\r\n        var request = RequestUtils_1.RequestUtils.validateRequest(userRequest, true, this.clientId, Constants_1.Constants.interactionTypeRedirect, this.redirectCallbacksSet);\r\n        this.acquireTokenInteractive(Constants_1.Constants.interactionTypeRedirect, true, request, null, null);\r\n    };\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenRedirect = function (userRequest) {\r\n        // validate request\r\n        var request = RequestUtils_1.RequestUtils.validateRequest(userRequest, false, this.clientId, Constants_1.Constants.interactionTypeRedirect, this.redirectCallbacksSet);\r\n        this.acquireTokenInteractive(Constants_1.Constants.interactionTypeRedirect, false, request, null, null);\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    UserAgentApplication.prototype.loginPopup = function (userRequest) {\r\n        var _this = this;\r\n        // validate request\r\n        var request = RequestUtils_1.RequestUtils.validateRequest(userRequest, true, this.clientId, Constants_1.Constants.interactionTypePopup);\r\n        return new Promise(function (resolve, reject) {\r\n            _this.acquireTokenInteractive(Constants_1.Constants.interactionTypePopup, true, request, resolve, reject);\r\n        }).catch(function (error) {\r\n            _this.cacheStorage.resetTempCacheItems(request.state);\r\n            throw error;\r\n        });\r\n    };\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenPopup = function (userRequest) {\r\n        var _this = this;\r\n        // validate request\r\n        var request = RequestUtils_1.RequestUtils.validateRequest(userRequest, false, this.clientId, Constants_1.Constants.interactionTypePopup);\r\n        return new Promise(function (resolve, reject) {\r\n            _this.acquireTokenInteractive(Constants_1.Constants.interactionTypePopup, false, request, resolve, reject);\r\n        }).catch(function (error) {\r\n            _this.cacheStorage.resetTempCacheItems(request.state);\r\n            throw error;\r\n        });\r\n    };\r\n    // #region Acquire Token\r\n    /**\r\n     * Use when initiating the login process or when you want to obtain an access_token for your API,\r\n     * either by redirecting the user's browser window to the authorization endpoint or via opening a popup window in the user's browser.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenInteractive = function (interactionType, isLoginCall, request, resolve, reject) {\r\n        var _this = this;\r\n        // block the request if made from the hidden iframe\r\n        WindowUtils_1.WindowUtils.blockReloadInHiddenIframes();\r\n        var interactionProgress = this.cacheStorage.getItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n        if (interactionType === Constants_1.Constants.interactionTypeRedirect) {\r\n            this.cacheStorage.setItem(Constants_1.TemporaryCacheKeys.REDIRECT_REQUEST, \"\" + Constants_1.Constants.inProgress + Constants_1.Constants.resourceDelimiter + request.state);\r\n        }\r\n        // If already in progress, do not proceed\r\n        if (interactionProgress === Constants_1.Constants.inProgress) {\r\n            var thrownError = isLoginCall ? ClientAuthError_1.ClientAuthError.createLoginInProgressError() : ClientAuthError_1.ClientAuthError.createAcquireTokenInProgressError();\r\n            var stateOnlyResponse = AuthResponse_1.buildResponseStateOnly(this.getAccountState(request.state));\r\n            this.cacheStorage.resetTempCacheItems(request.state);\r\n            this.authErrorHandler(interactionType, thrownError, stateOnlyResponse, reject);\r\n            return;\r\n        }\r\n        // Get the account object if a session exists\r\n        var account = (request && request.account && !isLoginCall) ? request.account : this.getAccount();\r\n        // If no session exists, prompt the user to login.\r\n        if (!account && !ServerRequestParameters_1.ServerRequestParameters.isSSOParam(request)) {\r\n            if (isLoginCall) {\r\n                // extract ADAL id_token if exists\r\n                var adalIdToken = this.extractADALIdToken();\r\n                // silent login if ADAL id_token is retrieved successfully - SSO\r\n                if (adalIdToken && !request.scopes) {\r\n                    this.logger.info(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\r\n                    var tokenRequest = this.buildIDTokenRequest(request);\r\n                    this.silentLogin = true;\r\n                    this.acquireTokenSilent(tokenRequest).then(function (response) {\r\n                        _this.silentLogin = false;\r\n                        _this.logger.info(\"Unified cache call is successful\");\r\n                        _this.authResponseHandler(interactionType, response, resolve);\r\n                        return;\r\n                    }, function (error) {\r\n                        _this.silentLogin = false;\r\n                        _this.logger.error(\"Error occurred during unified cache ATS: \" + error);\r\n                        // proceed to login since ATS failed\r\n                        _this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);\r\n                    });\r\n                }\r\n                // No ADAL token found, proceed to login\r\n                else {\r\n                    this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);\r\n                }\r\n            }\r\n            // AcquireToken call, but no account or context given, so throw error\r\n            else {\r\n                this.logger.info(\"User login is required\");\r\n                var stateOnlyResponse = AuthResponse_1.buildResponseStateOnly(this.getAccountState(request.state));\r\n                this.cacheStorage.resetTempCacheItems(request.state);\r\n                this.authErrorHandler(interactionType, ClientAuthError_1.ClientAuthError.createUserLoginRequiredError(), stateOnlyResponse, reject);\r\n                return;\r\n            }\r\n        }\r\n        // User session exists\r\n        else {\r\n            this.acquireTokenHelper(account, interactionType, isLoginCall, request, resolve, reject);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Helper function to acquireToken\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenHelper = function (account, interactionType, isLoginCall, request, resolve, reject) {\r\n        var _this = this;\r\n        // Track the acquireToken progress\r\n        this.cacheStorage.setItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS, Constants_1.Constants.inProgress);\r\n        var scope = request.scopes ? request.scopes.join(\" \").toLowerCase() : this.clientId.toLowerCase();\r\n        var serverAuthenticationRequest;\r\n        var acquireTokenAuthority = (request && request.authority) ? AuthorityFactory_1.AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;\r\n        var popUpWindow;\r\n        if (interactionType === Constants_1.Constants.interactionTypePopup) {\r\n            // Generate a popup window\r\n            try {\r\n                popUpWindow = this.openPopup(\"about:blank\", \"msal\", Constants_1.Constants.popUpWidth, Constants_1.Constants.popUpHeight);\r\n                // Push popup window handle onto stack for tracking\r\n                WindowUtils_1.WindowUtils.trackPopup(popUpWindow);\r\n            }\r\n            catch (e) {\r\n                this.logger.info(ClientAuthError_1.ClientAuthErrorMessage.popUpWindowError.code + \":\" + ClientAuthError_1.ClientAuthErrorMessage.popUpWindowError.desc);\r\n                this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR, ClientAuthError_1.ClientAuthErrorMessage.popUpWindowError.code);\r\n                this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR_DESC, ClientAuthError_1.ClientAuthErrorMessage.popUpWindowError.desc);\r\n                if (reject) {\r\n                    reject(ClientAuthError_1.ClientAuthError.createPopupWindowError());\r\n                }\r\n            }\r\n            if (!popUpWindow) {\r\n                return;\r\n            }\r\n        }\r\n        acquireTokenAuthority.resolveEndpointsAsync().then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n            var responseType, loginStartPage, urlNavigate, hash, error_1;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        responseType = isLoginCall ? ResponseTypes.id_token : this.getTokenType(account, request.scopes, false);\r\n                        if (isLoginCall) {\r\n                            // if the user sets the login start page - angular only??\r\n                            loginStartPage = this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.ANGULAR_LOGIN_REQUEST + Constants_1.Constants.resourceDelimiter + request.state);\r\n                            if (!loginStartPage || loginStartPage === \"\") {\r\n                                loginStartPage = window.location.href;\r\n                            }\r\n                            else {\r\n                                this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.ANGULAR_LOGIN_REQUEST + Constants_1.Constants.resourceDelimiter + request.state, \"\");\r\n                            }\r\n                        }\r\n                        serverAuthenticationRequest = new ServerRequestParameters_1.ServerRequestParameters(acquireTokenAuthority, this.clientId, responseType, this.getRedirectUri(request && request.redirectUri), request.scopes, request.state, request.correlationId);\r\n                        this.updateCacheEntries(serverAuthenticationRequest, account, loginStartPage);\r\n                        // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\r\n                        serverAuthenticationRequest.populateQueryParams(account, request);\r\n                        urlNavigate = UrlUtils_1.UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants_1.Constants.response_mode_fragment;\r\n                        // set state in cache\r\n                        if (interactionType === Constants_1.Constants.interactionTypeRedirect) {\r\n                            if (!isLoginCall) {\r\n                                this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.STATE_ACQ_TOKEN + Constants_1.Constants.resourceDelimiter + request.state, serverAuthenticationRequest.state, this.inCookie);\r\n                            }\r\n                        }\r\n                        else if (interactionType === Constants_1.Constants.interactionTypePopup) {\r\n                            window.renewStates.push(serverAuthenticationRequest.state);\r\n                            window.requestType = isLoginCall ? Constants_1.Constants.login : Constants_1.Constants.renewToken;\r\n                            // Register callback to capture results from server\r\n                            this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\r\n                        }\r\n                        else {\r\n                            throw ClientAuthError_1.ClientAuthError.createInvalidInteractionTypeError();\r\n                        }\r\n                        // prompt user for interaction\r\n                        this.navigateWindow(urlNavigate, popUpWindow);\r\n                        if (!popUpWindow) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, WindowUtils_1.WindowUtils.monitorWindowForHash(popUpWindow, this.config.system.loadFrameTimeout, urlNavigate)];\r\n                    case 2:\r\n                        hash = _a.sent();\r\n                        this.handleAuthenticationResponse(hash);\r\n                        // Request completed successfully, set to completed\r\n                        this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n                        this.logger.info(\"Closing popup window\");\r\n                        // TODO: Check how this can be extracted for any framework specific code?\r\n                        if (this.config.framework.isAngular) {\r\n                            this.broadcast(\"msal:popUpHashChanged\", hash);\r\n                            WindowUtils_1.WindowUtils.closePopups();\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_1 = _a.sent();\r\n                        if (reject) {\r\n                            reject(error_1);\r\n                        }\r\n                        if (this.config.framework.isAngular) {\r\n                            this.broadcast(\"msal:popUpClosed\", error_1.errorCode + Constants_1.Constants.resourceDelimiter + error_1.errorMessage);\r\n                        }\r\n                        else {\r\n                            // Request failed, set to canceled\r\n                            this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n                            popUpWindow.close();\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); }).catch(function (err) {\r\n            _this.logger.warning(\"could not resolve endpoints\");\r\n            _this.cacheStorage.resetTempCacheItems(request.state);\r\n            _this.authErrorHandler(interactionType, ClientAuthError_1.ClientAuthError.createEndpointResolutionError(err.toString), AuthResponse_1.buildResponseStateOnly(request.state), reject);\r\n            if (popUpWindow) {\r\n                popUpWindow.close();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Use this function to obtain a token before every call to the API / resource provider\r\n     *\r\n     * MSAL return's a cached token when available\r\n     * Or it send's a request to the STS to obtain a new token using a hidden iframe.\r\n     *\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenSilent = function (userRequest) {\r\n        var _this = this;\r\n        // validate the request\r\n        var request = RequestUtils_1.RequestUtils.validateRequest(userRequest, false, this.clientId);\r\n        return new Promise(function (resolve, reject) {\r\n            // block the request if made from the hidden iframe\r\n            WindowUtils_1.WindowUtils.blockReloadInHiddenIframes();\r\n            var scope = request.scopes.join(\" \").toLowerCase();\r\n            // if the developer passes an account, give that account the priority\r\n            var account = request.account || _this.getAccount();\r\n            // extract if there is an adalIdToken stashed in the cache\r\n            var adalIdToken = _this.cacheStorage.getItem(Constants_1.Constants.adalIdToken);\r\n            // if there is no account logged in and no login_hint/sid is passed in the request\r\n            if (!account && !(request.sid || request.loginHint) && StringUtils_1.StringUtils.isEmpty(adalIdToken)) {\r\n                _this.logger.info(\"User login is required\");\r\n                return reject(ClientAuthError_1.ClientAuthError.createUserLoginRequiredError());\r\n            }\r\n            // set the response type based on the current cache status / scopes set\r\n            var responseType = _this.getTokenType(account, request.scopes, true);\r\n            // create a serverAuthenticationRequest populating the `queryParameters` to be sent to the Server\r\n            var serverAuthenticationRequest = new ServerRequestParameters_1.ServerRequestParameters(AuthorityFactory_1.AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority), _this.clientId, responseType, _this.getRedirectUri(request.redirectUri), request.scopes, request.state, request.correlationId);\r\n            // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\r\n            if (ServerRequestParameters_1.ServerRequestParameters.isSSOParam(request) || account) {\r\n                serverAuthenticationRequest.populateQueryParams(account, request);\r\n            }\r\n            // if user didn't pass login_hint/sid and adal's idtoken is present, extract the login_hint from the adalIdToken\r\n            else if (!account && !StringUtils_1.StringUtils.isEmpty(adalIdToken)) {\r\n                // if adalIdToken exists, extract the SSO info from the same\r\n                var adalIdTokenObject = TokenUtils_1.TokenUtils.extractIdToken(adalIdToken);\r\n                _this.logger.verbose(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\r\n                serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject);\r\n            }\r\n            var userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;\r\n            var authErr;\r\n            var cacheResultResponse;\r\n            if (!userContainedClaims && !request.forceRefresh) {\r\n                try {\r\n                    cacheResultResponse = _this.getCachedToken(serverAuthenticationRequest, account);\r\n                }\r\n                catch (e) {\r\n                    authErr = e;\r\n                }\r\n            }\r\n            // resolve/reject based on cacheResult\r\n            if (cacheResultResponse) {\r\n                _this.logger.info(\"Token is already in cache for scope:\" + scope);\r\n                resolve(cacheResultResponse);\r\n                return null;\r\n            }\r\n            else if (authErr) {\r\n                _this.logger.infoPii(authErr.errorCode + \":\" + authErr.errorMessage);\r\n                reject(authErr);\r\n                return null;\r\n            }\r\n            // else proceed with login\r\n            else {\r\n                var logMessage = void 0;\r\n                if (userContainedClaims) {\r\n                    logMessage = \"Skipped cache lookup since claims were given.\";\r\n                }\r\n                else if (request.forceRefresh) {\r\n                    logMessage = \"Skipped cache lookup since request.forceRefresh option was set to true\";\r\n                }\r\n                else {\r\n                    logMessage = \"Token is not in cache for scope:\" + scope;\r\n                }\r\n                _this.logger.verbose(logMessage);\r\n                // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the api.\r\n                if (!serverAuthenticationRequest.authorityInstance) {\r\n                    serverAuthenticationRequest.authorityInstance = request.authority ? AuthorityFactory_1.AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority) : _this.authorityInstance;\r\n                }\r\n                // cache miss\r\n                return serverAuthenticationRequest.authorityInstance.resolveEndpointsAsync()\r\n                    .then(function () {\r\n                    /*\r\n                     * refresh attempt with iframe\r\n                     * Already renewing for this scope, callback when we get the token.\r\n                     */\r\n                    if (window.activeRenewals[scope]) {\r\n                        _this.logger.verbose(\"Renew token for scope: \" + scope + \" is in progress. Registering callback\");\r\n                        // Active renewals contains the state for each renewal.\r\n                        _this.registerCallback(window.activeRenewals[scope], scope, resolve, reject);\r\n                    }\r\n                    else {\r\n                        if (request.scopes && request.scopes.indexOf(_this.clientId) > -1 && request.scopes.length === 1) {\r\n                            /*\r\n                             * App uses idToken to send to api endpoints\r\n                             * Default scope is tracked as clientId to store this token\r\n                             */\r\n                            _this.logger.verbose(\"renewing idToken\");\r\n                            _this.silentLogin = true;\r\n                            _this.renewIdToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\r\n                        }\r\n                        else {\r\n                            // renew access token\r\n                            _this.logger.verbose(\"renewing accesstoken\");\r\n                            _this.renewToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\r\n                        }\r\n                    }\r\n                }).catch(function (err) {\r\n                    _this.logger.warning(\"could not resolve endpoints\");\r\n                    reject(ClientAuthError_1.ClientAuthError.createEndpointResolutionError(err.toString()));\r\n                    return null;\r\n                });\r\n            }\r\n        }).catch(function (error) {\r\n            _this.cacheStorage.resetTempCacheItems(request.state);\r\n            throw error;\r\n        });\r\n    };\r\n    // #endregion\r\n    // #region Popup Window Creation\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.openPopup = function (urlNavigate, title, popUpWidth, popUpHeight) {\r\n        try {\r\n            /**\r\n             * adding winLeft and winTop to account for dual monitor\r\n             * using screenLeft and screenTop for IE8 and earlier\r\n             */\r\n            var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n            var winTop = window.screenTop ? window.screenTop : window.screenY;\r\n            /**\r\n             * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n             * using document.documentElement.clientWidth for IE8 and earlier\r\n             */\r\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n            var left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n            var top = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n            // open the window\r\n            var popupWindow = window.open(urlNavigate, title, \"width=\" + popUpWidth + \", height=\" + popUpHeight + \", top=\" + top + \", left=\" + left);\r\n            if (!popupWindow) {\r\n                throw ClientAuthError_1.ClientAuthError.createPopupWindowError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            return popupWindow;\r\n        }\r\n        catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n            throw ClientAuthError_1.ClientAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    };\r\n    // #endregion\r\n    // #region Iframe Management\r\n    /**\r\n     * @hidden\r\n     * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.\r\n     * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.loadIframeTimeout = function (urlNavigate, frameName, scope) {\r\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\r\n            var expectedState, iframe, hash, error_2;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        expectedState = window.activeRenewals[scope];\r\n                        this.logger.verbose(\"Set loading state to pending for: \" + scope + \":\" + expectedState);\r\n                        this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.RENEW_STATUS + Constants_1.Constants.resourceDelimiter + expectedState, Constants_1.Constants.inProgress);\r\n                        return [4 /*yield*/, WindowUtils_1.WindowUtils.loadFrame(urlNavigate, frameName, this.config.system.navigateFrameWait, this.logger)];\r\n                    case 1:\r\n                        iframe = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, WindowUtils_1.WindowUtils.monitorWindowForHash(iframe.contentWindow, this.config.system.loadFrameTimeout, urlNavigate)];\r\n                    case 3:\r\n                        hash = _a.sent();\r\n                        if (hash) {\r\n                            this.handleAuthenticationResponse(hash);\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        error_2 = _a.sent();\r\n                        if (this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.RENEW_STATUS + Constants_1.Constants.resourceDelimiter + expectedState) === Constants_1.Constants.inProgress) {\r\n                            // fail the iframe session if it's in pending state\r\n                            this.logger.verbose(\"Loading frame has timed out after: \" + (this.config.system.loadFrameTimeout / 1000) + \" seconds for scope \" + scope + \":\" + expectedState);\r\n                            // Error after timeout\r\n                            if (expectedState && window.callbackMappedToRenewStates[expectedState]) {\r\n                                window.callbackMappedToRenewStates[expectedState](null, error_2);\r\n                            }\r\n                            this.cacheStorage.removeItem(\"\" + Constants_1.TemporaryCacheKeys.RENEW_STATUS + Constants_1.Constants.resourceDelimiter + expectedState);\r\n                        }\r\n                        WindowUtils_1.WindowUtils.removeHiddenIframe(iframe);\r\n                        throw error_2;\r\n                    case 5:\r\n                        WindowUtils_1.WindowUtils.removeHiddenIframe(iframe);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // #endregion\r\n    // #region General Helpers\r\n    /**\r\n     * @hidden\r\n     * Used to redirect the browser to the STS authorization endpoint\r\n     * @param {string} urlNavigate - URL of the authorization endpoint\r\n     */\r\n    UserAgentApplication.prototype.navigateWindow = function (urlNavigate, popupWindow) {\r\n        // Navigate if valid URL\r\n        if (urlNavigate && !StringUtils_1.StringUtils.isEmpty(urlNavigate)) {\r\n            var navigateWindow = popupWindow ? popupWindow : window;\r\n            var logMessage = popupWindow ? \"Navigated Popup window to:\" + urlNavigate : \"Navigate to:\" + urlNavigate;\r\n            this.logger.infoPii(logMessage);\r\n            navigateWindow.location.assign(urlNavigate);\r\n        }\r\n        else {\r\n            this.logger.info(\"Navigate url is empty\");\r\n            throw AuthError_1.AuthError.createUnexpectedError(\"Navigate url is empty\");\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object\r\n     * @param {string} expectedState - Unique state identifier (guid).\r\n     * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {Function} resolve - The resolve function of the promise object.\r\n     * @param {Function} reject - The reject function of the promise object.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.registerCallback = function (expectedState, scope, resolve, reject) {\r\n        var _this = this;\r\n        // track active renewals\r\n        window.activeRenewals[scope] = expectedState;\r\n        // initialize callbacks mapped array\r\n        if (!window.promiseMappedToRenewStates[expectedState]) {\r\n            window.promiseMappedToRenewStates[expectedState] = [];\r\n        }\r\n        // indexing on the current state, push the callback params to callbacks mapped\r\n        window.promiseMappedToRenewStates[expectedState].push({ resolve: resolve, reject: reject });\r\n        // Store the server response in the current window??\r\n        if (!window.callbackMappedToRenewStates[expectedState]) {\r\n            window.callbackMappedToRenewStates[expectedState] = function (response, error) {\r\n                // reset active renewals\r\n                window.activeRenewals[scope] = null;\r\n                // for all promiseMappedtoRenewStates for a given 'state' - call the reject/resolve with error/token respectively\r\n                for (var i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {\r\n                    try {\r\n                        if (error) {\r\n                            window.promiseMappedToRenewStates[expectedState][i].reject(error);\r\n                        }\r\n                        else if (response) {\r\n                            window.promiseMappedToRenewStates[expectedState][i].resolve(response);\r\n                        }\r\n                        else {\r\n                            _this.cacheStorage.resetTempCacheItems(expectedState);\r\n                            throw AuthError_1.AuthError.createUnexpectedError(\"Error and response are both null\");\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _this.logger.warning(e);\r\n                    }\r\n                }\r\n                // reset\r\n                window.promiseMappedToRenewStates[expectedState] = null;\r\n                window.callbackMappedToRenewStates[expectedState] = null;\r\n            };\r\n        }\r\n    };\r\n    // #endregion\r\n    // #region Logout\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     */\r\n    UserAgentApplication.prototype.logout = function () {\r\n        var _this = this;\r\n        this.clearCache();\r\n        this.account = null;\r\n        var logout = \"\";\r\n        if (this.getPostLogoutRedirectUri()) {\r\n            logout = \"post_logout_redirect_uri=\" + encodeURIComponent(this.getPostLogoutRedirectUri());\r\n        }\r\n        this.authorityInstance.resolveEndpointsAsync().then(function (authority) {\r\n            var urlNavigate = authority.EndSessionEndpoint\r\n                ? authority.EndSessionEndpoint + \"?\" + logout\r\n                : _this.authority + \"oauth2/v2.0/logout?\" + logout;\r\n            _this.navigateWindow(urlNavigate);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Clear all access tokens in the cache.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.clearCache = function () {\r\n        window.renewStates = [];\r\n        var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants_1.Constants.clientId, Constants_1.Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenItems.length; i++) {\r\n            this.cacheStorage.removeItem(JSON.stringify(accessTokenItems[i].key));\r\n        }\r\n        this.cacheStorage.resetCacheItems();\r\n        // state not being sent would mean this call may not be needed; check later\r\n        this.cacheStorage.clearMsalCookie();\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Clear a given access token from the cache.\r\n     *\r\n     * @param accessToken\r\n     */\r\n    UserAgentApplication.prototype.clearCacheForScope = function (accessToken) {\r\n        var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants_1.Constants.clientId, Constants_1.Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenItems.length; i++) {\r\n            var token = accessTokenItems[i];\r\n            if (token.value.accessToken === accessToken) {\r\n                this.cacheStorage.removeItem(JSON.stringify(token.key));\r\n            }\r\n        }\r\n    };\r\n    // #endregion\r\n    // #region Response\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.\r\n     * @param {string} hash - Hash passed from redirect page.\r\n     * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.\r\n     */\r\n    UserAgentApplication.prototype.isCallback = function (hash) {\r\n        this.logger.info(\"isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.\");\r\n        return UrlUtils_1.UrlUtils.urlContainsHash(hash);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to call the constructor callback with the token/error\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    UserAgentApplication.prototype.processCallBack = function (hash, stateInfo, parentCallback) {\r\n        this.logger.info(\"Processing the callback from redirect response\");\r\n        // get the state info from the hash\r\n        if (!stateInfo) {\r\n            stateInfo = this.getResponseState(hash);\r\n        }\r\n        var response;\r\n        var authErr;\r\n        // Save the token info from the hash\r\n        try {\r\n            response = this.saveTokenFromHash(hash, stateInfo);\r\n        }\r\n        catch (err) {\r\n            authErr = err;\r\n        }\r\n        // remove hash from the cache\r\n        this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.URL_HASH);\r\n        try {\r\n            // Clear the cookie in the hash\r\n            this.cacheStorage.clearMsalCookie(stateInfo.state);\r\n            var accountState = this.getAccountState(stateInfo.state);\r\n            if (response) {\r\n                if ((stateInfo.requestType === Constants_1.Constants.renewToken) || response.accessToken) {\r\n                    if (window.parent !== window) {\r\n                        this.logger.verbose(\"Window is in iframe, acquiring token silently\");\r\n                    }\r\n                    else {\r\n                        this.logger.verbose(\"acquiring token interactive in progress\");\r\n                    }\r\n                    response.tokenType = Constants_1.ServerHashParamKeys.ACCESS_TOKEN;\r\n                }\r\n                else if (stateInfo.requestType === Constants_1.Constants.login) {\r\n                    response.tokenType = Constants_1.ServerHashParamKeys.ID_TOKEN;\r\n                }\r\n                if (!parentCallback) {\r\n                    this.authResponseHandler(Constants_1.Constants.interactionTypeRedirect, response);\r\n                    return;\r\n                }\r\n            }\r\n            else if (!parentCallback) {\r\n                this.cacheStorage.resetTempCacheItems(stateInfo.state);\r\n                this.authErrorHandler(Constants_1.Constants.interactionTypeRedirect, authErr, AuthResponse_1.buildResponseStateOnly(accountState));\r\n                return;\r\n            }\r\n            parentCallback(response, authErr);\r\n        }\r\n        catch (err) {\r\n            this.logger.error(\"Error occurred in token received callback function: \" + err);\r\n            throw ClientAuthError_1.ClientAuthError.createErrorInCallbackFunction(err.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * This method must be called for processing the response received from the STS. It extracts the hash, processes the token or error information and saves it in the cache. It then\r\n     * calls the registered callbacks in case of redirect or resolves the promises with the result.\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    UserAgentApplication.prototype.handleAuthenticationResponse = function (hash) {\r\n        // retrieve the hash\r\n        var locationHash = hash || window.location.hash;\r\n        // Check if the current flow is popup or hidden iframe\r\n        var iframeWithHash = WindowUtils_1.WindowUtils.getIframeWithHash(locationHash);\r\n        var popUpWithHash = WindowUtils_1.WindowUtils.getPopUpWithHash(locationHash);\r\n        var isPopupOrIframe = !!(iframeWithHash || popUpWithHash);\r\n        // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically\r\n        var stateInfo = this.getResponseState(locationHash);\r\n        var tokenResponseCallback = null;\r\n        this.logger.info(\"Returned from redirect url\");\r\n        // If parent window is the msal instance which opened the current window (iframe)\r\n        if (isPopupOrIframe) {\r\n            tokenResponseCallback = window.callbackMappedToRenewStates[stateInfo.state];\r\n        }\r\n        else {\r\n            // Redirect cases\r\n            tokenResponseCallback = null;\r\n            // if set to navigate to loginRequest page post login\r\n            if (this.config.auth.navigateToLoginRequestUrl) {\r\n                this.cacheStorage.setItem(Constants_1.TemporaryCacheKeys.URL_HASH, locationHash);\r\n                if (window.parent === window) {\r\n                    var loginRequestUrl = this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.LOGIN_REQUEST + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie);\r\n                    // Redirect to home page if login request url is null (real null or the string null)\r\n                    if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                        this.logger.error(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                        window.location.href = \"/\";\r\n                    }\r\n                    else {\r\n                        window.location.href = loginRequestUrl;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                window.location.hash = \"\";\r\n            }\r\n            if (!this.redirectCallbacksSet) {\r\n                // We reached this point too early - cache hash, return and process in handleRedirectCallbacks\r\n                this.cacheStorage.setItem(Constants_1.TemporaryCacheKeys.URL_HASH, locationHash);\r\n                return;\r\n            }\r\n        }\r\n        this.processCallBack(locationHash, stateInfo, tokenResponseCallback);\r\n        // If current window is opener, close all windows\r\n        if (isPopupOrIframe) {\r\n            WindowUtils_1.WindowUtils.closePopups();\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Creates a stateInfo object from the URL fragment and returns it.\r\n     * @param {string} hash  -  Hash passed from redirect page\r\n     * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getResponseState = function (hash) {\r\n        var parameters = UrlUtils_1.UrlUtils.deserializeHash(hash);\r\n        var stateResponse;\r\n        if (!parameters) {\r\n            throw AuthError_1.AuthError.createUnexpectedError(\"Hash was not parsed correctly.\");\r\n        }\r\n        if (parameters.hasOwnProperty(\"state\")) {\r\n            stateResponse = {\r\n                requestType: Constants_1.Constants.unknown,\r\n                state: parameters.state,\r\n                stateMatch: false\r\n            };\r\n        }\r\n        else {\r\n            throw AuthError_1.AuthError.createUnexpectedError(\"Hash does not contain state.\");\r\n        }\r\n        /*\r\n         * async calls can fire iframe and login request at the same time if developer does not use the API as expected\r\n         * incoming callback needs to be looked up to find the request type\r\n         */\r\n        // loginRedirect\r\n        if (stateResponse.state === this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.STATE_LOGIN + Constants_1.Constants.resourceDelimiter + stateResponse.state, this.inCookie) || stateResponse.state === this.silentAuthenticationState) { // loginRedirect\r\n            stateResponse.requestType = Constants_1.Constants.login;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n        // acquireTokenRedirect\r\n        else if (stateResponse.state === this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.STATE_ACQ_TOKEN + Constants_1.Constants.resourceDelimiter + stateResponse.state, this.inCookie)) { // acquireTokenRedirect\r\n            stateResponse.requestType = Constants_1.Constants.renewToken;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n        // external api requests may have many renewtoken requests for different resource\r\n        if (!stateResponse.stateMatch) {\r\n            stateResponse.requestType = window.requestType;\r\n            var statesInParentContext = window.renewStates;\r\n            for (var i = 0; i < statesInParentContext.length; i++) {\r\n                if (statesInParentContext[i] === stateResponse.state) {\r\n                    stateResponse.stateMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return stateResponse;\r\n    };\r\n    // #endregion\r\n    // #region Token Processing (Extract to TokenProcessing.ts)\r\n    /**\r\n     * @hidden\r\n     * Used to get token for the specified set of scopes from the cache\r\n     * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token\r\n     * @param {Account} account - Account for which the scopes were requested\r\n     */\r\n    UserAgentApplication.prototype.getCachedToken = function (serverAuthenticationRequest, account) {\r\n        var accessTokenCacheItem = null;\r\n        var scopes = serverAuthenticationRequest.scopes;\r\n        // filter by clientId and account\r\n        var tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null);\r\n        // No match found after initial filtering\r\n        if (tokenCacheItems.length === 0) {\r\n            return null;\r\n        }\r\n        var filteredItems = [];\r\n        // if no authority passed\r\n        if (!serverAuthenticationRequest.authority) {\r\n            // filter by scope\r\n            for (var i = 0; i < tokenCacheItems.length; i++) {\r\n                var cacheItem = tokenCacheItems[i];\r\n                var cachedScopes = cacheItem.key.scopes.split(\" \");\r\n                if (ScopeSet_1.ScopeSet.containsScope(cachedScopes, scopes)) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n            // if only one cached token found\r\n            if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory_1.AuthorityFactory.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);\r\n            }\r\n            // if more than one cached token is found\r\n            else if (filteredItems.length > 1) {\r\n                throw ClientAuthError_1.ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n            // if no match found, check if there was a single authority used\r\n            else {\r\n                var authorityList = this.getUniqueAuthority(tokenCacheItems, \"authority\");\r\n                if (authorityList.length > 1) {\r\n                    throw ClientAuthError_1.ClientAuthError.createMultipleAuthoritiesInCacheError(scopes.toString());\r\n                }\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory_1.AuthorityFactory.CreateInstance(authorityList[0], this.config.auth.validateAuthority);\r\n            }\r\n        }\r\n        // if an authority is passed in the API\r\n        else {\r\n            // filter by authority and scope\r\n            for (var i = 0; i < tokenCacheItems.length; i++) {\r\n                var cacheItem = tokenCacheItems[i];\r\n                var cachedScopes = cacheItem.key.scopes.split(\" \");\r\n                if (ScopeSet_1.ScopeSet.containsScope(cachedScopes, scopes) && UrlUtils_1.UrlUtils.CanonicalizeUri(cacheItem.key.authority) === serverAuthenticationRequest.authority) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n            // no match\r\n            if (filteredItems.length === 0) {\r\n                return null;\r\n            }\r\n            // if only one cachedToken Found\r\n            else if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n            }\r\n            else {\r\n                // if more than one cached token is found\r\n                throw ClientAuthError_1.ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n        }\r\n        if (accessTokenCacheItem != null) {\r\n            var expired = Number(accessTokenCacheItem.value.expiresIn);\r\n            // If expiration is within offset, it will force renew\r\n            var offset = this.config.system.tokenRenewalOffsetSeconds || 300;\r\n            if (expired && (expired > TimeUtils_1.TimeUtils.now() + offset)) {\r\n                var idTokenObj = new IdToken_1.IdToken(accessTokenCacheItem.value.idToken);\r\n                if (!account) {\r\n                    account = this.getAccount();\r\n                    if (!account) {\r\n                        throw AuthError_1.AuthError.createUnexpectedError(\"Account should not be null here.\");\r\n                    }\r\n                }\r\n                var aState = this.getAccountState(serverAuthenticationRequest.state);\r\n                var response = {\r\n                    uniqueId: \"\",\r\n                    tenantId: \"\",\r\n                    tokenType: (accessTokenCacheItem.value.idToken === accessTokenCacheItem.value.accessToken) ? Constants_1.ServerHashParamKeys.ID_TOKEN : Constants_1.ServerHashParamKeys.ACCESS_TOKEN,\r\n                    idToken: idTokenObj,\r\n                    idTokenClaims: idTokenObj.claims,\r\n                    accessToken: accessTokenCacheItem.value.accessToken,\r\n                    scopes: accessTokenCacheItem.key.scopes.split(\" \"),\r\n                    expiresOn: new Date(expired * 1000),\r\n                    account: account,\r\n                    accountState: aState,\r\n                    fromCache: true\r\n                };\r\n                ResponseUtils_1.ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                return response;\r\n            }\r\n            else {\r\n                this.cacheStorage.removeItem(JSON.stringify(filteredItems[0].key));\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to get a unique list of authorities from the cache\r\n     * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getUniqueAuthority = function (accessTokenCacheItems, property) {\r\n        var authorityList = [];\r\n        var flags = [];\r\n        accessTokenCacheItems.forEach(function (element) {\r\n            if (element.key.hasOwnProperty(property) && (flags.indexOf(element.key[property]) === -1)) {\r\n                flags.push(element.key[property]);\r\n                authorityList.push(element.key[property]);\r\n            }\r\n        });\r\n        return authorityList;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Check if ADAL id_token exists and return if exists.\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.extractADALIdToken = function () {\r\n        var adalIdToken = this.cacheStorage.getItem(Constants_1.Constants.adalIdToken);\r\n        if (!StringUtils_1.StringUtils.isEmpty(adalIdToken)) {\r\n            return TokenUtils_1.TokenUtils.extractIdToken(adalIdToken);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Acquires access token using a hidden iframe.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.renewToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\r\n        var scope = scopes.join(\" \").toLowerCase();\r\n        this.logger.verbose(\"renewToken is called for scope:\" + scope);\r\n        var frameName = \"msalRenewFrame\" + scope;\r\n        var frameHandle = WindowUtils_1.WindowUtils.addHiddenIFrame(frameName, this.logger);\r\n        this.updateCacheEntries(serverAuthenticationRequest, account);\r\n        this.logger.verbose(\"Renew token Expected state: \" + serverAuthenticationRequest.state);\r\n        // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\r\n        var urlNavigate = UrlUtils_1.UrlUtils.urlRemoveQueryStringParameter(UrlUtils_1.UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants_1.Constants.prompt) + Constants_1.Constants.prompt_none + Constants_1.Constants.response_mode_fragment;\r\n        window.renewStates.push(serverAuthenticationRequest.state);\r\n        window.requestType = Constants_1.Constants.renewToken;\r\n        this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\r\n        this.logger.infoPii(\"Navigate to:\" + urlNavigate);\r\n        frameHandle.src = \"about:blank\";\r\n        this.loadIframeTimeout(urlNavigate, frameName, scope).catch(function (error) { return reject(error); });\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Renews idtoken for app's own backend when clientId is passed as a single scope in the scopes array.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.renewIdToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\r\n        this.logger.info(\"renewidToken is called\");\r\n        var frameName = \"msalIdTokenFrame\";\r\n        var frameHandle = WindowUtils_1.WindowUtils.addHiddenIFrame(frameName, this.logger);\r\n        this.updateCacheEntries(serverAuthenticationRequest, account);\r\n        this.logger.verbose(\"Renew Idtoken Expected state: \" + serverAuthenticationRequest.state);\r\n        // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\r\n        var urlNavigate = UrlUtils_1.UrlUtils.urlRemoveQueryStringParameter(UrlUtils_1.UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants_1.Constants.prompt) + Constants_1.Constants.prompt_none + Constants_1.Constants.response_mode_fragment;\r\n        if (this.silentLogin) {\r\n            window.requestType = Constants_1.Constants.login;\r\n            this.silentAuthenticationState = serverAuthenticationRequest.state;\r\n        }\r\n        else {\r\n            window.requestType = Constants_1.Constants.renewToken;\r\n            window.renewStates.push(serverAuthenticationRequest.state);\r\n        }\r\n        // note: scope here is clientId\r\n        this.registerCallback(serverAuthenticationRequest.state, this.clientId, resolve, reject);\r\n        this.logger.infoPii(\"Navigate to:\" + urlNavigate);\r\n        frameHandle.src = \"about:blank\";\r\n        this.loadIframeTimeout(urlNavigate, frameName, this.clientId).catch(function (error) { return reject(error); });\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.\r\n     * @param {string} authority authority received in the redirect response from AAD.\r\n     * @param {TokenResponse} requestInfo an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @param {Account} account account object for which scopes are consented for. The default account is the logged in account.\r\n     * @param {ClientInfo} clientInfo clientInfo received as part of the response comprising of fields uid and utid.\r\n     * @param {IdToken} idToken idToken received as part of the response.\r\n     * @ignore\r\n     * @private\r\n     */\r\n    /* tslint:disable:no-string-literal */\r\n    UserAgentApplication.prototype.saveAccessToken = function (response, authority, parameters, clientInfo, idTokenObj) {\r\n        var scope;\r\n        var accessTokenResponse = tslib_1.__assign({}, response);\r\n        var clientObj = new ClientInfo_1.ClientInfo(clientInfo);\r\n        var expiration;\r\n        // if the response contains \"scope\"\r\n        if (parameters.hasOwnProperty(Constants_1.ServerHashParamKeys.SCOPE)) {\r\n            // read the scopes\r\n            scope = parameters[Constants_1.ServerHashParamKeys.SCOPE];\r\n            var consentedScopes = scope.split(\" \");\r\n            // retrieve all access tokens from the cache, remove the dup scores\r\n            var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);\r\n            for (var i = 0; i < accessTokenCacheItems.length; i++) {\r\n                var accessTokenCacheItem = accessTokenCacheItems[i];\r\n                if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {\r\n                    var cachedScopes = accessTokenCacheItem.key.scopes.split(\" \");\r\n                    if (ScopeSet_1.ScopeSet.isIntersectingScopes(cachedScopes, consentedScopes)) {\r\n                        this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));\r\n                    }\r\n                }\r\n            }\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            var expiresIn = TimeUtils_1.TimeUtils.parseExpiresIn(parameters[Constants_1.ServerHashParamKeys.EXPIRES_IN]);\r\n            expiration = TimeUtils_1.TimeUtils.now() + expiresIn;\r\n            var accessTokenKey = new AccessTokenKey_1.AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            var accessTokenValue = new AccessTokenValue_1.AccessTokenValue(parameters[Constants_1.ServerHashParamKeys.ACCESS_TOKEN], idTokenObj.rawIdToken, expiration.toString(), clientInfo);\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n            accessTokenResponse.accessToken = parameters[Constants_1.ServerHashParamKeys.ACCESS_TOKEN];\r\n            accessTokenResponse.scopes = consentedScopes;\r\n        }\r\n        // if the response does not contain \"scope\" - scope is usually client_id and the token will be id_token\r\n        else {\r\n            scope = this.clientId;\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            var accessTokenKey = new AccessTokenKey_1.AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            expiration = Number(idTokenObj.expiration);\r\n            var accessTokenValue = new AccessTokenValue_1.AccessTokenValue(parameters[Constants_1.ServerHashParamKeys.ID_TOKEN], parameters[Constants_1.ServerHashParamKeys.ID_TOKEN], expiration.toString(), clientInfo);\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n            accessTokenResponse.scopes = [scope];\r\n            accessTokenResponse.accessToken = parameters[Constants_1.ServerHashParamKeys.ID_TOKEN];\r\n        }\r\n        if (expiration) {\r\n            accessTokenResponse.expiresOn = new Date(expiration * 1000);\r\n        }\r\n        else {\r\n            this.logger.error(\"Could not parse expiresIn parameter\");\r\n        }\r\n        return accessTokenResponse;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.saveTokenFromHash = function (hash, stateInfo) {\r\n        this.logger.info(\"State status:\" + stateInfo.stateMatch + \"; Request type:\" + stateInfo.requestType);\r\n        var response = {\r\n            uniqueId: \"\",\r\n            tenantId: \"\",\r\n            tokenType: \"\",\r\n            idToken: null,\r\n            idTokenClaims: null,\r\n            accessToken: null,\r\n            scopes: [],\r\n            expiresOn: null,\r\n            account: null,\r\n            accountState: \"\",\r\n            fromCache: false\r\n        };\r\n        var error;\r\n        var hashParams = UrlUtils_1.UrlUtils.deserializeHash(hash);\r\n        var authorityKey = \"\";\r\n        var acquireTokenAccountKey = \"\";\r\n        var idTokenObj = null;\r\n        // If server returns an error\r\n        if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION) || hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.ERROR)) {\r\n            this.logger.infoPii(\"Error :\" + hashParams[Constants_1.ServerHashParamKeys.ERROR] + \"; Error description:\" + hashParams[Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR, hashParams[Constants_1.ServerHashParamKeys.ERROR]);\r\n            this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR_DESC, hashParams[Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            // login\r\n            if (stateInfo.requestType === Constants_1.Constants.login) {\r\n                this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.LOGIN_ERROR, hashParams[Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION] + \":\" + hashParams[Constants_1.ServerHashParamKeys.ERROR]);\r\n                authorityKey = AuthCache_1.AuthCache.generateAuthorityKey(stateInfo.state);\r\n            }\r\n            // acquireToken\r\n            if (stateInfo.requestType === Constants_1.Constants.renewToken) {\r\n                authorityKey = AuthCache_1.AuthCache.generateAuthorityKey(stateInfo.state);\r\n                var account = this.getAccount();\r\n                var accountId = void 0;\r\n                if (account && !StringUtils_1.StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n                    accountId = account.homeAccountIdentifier;\r\n                }\r\n                else {\r\n                    accountId = Constants_1.Constants.no_account;\r\n                }\r\n                acquireTokenAccountKey = AuthCache_1.AuthCache.generateAcquireTokenAccountKey(accountId, stateInfo.state);\r\n            }\r\n            var _a = Constants_1.ServerHashParamKeys.ERROR, hashErr = hashParams[_a], _b = Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION, hashErrDesc = hashParams[_b];\r\n            if (InteractionRequiredAuthError_1.InteractionRequiredAuthError.isInteractionRequiredError(hashErr) ||\r\n                InteractionRequiredAuthError_1.InteractionRequiredAuthError.isInteractionRequiredError(hashErrDesc)) {\r\n                error = new InteractionRequiredAuthError_1.InteractionRequiredAuthError(hashParams[Constants_1.ServerHashParamKeys.ERROR], hashParams[Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            }\r\n            else {\r\n                error = new ServerError_1.ServerError(hashParams[Constants_1.ServerHashParamKeys.ERROR], hashParams[Constants_1.ServerHashParamKeys.ERROR_DESCRIPTION]);\r\n            }\r\n        }\r\n        // If the server returns \"Success\"\r\n        else {\r\n            // Verify the state from redirect and record tokens to storage if exists\r\n            if (stateInfo.stateMatch) {\r\n                this.logger.info(\"State is right\");\r\n                if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.SESSION_STATE)) {\r\n                    this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.SESSION_STATE + Constants_1.Constants.resourceDelimiter + stateInfo.state, hashParams[Constants_1.ServerHashParamKeys.SESSION_STATE]);\r\n                }\r\n                response.accountState = this.getAccountState(stateInfo.state);\r\n                var clientInfo = \"\";\r\n                // Process access_token\r\n                if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.ACCESS_TOKEN)) {\r\n                    this.logger.info(\"Fragment has access token\");\r\n                    // retrieve the id_token from response if present\r\n                    if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.ID_TOKEN)) {\r\n                        idTokenObj = new IdToken_1.IdToken(hashParams[Constants_1.ServerHashParamKeys.ID_TOKEN]);\r\n                        response.idToken = idTokenObj;\r\n                        response.idTokenClaims = idTokenObj.claims;\r\n                    }\r\n                    else {\r\n                        idTokenObj = new IdToken_1.IdToken(this.cacheStorage.getItem(Constants_1.PersistentCacheKeys.IDTOKEN));\r\n                        response = ResponseUtils_1.ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    }\r\n                    // set authority\r\n                    var authority = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);\r\n                    // retrieve client_info - if it is not found, generate the uid and utid from idToken\r\n                    if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.CLIENT_INFO)) {\r\n                        clientInfo = hashParams[Constants_1.ServerHashParamKeys.CLIENT_INFO];\r\n                    }\r\n                    else {\r\n                        this.logger.warning(\"ClientInfo not received in the response from AAD\");\r\n                        throw ClientAuthError_1.ClientAuthError.createClientInfoNotPopulatedError(\"ClientInfo not received in the response from the server\");\r\n                    }\r\n                    response.account = Account_1.Account.createAccount(idTokenObj, new ClientInfo_1.ClientInfo(clientInfo));\r\n                    var accountKey = void 0;\r\n                    if (response.account && !StringUtils_1.StringUtils.isEmpty(response.account.homeAccountIdentifier)) {\r\n                        accountKey = response.account.homeAccountIdentifier;\r\n                    }\r\n                    else {\r\n                        accountKey = Constants_1.Constants.no_account;\r\n                    }\r\n                    acquireTokenAccountKey = AuthCache_1.AuthCache.generateAcquireTokenAccountKey(accountKey, stateInfo.state);\r\n                    var acquireTokenAccountKey_noaccount = AuthCache_1.AuthCache.generateAcquireTokenAccountKey(Constants_1.Constants.no_account, stateInfo.state);\r\n                    var cachedAccount = this.cacheStorage.getItem(acquireTokenAccountKey);\r\n                    var acquireTokenAccount = void 0;\r\n                    // Check with the account in the Cache\r\n                    if (!StringUtils_1.StringUtils.isEmpty(cachedAccount)) {\r\n                        acquireTokenAccount = JSON.parse(cachedAccount);\r\n                        if (response.account && acquireTokenAccount && Account_1.Account.compareAccounts(response.account, acquireTokenAccount)) {\r\n                            response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                            this.logger.info(\"The user object received in the response is the same as the one passed in the acquireToken request\");\r\n                        }\r\n                        else {\r\n                            this.logger.warning(\"The account object created from the response is not the same as the one passed in the acquireToken request\");\r\n                        }\r\n                    }\r\n                    else if (!StringUtils_1.StringUtils.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {\r\n                        response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                    }\r\n                }\r\n                // Process id_token\r\n                if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.ID_TOKEN)) {\r\n                    this.logger.info(\"Fragment has id token\");\r\n                    // set the idToken\r\n                    idTokenObj = new IdToken_1.IdToken(hashParams[Constants_1.ServerHashParamKeys.ID_TOKEN]);\r\n                    response = ResponseUtils_1.ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    if (hashParams.hasOwnProperty(Constants_1.ServerHashParamKeys.CLIENT_INFO)) {\r\n                        clientInfo = hashParams[Constants_1.ServerHashParamKeys.CLIENT_INFO];\r\n                    }\r\n                    else {\r\n                        this.logger.warning(\"ClientInfo not received in the response from AAD\");\r\n                    }\r\n                    // set authority\r\n                    var authority = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);\r\n                    this.account = Account_1.Account.createAccount(idTokenObj, new ClientInfo_1.ClientInfo(clientInfo));\r\n                    response.account = this.account;\r\n                    if (idTokenObj && idTokenObj.nonce) {\r\n                        // check nonce integrity if idToken has nonce - throw an error if not matched\r\n                        if (idTokenObj.nonce !== this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie)) {\r\n                            this.account = null;\r\n                            this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.LOGIN_ERROR, \"Nonce Mismatch. Expected Nonce: \" + this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\r\n                            this.logger.error(\"Nonce Mismatch.Expected Nonce: \" + this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\r\n                            error = ClientAuthError_1.ClientAuthError.createNonceMismatchError(this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie), idTokenObj.nonce);\r\n                        }\r\n                        // Save the token\r\n                        else {\r\n                            this.cacheStorage.setItem(Constants_1.PersistentCacheKeys.IDTOKEN, hashParams[Constants_1.ServerHashParamKeys.ID_TOKEN]);\r\n                            this.cacheStorage.setItem(Constants_1.PersistentCacheKeys.CLIENT_INFO, clientInfo);\r\n                            // Save idToken as access token for app itself\r\n                            this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                        }\r\n                    }\r\n                    else {\r\n                        authorityKey = stateInfo.state;\r\n                        acquireTokenAccountKey = stateInfo.state;\r\n                        this.logger.error(\"Invalid id_token received in the response\");\r\n                        error = ClientAuthError_1.ClientAuthError.createInvalidIdTokenError(idTokenObj);\r\n                        this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR, error.errorCode);\r\n                        this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR_DESC, error.errorMessage);\r\n                    }\r\n                }\r\n            }\r\n            // State mismatch - unexpected/invalid state\r\n            else {\r\n                authorityKey = stateInfo.state;\r\n                acquireTokenAccountKey = stateInfo.state;\r\n                var expectedState = this.cacheStorage.getItem(\"\" + Constants_1.TemporaryCacheKeys.STATE_LOGIN + Constants_1.Constants.resourceDelimiter + stateInfo.state, this.inCookie);\r\n                this.logger.error(\"State Mismatch.Expected State: \" + expectedState + \",\" + \"Actual State: \" + stateInfo.state);\r\n                error = ClientAuthError_1.ClientAuthError.createInvalidStateError(stateInfo.state, expectedState);\r\n                this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR, error.errorCode);\r\n                this.cacheStorage.setItem(Constants_1.ErrorCacheKeys.ERROR_DESC, error.errorMessage);\r\n            }\r\n        }\r\n        // Set status to completed\r\n        this.cacheStorage.removeItem(\"\" + Constants_1.TemporaryCacheKeys.RENEW_STATUS + Constants_1.Constants.resourceDelimiter + stateInfo.state);\r\n        this.cacheStorage.resetTempCacheItems(stateInfo.state);\r\n        // this is required if navigateToLoginRequestUrl=false\r\n        if (this.inCookie) {\r\n            this.cacheStorage.setItemCookie(authorityKey, \"\", -1);\r\n            this.cacheStorage.clearMsalCookie(stateInfo.state);\r\n        }\r\n        if (error) {\r\n            // Error case, set status to cancelled\r\n            throw error;\r\n        }\r\n        if (!response) {\r\n            throw AuthError_1.AuthError.createUnexpectedError(\"Response is null\");\r\n        }\r\n        return response;\r\n    };\r\n    /**\r\n     * Set Authority when saving Token from the hash\r\n     * @param state\r\n     * @param inCookie\r\n     * @param cacheStorage\r\n     * @param idTokenObj\r\n     * @param response\r\n     */\r\n    UserAgentApplication.prototype.populateAuthority = function (state, inCookie, cacheStorage, idTokenObj) {\r\n        var authorityKey = AuthCache_1.AuthCache.generateAuthorityKey(state);\r\n        var cachedAuthority = cacheStorage.getItem(authorityKey, inCookie);\r\n        // retrieve the authority from cache and replace with tenantID\r\n        return StringUtils_1.StringUtils.isEmpty(cachedAuthority) ? cachedAuthority : UrlUtils_1.UrlUtils.replaceTenantPath(cachedAuthority, idTokenObj.tenantId);\r\n    };\r\n    /* tslint:enable:no-string-literal */\r\n    // #endregion\r\n    // #region Account\r\n    /**\r\n     * Returns the signed in account\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no state is found\r\n     * @returns {@link Account} - the account object stored in MSAL\r\n     */\r\n    UserAgentApplication.prototype.getAccount = function () {\r\n        // if a session already exists, get the account from the session\r\n        if (this.account) {\r\n            return this.account;\r\n        }\r\n        // frame is used to get idToken and populate the account for the given session\r\n        var rawIdToken = this.cacheStorage.getItem(Constants_1.PersistentCacheKeys.IDTOKEN);\r\n        var rawClientInfo = this.cacheStorage.getItem(Constants_1.PersistentCacheKeys.CLIENT_INFO);\r\n        if (!StringUtils_1.StringUtils.isEmpty(rawIdToken) && !StringUtils_1.StringUtils.isEmpty(rawClientInfo)) {\r\n            var idToken = new IdToken_1.IdToken(rawIdToken);\r\n            var clientInfo = new ClientInfo_1.ClientInfo(rawClientInfo);\r\n            this.account = Account_1.Account.createAccount(idToken, clientInfo);\r\n            return this.account;\r\n        }\r\n        // if login not yet done, return null\r\n        return null;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts state value from the accountState sent with the authentication request.\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getAccountState = function (state) {\r\n        if (state) {\r\n            var splitIndex = state.indexOf(\"|\");\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return state;\r\n    };\r\n    /**\r\n     * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.\r\n     *\r\n     * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.\r\n     */\r\n    UserAgentApplication.prototype.getAllAccounts = function () {\r\n        var accounts = [];\r\n        var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants_1.Constants.clientId, Constants_1.Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenCacheItems.length; i++) {\r\n            var idToken = new IdToken_1.IdToken(accessTokenCacheItems[i].value.idToken);\r\n            var clientInfo = new ClientInfo_1.ClientInfo(accessTokenCacheItems[i].value.homeAccountIdentifier);\r\n            var account = Account_1.Account.createAccount(idToken, clientInfo);\r\n            accounts.push(account);\r\n        }\r\n        return this.getUniqueAccounts(accounts);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to filter accounts based on homeAccountIdentifier\r\n     * @param {Array<Account>}  Accounts - accounts saved in the cache\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getUniqueAccounts = function (accounts) {\r\n        if (!accounts || accounts.length <= 1) {\r\n            return accounts;\r\n        }\r\n        var flags = [];\r\n        var uniqueAccounts = [];\r\n        for (var index = 0; index < accounts.length; ++index) {\r\n            if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {\r\n                flags.push(accounts[index].homeAccountIdentifier);\r\n                uniqueAccounts.push(accounts[index]);\r\n            }\r\n        }\r\n        return uniqueAccounts;\r\n    };\r\n    // #endregion\r\n    // #region Angular\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Broadcast messages - Used only for Angular?  *\r\n     * @param eventName\r\n     * @param data\r\n     */\r\n    UserAgentApplication.prototype.broadcast = function (eventName, data) {\r\n        var evt = new CustomEvent(eventName, { detail: data });\r\n        window.dispatchEvent(evt);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Helper function to retrieve the cached token\r\n     *\r\n     * @param scopes\r\n     * @param {@link Account} account\r\n     * @param state\r\n     * @return {@link AuthResponse} AuthResponse\r\n     */\r\n    UserAgentApplication.prototype.getCachedTokenInternal = function (scopes, account, state, correlationId) {\r\n        // Get the current session's account object\r\n        var accountObject = account || this.getAccount();\r\n        if (!accountObject) {\r\n            return null;\r\n        }\r\n        // Construct AuthenticationRequest based on response type; set \"redirectUri\" from the \"request\" which makes this call from Angular - for this.getRedirectUri()\r\n        var newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory_1.AuthorityFactory.CreateInstance(this.authority, this.config.auth.validateAuthority);\r\n        var responseType = this.getTokenType(accountObject, scopes, true);\r\n        var serverAuthenticationRequest = new ServerRequestParameters_1.ServerRequestParameters(newAuthority, this.clientId, responseType, this.getRedirectUri(), scopes, state, correlationId);\r\n        // get cached token\r\n        return this.getCachedToken(serverAuthenticationRequest, account);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app\r\n     * Note: Please check if we need to set the \"redirectUri\" from the \"request\" which makes this call from Angular - for this.getRedirectUri()\r\n     *\r\n     * @param endpoint\r\n     */\r\n    UserAgentApplication.prototype.getScopesForEndpoint = function (endpoint) {\r\n        // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\r\n        if (this.config.framework.unprotectedResources.length > 0) {\r\n            for (var i = 0; i < this.config.framework.unprotectedResources.length; i++) {\r\n                if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        // process all protected resources and send the matched one\r\n        if (this.config.framework.protectedResourceMap.size > 0) {\r\n            for (var _i = 0, _a = Array.from(this.config.framework.protectedResourceMap.keys()); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1\r\n                if (endpoint.indexOf(key) > -1) {\r\n                    return this.config.framework.protectedResourceMap.get(key);\r\n                }\r\n            }\r\n        }\r\n        /*\r\n         * default resource will be clientid if nothing specified\r\n         * App will use idtoken for calls to itself\r\n         * check if it's staring from http or https, needs to match with app host\r\n         */\r\n        if (endpoint.indexOf(\"http://\") > -1 || endpoint.indexOf(\"https://\") > -1) {\r\n            if (UrlUtils_1.UrlUtils.getHostFromUri(endpoint) === UrlUtils_1.UrlUtils.getHostFromUri(this.getRedirectUri())) {\r\n                return new Array(this.clientId);\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * in angular level, the url for $http interceptor call could be relative url,\r\n             * if it's relative call, we'll treat it as app backend call.\r\n             */\r\n            return new Array(this.clientId);\r\n        }\r\n        // if not the app's own backend or not a domain listed in the endpoints structure\r\n        return null;\r\n    };\r\n    /**\r\n     * Return boolean flag to developer to help inform if login is in progress\r\n     * @returns {boolean} true/false\r\n     */\r\n    UserAgentApplication.prototype.getLoginInProgress = function () {\r\n        var pendingCallback = this.cacheStorage.getItem(Constants_1.TemporaryCacheKeys.URL_HASH);\r\n        if (pendingCallback) {\r\n            return true;\r\n        }\r\n        return this.cacheStorage.getItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS) === Constants_1.Constants.inProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param loginInProgress\r\n     */\r\n    UserAgentApplication.prototype.setInteractionInProgress = function (inProgress) {\r\n        if (inProgress) {\r\n            this.cacheStorage.setItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS, Constants_1.Constants.inProgress);\r\n        }\r\n        else {\r\n            this.cacheStorage.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param loginInProgress\r\n     */\r\n    UserAgentApplication.prototype.setloginInProgress = function (loginInProgress) {\r\n        this.setInteractionInProgress(loginInProgress);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the status of acquireTokenInProgress\r\n     */\r\n    UserAgentApplication.prototype.getAcquireTokenInProgress = function () {\r\n        return this.cacheStorage.getItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS) === Constants_1.Constants.inProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param acquireTokenInProgress\r\n     */\r\n    UserAgentApplication.prototype.setAcquireTokenInProgress = function (acquireTokenInProgress) {\r\n        this.setInteractionInProgress(acquireTokenInProgress);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the logger handle\r\n     */\r\n    UserAgentApplication.prototype.getLogger = function () {\r\n        return this.config.system.logger;\r\n    };\r\n    // #endregion\r\n    // #region Getters and Setters\r\n    /**\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} redirect URL\r\n     */\r\n    UserAgentApplication.prototype.getRedirectUri = function (reqRedirectUri) {\r\n        if (reqRedirectUri) {\r\n            return reqRedirectUri;\r\n        }\r\n        else if (typeof this.config.auth.redirectUri === \"function\") {\r\n            return this.config.auth.redirectUri();\r\n        }\r\n        return this.config.auth.redirectUri;\r\n    };\r\n    /**\r\n     * Use to get the post logout redirect uri configured in MSAL or null.\r\n     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} post logout redirect URL\r\n     */\r\n    UserAgentApplication.prototype.getPostLogoutRedirectUri = function () {\r\n        if (typeof this.config.auth.postLogoutRedirectUri === \"function\") {\r\n            return this.config.auth.postLogoutRedirectUri();\r\n        }\r\n        return this.config.auth.postLogoutRedirectUri;\r\n    };\r\n    /**\r\n     * Use to get the current {@link Configuration} object in MSAL\r\n     *\r\n     * @returns {@link Configuration}\r\n     */\r\n    UserAgentApplication.prototype.getCurrentConfiguration = function () {\r\n        if (!this.config) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createNoSetConfigurationError();\r\n        }\r\n        return this.config;\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Utils function to create the Authentication\r\n     * @param {@link account} account object\r\n     * @param scopes\r\n     * @param silentCall\r\n     *\r\n     * @returns {string} token type: id_token or access_token\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.getTokenType = function (accountObject, scopes, silentCall) {\r\n        /*\r\n         * if account is passed and matches the account object/or set to getAccount() from cache\r\n         * if client-id is passed as scope, get id_token else token/id_token_token (in case no session exists)\r\n         */\r\n        var tokenType;\r\n        // acquireTokenSilent\r\n        if (silentCall) {\r\n            if (Account_1.Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n            else {\r\n                tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.id_token_token;\r\n            }\r\n            return tokenType;\r\n        }\r\n        // all other cases\r\n        else {\r\n            if (!Account_1.Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = ResponseTypes.id_token_token;\r\n            }\r\n            else {\r\n                tokenType = (scopes.indexOf(this.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n            return tokenType;\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cachekeys for and stores the account information in cache\r\n     * @param account\r\n     * @param state\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.setAccountCache = function (account, state) {\r\n        // Cache acquireTokenAccountKey\r\n        var accountId = account ? this.getAccountId(account) : Constants_1.Constants.no_account;\r\n        var acquireTokenAccountKey = AuthCache_1.AuthCache.generateAcquireTokenAccountKey(accountId, state);\r\n        this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cacheKey for and stores the authority information in cache\r\n     * @param state\r\n     * @param authority\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.setAuthorityCache = function (state, authority) {\r\n        // Cache authorityKey\r\n        var authorityKey = AuthCache_1.AuthCache.generateAuthorityKey(state);\r\n        this.cacheStorage.setItem(authorityKey, UrlUtils_1.UrlUtils.CanonicalizeUri(authority), this.inCookie);\r\n    };\r\n    /**\r\n     * Updates account, authority, and nonce in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.updateCacheEntries = function (serverAuthenticationRequest, account, loginStartPage) {\r\n        // Cache account and authority\r\n        if (loginStartPage) {\r\n            // Cache the state, nonce, and login request data\r\n            this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.LOGIN_REQUEST + Constants_1.Constants.resourceDelimiter + serverAuthenticationRequest.state, loginStartPage, this.inCookie);\r\n            this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.STATE_LOGIN + Constants_1.Constants.resourceDelimiter + serverAuthenticationRequest.state, serverAuthenticationRequest.state, this.inCookie);\r\n        }\r\n        else {\r\n            this.setAccountCache(account, serverAuthenticationRequest.state);\r\n        }\r\n        // Cache authorityKey\r\n        this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority);\r\n        // Cache nonce\r\n        this.cacheStorage.setItem(\"\" + Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + Constants_1.Constants.resourceDelimiter + serverAuthenticationRequest.state, serverAuthenticationRequest.nonce, this.inCookie);\r\n    };\r\n    /**\r\n     * Returns the unique identifier for the logged in account\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getAccountId = function (account) {\r\n        // return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;\r\n        var accountId;\r\n        if (!StringUtils_1.StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n            accountId = account.homeAccountIdentifier;\r\n        }\r\n        else {\r\n            accountId = Constants_1.Constants.no_account;\r\n        }\r\n        return accountId;\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @param extraQueryParameters\r\n     *\r\n     * Construct 'tokenRequest' from the available data in adalIdToken\r\n     */\r\n    UserAgentApplication.prototype.buildIDTokenRequest = function (request) {\r\n        var tokenRequest = {\r\n            scopes: [this.clientId],\r\n            authority: this.authority,\r\n            account: this.getAccount(),\r\n            extraQueryParameters: request.extraQueryParameters\r\n        };\r\n        return tokenRequest;\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @param config\r\n     * @param clientId\r\n     *\r\n     * Construct TelemetryManager from Configuration\r\n     */\r\n    UserAgentApplication.prototype.getTelemetryManagerFromConfig = function (config, clientId) {\r\n        if (!config) { // if unset\r\n            return null;\r\n        }\r\n        // if set then validate\r\n        var applicationName = config.applicationName, applicationVersion = config.applicationVersion, telemetryEmitter = config.telemetryEmitter;\r\n        if (!applicationName || !applicationVersion || !telemetryEmitter) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createTelemetryConfigError(config);\r\n        }\r\n        // if valid then construct\r\n        var telemetryPlatform = {\r\n            sdk: \"msal.js\",\r\n            sdkVersion: Constants_1.libraryVersion(),\r\n            applicationName: applicationName,\r\n            applicationVersion: applicationVersion\r\n        };\r\n        var telemetryManagerConfig = {\r\n            platform: telemetryPlatform,\r\n            clientId: clientId\r\n        };\r\n        return new TelemetryManager_1.default(telemetryManagerConfig, telemetryEmitter);\r\n    };\r\n    return UserAgentApplication;\r\n}());\r\nexports.UserAgentApplication = UserAgentApplication;\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar StringUtils_1 = __webpack_require__(1);\r\n/**\r\n * @hidden\r\n */\r\nvar TokenUtils = /** @class */ (function () {\r\n    function TokenUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param jwtToken\r\n     */\r\n    TokenUtils.decodeJwt = function (jwtToken) {\r\n        if (StringUtils_1.StringUtils.isEmpty(jwtToken)) {\r\n            return null;\r\n        }\r\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = idTokenPartsRegex.exec(jwtToken);\r\n        if (!matches || matches.length < 4) {\r\n            // this._requestContext.logger.warn(\"The returned id_token is not parseable.\");\r\n            return null;\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Extract IdToken by decoding the RAWIdToken\r\n     *\r\n     * @param encodedIdToken\r\n     */\r\n    TokenUtils.extractIdToken = function (encodedIdToken) {\r\n        // id token will be decoded to get the username\r\n        var decodedToken = this.decodeJwt(encodedIdToken);\r\n        if (!decodedToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            var base64IdToken = decodedToken.JWSPayload;\r\n            var base64Decoded = CryptoUtils_1.CryptoUtils.base64Decode(base64IdToken);\r\n            if (!base64Decoded) {\r\n                // this._requestContext.logger.info(\"The returned id_token could not be base64 url safe decoded.\");\r\n                return null;\r\n            }\r\n            // ECMA script has JSON built-in support\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            // this._requestContext.logger.error(\"The returned id_token could not be decoded\" + err);\r\n        }\r\n        return null;\r\n    };\r\n    return TokenUtils;\r\n}());\r\nexports.TokenUtils = TokenUtils;\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar StringUtils_1 = __webpack_require__(1);\r\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\r\nvar Account = /** @class */ (function () {\r\n    /**\r\n     * Creates an Account Object\r\n     * @praram accountIdentifier\r\n     * @param homeAccountIdentifier\r\n     * @param userName\r\n     * @param name\r\n     * @param idToken\r\n     * @param sid\r\n     * @param environment\r\n     */\r\n    function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\r\n        this.accountIdentifier = accountIdentifier;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n        this.userName = userName;\r\n        this.name = name;\r\n        // will be deprecated soon\r\n        this.idToken = idTokenClaims;\r\n        this.idTokenClaims = idTokenClaims;\r\n        this.sid = sid;\r\n        this.environment = environment;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * @param idToken\r\n     * @param clientInfo\r\n     */\r\n    Account.createAccount = function (idToken, clientInfo) {\r\n        // create accountIdentifier\r\n        var accountIdentifier = idToken.objectId || idToken.subject;\r\n        // create homeAccountIdentifier\r\n        var uid = clientInfo ? clientInfo.uid : \"\";\r\n        var utid = clientInfo ? clientInfo.utid : \"\";\r\n        var homeAccountIdentifier;\r\n        if (!StringUtils_1.StringUtils.isEmpty(uid) && !StringUtils_1.StringUtils.isEmpty(utid)) {\r\n            homeAccountIdentifier = CryptoUtils_1.CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils_1.CryptoUtils.base64Encode(utid);\r\n        }\r\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\r\n    };\r\n    /**\r\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n     *\r\n     * @param a1: Account object\r\n     * @param a2: Account object\r\n     */\r\n    Account.compareAccounts = function (a1, a2) {\r\n        if (!a1 || !a2) {\r\n            return false;\r\n        }\r\n        if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\r\n            if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return Account;\r\n}());\r\nexports.Account = Account;\r\n\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar Authority_1 = __webpack_require__(8);\r\nvar XHRClient_1 = __webpack_require__(17);\r\nvar Constants_1 = __webpack_require__(3);\r\n/**\r\n * @hidden\r\n */\r\nvar AadAuthority = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AadAuthority, _super);\r\n    function AadAuthority(authority, validateAuthority) {\r\n        return _super.call(this, authority, validateAuthority) || this;\r\n    }\r\n    Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\r\n        get: function () {\r\n            return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return Authority_1.AuthorityType.Aad;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\r\n            var client;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n                    return [2 /*return*/, this.DefaultOpenIdConfigurationEndpoint];\r\n                }\r\n                client = new XHRClient_1.XhrClient();\r\n                return [2 /*return*/, client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true)\r\n                        .then(function (response) {\r\n                        return response.tenant_discovery_endpoint;\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    AadAuthority.prototype.IsInTrustedHostList = function (host) {\r\n        return Constants_1.AADTrustedHostList[host.toLowerCase()];\r\n    };\r\n    AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\r\n    return AadAuthority;\r\n}(Authority_1.Authority));\r\nexports.AadAuthority = AadAuthority;\r\n\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            if (enableCaching) {\r\n                /*\r\n                 * TODO: (shivb) ensure that this can be cached\r\n                 * xhr.setRequestHeader(\"Cache-Control\", \"Public\");\r\n                 */\r\n            }\r\n            xhr.onload = function (ev) {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                var jsonResponse;\r\n                try {\r\n                    jsonResponse = JSON.parse(xhr.responseText);\r\n                }\r\n                catch (e) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                resolve(jsonResponse);\r\n            };\r\n            xhr.onerror = function (ev) {\r\n                reject(xhr.status);\r\n            };\r\n            if (method === \"GET\") {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw \"not implemented\";\r\n            }\r\n        });\r\n    };\r\n    XhrClient.prototype.handleError = function (responseText) {\r\n        var jsonResponse;\r\n        try {\r\n            jsonResponse = JSON.parse(responseText);\r\n            if (jsonResponse.error) {\r\n                return jsonResponse.error;\r\n            }\r\n            else {\r\n                throw responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return responseText;\r\n        }\r\n    };\r\n    return XhrClient;\r\n}());\r\nexports.XhrClient = XhrClient;\r\n\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar AadAuthority_1 = __webpack_require__(16);\r\nvar Authority_1 = __webpack_require__(8);\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\n/**\r\n * @hidden\r\n */\r\nvar B2cAuthority = /** @class */ (function (_super) {\r\n    tslib_1.__extends(B2cAuthority, _super);\r\n    function B2cAuthority(authority, validateAuthority) {\r\n        var _this = _super.call(this, authority, validateAuthority) || this;\r\n        var urlComponents = UrlUtils_1.UrlUtils.GetUrlComponents(authority);\r\n        var pathSegments = urlComponents.PathSegments;\r\n        if (pathSegments.length < 3) {\r\n            throw ClientConfigurationError_1.ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;\r\n        }\r\n        _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return Authority_1.AuthorityType.B2C;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n                    return [2 /*return*/, this.DefaultOpenIdConfigurationEndpoint];\r\n                }\r\n                throw ClientConfigurationError_1.ClientConfigurationErrorMessage.unsupportedAuthorityValidation;\r\n            });\r\n        });\r\n    };\r\n    B2cAuthority.B2C_PREFIX = \"tfp\";\r\n    return B2cAuthority;\r\n}(AadAuthority_1.AadAuthority));\r\nexports.B2cAuthority = B2cAuthority;\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar Logger_1 = __webpack_require__(11);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\n/**\r\n * Defaults for the Configuration Options\r\n */\r\nvar FRAME_TIMEOUT = 6000;\r\nvar OFFSET = 300;\r\nvar NAVIGATE_FRAME_WAIT = 500;\r\nvar DEFAULT_AUTH_OPTIONS = {\r\n    clientId: \"\",\r\n    authority: null,\r\n    validateAuthority: true,\r\n    redirectUri: function () { return UrlUtils_1.UrlUtils.getDefaultRedirectUri(); },\r\n    postLogoutRedirectUri: function () { return UrlUtils_1.UrlUtils.getDefaultRedirectUri(); },\r\n    navigateToLoginRequestUrl: true\r\n};\r\nvar DEFAULT_CACHE_OPTIONS = {\r\n    cacheLocation: \"sessionStorage\",\r\n    storeAuthStateInCookie: false\r\n};\r\nvar DEFAULT_SYSTEM_OPTIONS = {\r\n    logger: new Logger_1.Logger(null),\r\n    loadFrameTimeout: FRAME_TIMEOUT,\r\n    tokenRenewalOffsetSeconds: OFFSET,\r\n    navigateFrameWait: NAVIGATE_FRAME_WAIT\r\n};\r\nvar DEFAULT_FRAMEWORK_OPTIONS = {\r\n    isAngular: false,\r\n    unprotectedResources: new Array(),\r\n    protectedResourceMap: new Map()\r\n};\r\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TAuthOptions\r\n * @param TCacheOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n *\r\n * @returns TConfiguration object\r\n */\r\nfunction buildConfiguration(_a) {\r\n    var auth = _a.auth, _b = _a.cache, cache = _b === void 0 ? {} : _b, _c = _a.system, system = _c === void 0 ? {} : _c, _d = _a.framework, framework = _d === void 0 ? {} : _d;\r\n    var overlayedConfig = {\r\n        auth: tslib_1.__assign({}, DEFAULT_AUTH_OPTIONS, auth),\r\n        cache: tslib_1.__assign({}, DEFAULT_CACHE_OPTIONS, cache),\r\n        system: tslib_1.__assign({}, DEFAULT_SYSTEM_OPTIONS, system),\r\n        framework: tslib_1.__assign({}, DEFAULT_FRAMEWORK_OPTIONS, framework)\r\n    };\r\n    return overlayedConfig;\r\n}\r\nexports.buildConfiguration = buildConfiguration;\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar ServerError_1 = __webpack_require__(12);\r\nexports.InteractionRequiredAuthErrorMessage = {\r\n    interactionRequired: {\r\n        code: \"interaction_required\"\r\n    },\r\n    consentRequired: {\r\n        code: \"consent_required\"\r\n    },\r\n    loginRequired: {\r\n        code: \"login_required\"\r\n    },\r\n};\r\n/**\r\n * Error thrown when the user is required to perform an interactive token request.\r\n */\r\nvar InteractionRequiredAuthError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InteractionRequiredAuthError, _super);\r\n    function InteractionRequiredAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"InteractionRequiredAuthError\";\r\n        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\r\n        return _this;\r\n    }\r\n    InteractionRequiredAuthError.isInteractionRequiredError = function (errorString) {\r\n        var interactionRequiredCodes = [\r\n            exports.InteractionRequiredAuthErrorMessage.interactionRequired.code,\r\n            exports.InteractionRequiredAuthErrorMessage.consentRequired.code,\r\n            exports.InteractionRequiredAuthErrorMessage.loginRequired.code\r\n        ];\r\n        return errorString && interactionRequiredCodes.indexOf(errorString) > -1;\r\n    };\r\n    InteractionRequiredAuthError.createLoginRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(exports.InteractionRequiredAuthErrorMessage.loginRequired.code, errorDesc);\r\n    };\r\n    InteractionRequiredAuthError.createInteractionRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(exports.InteractionRequiredAuthErrorMessage.interactionRequired.code, errorDesc);\r\n    };\r\n    InteractionRequiredAuthError.createConsentRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(exports.InteractionRequiredAuthErrorMessage.consentRequired.code, errorDesc);\r\n    };\r\n    return InteractionRequiredAuthError;\r\n}(ServerError_1.ServerError));\r\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError;\r\n\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction buildResponseStateOnly(state) {\r\n    return {\r\n        uniqueId: \"\",\r\n        tenantId: \"\",\r\n        tokenType: \"\",\r\n        idToken: null,\r\n        idTokenClaims: null,\r\n        accessToken: \"\",\r\n        scopes: null,\r\n        expiresOn: null,\r\n        account: null,\r\n        accountState: state,\r\n        fromCache: false\r\n    };\r\n}\r\nexports.buildResponseStateOnly = buildResponseStateOnly;\r\n\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar B2cAuthority_1 = __webpack_require__(18);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar TelemetryConstants_1 = __webpack_require__(9);\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\nexports.scrubTenantFromUri = function (uri) {\r\n    var url = UrlUtils_1.UrlUtils.GetUrlComponents(uri);\r\n    // validate trusted host\r\n    if (!Constants_1.AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\r\n        // Should this return null or what was passed?\r\n        return null;\r\n    }\r\n    var pathParams = url.PathSegments;\r\n    if (pathParams && pathParams.length >= 2) {\r\n        var tenantPosition = pathParams[1] === B2cAuthority_1.B2cAuthority.B2C_PREFIX ? 2 : 1;\r\n        if (tenantPosition < pathParams.length) {\r\n            pathParams[tenantPosition] = TelemetryConstants_1.TENANT_PLACEHOLDER;\r\n        }\r\n    }\r\n    return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\r\n};\r\nexports.hashPersonalIdentifier = function (valueToHash) {\r\n    /*\r\n     * TODO sha256 this\r\n     * Current test runner is being funny with node libs that are webpacked anyway\r\n     * need a different solution\r\n     */\r\n    return CryptoUtils_1.CryptoUtils.base64Encode(valueToHash);\r\n};\r\nexports.prependEventNamePrefix = function (suffix) { return \"\" + TelemetryConstants_1.EVENT_NAME_PREFIX + (suffix || \"\"); };\r\n\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\nmodule.exports = __webpack_require__(24);\r\n\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar UserAgentApplication_1 = __webpack_require__(13);\r\nexports.UserAgentApplication = UserAgentApplication_1.UserAgentApplication;\r\nvar Logger_1 = __webpack_require__(11);\r\nexports.Logger = Logger_1.Logger;\r\nvar Logger_2 = __webpack_require__(11);\r\nexports.LogLevel = Logger_2.LogLevel;\r\nvar Account_1 = __webpack_require__(15);\r\nexports.Account = Account_1.Account;\r\nvar Constants_1 = __webpack_require__(3);\r\nexports.Constants = Constants_1.Constants;\r\nvar Authority_1 = __webpack_require__(8);\r\nexports.Authority = Authority_1.Authority;\r\nvar UserAgentApplication_2 = __webpack_require__(13);\r\nexports.CacheResult = UserAgentApplication_2.CacheResult;\r\nvar Configuration_1 = __webpack_require__(19);\r\nexports.CacheLocation = Configuration_1.CacheLocation;\r\nexports.Configuration = Configuration_1.Configuration;\r\nvar AuthenticationParameters_1 = __webpack_require__(41);\r\nexports.AuthenticationParameters = AuthenticationParameters_1.AuthenticationParameters;\r\nvar AuthResponse_1 = __webpack_require__(21);\r\nexports.AuthResponse = AuthResponse_1.AuthResponse;\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nexports.CryptoUtils = CryptoUtils_1.CryptoUtils;\r\n// Errors\r\nvar AuthError_1 = __webpack_require__(7);\r\nexports.AuthError = AuthError_1.AuthError;\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nexports.ClientAuthError = ClientAuthError_1.ClientAuthError;\r\nvar ServerError_1 = __webpack_require__(12);\r\nexports.ServerError = ServerError_1.ServerError;\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nexports.ClientConfigurationError = ClientConfigurationError_1.ClientConfigurationError;\r\nvar InteractionRequiredAuthError_1 = __webpack_require__(20);\r\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError_1.InteractionRequiredAuthError;\r\n\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenKey = /** @class */ (function () {\r\n    function AccessTokenKey(authority, clientId, scopes, uid, utid) {\r\n        this.authority = UrlUtils_1.UrlUtils.CanonicalizeUri(authority);\r\n        this.clientId = clientId;\r\n        this.scopes = scopes;\r\n        this.homeAccountIdentifier = CryptoUtils_1.CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils_1.CryptoUtils.base64Encode(utid);\r\n    }\r\n    return AccessTokenKey;\r\n}());\r\nexports.AccessTokenKey = AccessTokenKey;\r\n\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenValue = /** @class */ (function () {\r\n    function AccessTokenValue(accessToken, idToken, expiresIn, homeAccountIdentifier) {\r\n        this.accessToken = accessToken;\r\n        this.idToken = idToken;\r\n        this.expiresIn = expiresIn;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n    }\r\n    return AccessTokenValue;\r\n}());\r\nexports.AccessTokenValue = AccessTokenValue;\r\n\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar StringUtils_1 = __webpack_require__(1);\r\n/**\r\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\r\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\r\n * @hidden\r\n */\r\nvar ServerRequestParameters = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param authority\r\n     * @param clientId\r\n     * @param scope\r\n     * @param responseType\r\n     * @param redirectUri\r\n     * @param state\r\n     */\r\n    function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {\r\n        this.authorityInstance = authority;\r\n        this.clientId = clientId;\r\n        this.nonce = CryptoUtils_1.CryptoUtils.createNewGuid();\r\n        // set scope to clientId if null\r\n        this.scopes = scopes ? scopes.slice() : [clientId];\r\n        // set state (already set at top level)\r\n        this.state = state;\r\n        // set correlationId\r\n        this.correlationId = correlationId;\r\n        // telemetry information\r\n        this.xClientSku = \"MSAL.JS\";\r\n        this.xClientVer = Constants_1.libraryVersion();\r\n        this.responseType = responseType;\r\n        this.redirectUri = redirectUri;\r\n    }\r\n    Object.defineProperty(ServerRequestParameters.prototype, \"authority\", {\r\n        get: function () {\r\n            return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\r\n     * @param request\r\n     * @param serverAuthenticationRequest\r\n     */\r\n    ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {\r\n        var queryParameters = {};\r\n        if (request) {\r\n            // add the prompt parameter to serverRequestParameters if passed\r\n            if (request.prompt) {\r\n                this.promptValue = request.prompt;\r\n            }\r\n            // Add claims challenge to serverRequestParameters if passed\r\n            if (request.claimsRequest) {\r\n                this.claimsValue = request.claimsRequest;\r\n            }\r\n            // if the developer provides one of these, give preference to developer choice\r\n            if (ServerRequestParameters.isSSOParam(request)) {\r\n                queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\r\n            }\r\n        }\r\n        if (adalIdTokenObject) {\r\n            queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\r\n        }\r\n        /*\r\n         * adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint\r\n         * this.logger.verbose(\"Calling addHint parameters\");\r\n         */\r\n        queryParameters = this.addHintParameters(account, queryParameters);\r\n        // sanity check for developer passed extraQueryParameters\r\n        var eQParams = request.extraQueryParameters;\r\n        // Populate the extraQueryParameters to be sent to the server\r\n        this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\r\n        this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);\r\n    };\r\n    // #region QueryParam helpers\r\n    /**\r\n     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\r\n     * in any login() or acquireToken() calls\r\n     * @param idTokenObject\r\n     * @param extraQueryParameters\r\n     * @param sid\r\n     * @param loginHint\r\n     */\r\n    // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\r\n    ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\r\n        // preference order: account > sid > login_hint\r\n        var ssoType;\r\n        var ssoData;\r\n        var serverReqParam = {};\r\n        // if account info is passed, account.sid > account.login_hint\r\n        if (request) {\r\n            if (request.account) {\r\n                var account = request.account;\r\n                if (account.sid) {\r\n                    ssoType = Constants_1.SSOTypes.SID;\r\n                    ssoData = account.sid;\r\n                }\r\n                else if (account.userName) {\r\n                    ssoType = Constants_1.SSOTypes.LOGIN_HINT;\r\n                    ssoData = account.userName;\r\n                }\r\n            }\r\n            // sid from request\r\n            else if (request.sid) {\r\n                ssoType = Constants_1.SSOTypes.SID;\r\n                ssoData = request.sid;\r\n            }\r\n            // loginHint from request\r\n            else if (request.loginHint) {\r\n                ssoType = Constants_1.SSOTypes.LOGIN_HINT;\r\n                ssoData = request.loginHint;\r\n            }\r\n        }\r\n        // adalIdToken retrieved from cache\r\n        else if (idTokenObject) {\r\n            if (idTokenObject.hasOwnProperty(Constants_1.Constants.upn)) {\r\n                ssoType = Constants_1.SSOTypes.ID_TOKEN;\r\n                ssoData = idTokenObject.upn;\r\n            }\r\n            else {\r\n                ssoType = Constants_1.SSOTypes.ORGANIZATIONS;\r\n                ssoData = null;\r\n            }\r\n        }\r\n        serverReqParam = this.addSSOParameter(ssoType, ssoData);\r\n        // add the HomeAccountIdentifier info/ domain_hint\r\n        if (request && request.account && request.account.homeAccountIdentifier) {\r\n            serverReqParam = this.addSSOParameter(Constants_1.SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);\r\n        }\r\n        return serverReqParam;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\r\n     * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\r\n     * domain_req utid received as part of the clientInfo\r\n     * login_req uid received as part of clientInfo\r\n     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\r\n     *\r\n     * @param {@link Account} account - Account for which the token is requested\r\n     * @param queryparams\r\n     * @param {@link ServerRequestParameters}\r\n     * @ignore\r\n     */\r\n    ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {\r\n        /*\r\n         * This is a final check for all queryParams added so far; preference order: sid > login_hint\r\n         * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\r\n         */\r\n        if (account && !qParams[Constants_1.SSOTypes.SID]) {\r\n            // sid - populate only if login_hint is not already populated and the account has sid\r\n            var populateSID = !qParams[Constants_1.SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === Constants_1.PromptState.NONE;\r\n            if (populateSID) {\r\n                qParams = this.addSSOParameter(Constants_1.SSOTypes.SID, account.sid, qParams);\r\n            }\r\n            // login_hint - account.userName\r\n            else {\r\n                var populateLoginHint = !qParams[Constants_1.SSOTypes.LOGIN_HINT] && account.userName && !StringUtils_1.StringUtils.isEmpty(account.userName);\r\n                if (populateLoginHint) {\r\n                    qParams = this.addSSOParameter(Constants_1.SSOTypes.LOGIN_HINT, account.userName, qParams);\r\n                }\r\n            }\r\n            var populateReqParams = !qParams[Constants_1.SSOTypes.DOMAIN_REQ] && !qParams[Constants_1.SSOTypes.LOGIN_REQ];\r\n            if (populateReqParams) {\r\n                qParams = this.addSSOParameter(Constants_1.SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);\r\n            }\r\n        }\r\n        return qParams;\r\n    };\r\n    /**\r\n     * Add SID to extraQueryParameters\r\n     * @param sid\r\n     */\r\n    ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\r\n        if (!ssoParam) {\r\n            ssoParam = {};\r\n        }\r\n        if (!ssoData) {\r\n            return ssoParam;\r\n        }\r\n        switch (ssoType) {\r\n            case Constants_1.SSOTypes.SID: {\r\n                ssoParam[Constants_1.SSOTypes.SID] = ssoData;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.ID_TOKEN: {\r\n                ssoParam[Constants_1.SSOTypes.LOGIN_HINT] = ssoData;\r\n                ssoParam[Constants_1.SSOTypes.DOMAIN_HINT] = Constants_1.SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.LOGIN_HINT: {\r\n                ssoParam[Constants_1.SSOTypes.LOGIN_HINT] = ssoData;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.ORGANIZATIONS: {\r\n                ssoParam[Constants_1.SSOTypes.DOMAIN_HINT] = Constants_1.SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.CONSUMERS: {\r\n                ssoParam[Constants_1.SSOTypes.DOMAIN_HINT] = Constants_1.SSOTypes.CONSUMERS;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.HOMEACCOUNT_ID: {\r\n                var homeAccountId = ssoData.split(\".\");\r\n                var uid = CryptoUtils_1.CryptoUtils.base64Decode(homeAccountId[0]);\r\n                var utid = CryptoUtils_1.CryptoUtils.base64Decode(homeAccountId[1]);\r\n                // TODO: domain_req and login_req are not needed according to eSTS team\r\n                ssoParam[Constants_1.SSOTypes.LOGIN_REQ] = uid;\r\n                ssoParam[Constants_1.SSOTypes.DOMAIN_REQ] = utid;\r\n                if (utid === Constants_1.Constants.consumersUtid) {\r\n                    ssoParam[Constants_1.SSOTypes.DOMAIN_HINT] = Constants_1.SSOTypes.CONSUMERS;\r\n                }\r\n                else {\r\n                    ssoParam[Constants_1.SSOTypes.DOMAIN_HINT] = Constants_1.SSOTypes.ORGANIZATIONS;\r\n                }\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.LOGIN_REQ: {\r\n                ssoParam[Constants_1.SSOTypes.LOGIN_REQ] = ssoData;\r\n                break;\r\n            }\r\n            case Constants_1.SSOTypes.DOMAIN_REQ: {\r\n                ssoParam[Constants_1.SSOTypes.DOMAIN_REQ] = ssoData;\r\n                break;\r\n            }\r\n        }\r\n        return ssoParam;\r\n    };\r\n    /**\r\n     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\r\n     * @param extraQueryParameters\r\n     */\r\n    ServerRequestParameters.generateQueryParametersString = function (queryParameters) {\r\n        var paramsString = null;\r\n        if (queryParameters) {\r\n            Object.keys(queryParameters).forEach(function (key) {\r\n                if (paramsString == null) {\r\n                    paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n                else {\r\n                    paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n            });\r\n        }\r\n        return paramsString;\r\n    };\r\n    // #endregion\r\n    /**\r\n     * Check to see if there are SSO params set in the Request\r\n     * @param request\r\n     */\r\n    ServerRequestParameters.isSSOParam = function (request) {\r\n        return request && (request.account || request.sid || request.loginHint);\r\n    };\r\n    return ServerRequestParameters;\r\n}());\r\nexports.ServerRequestParameters = ServerRequestParameters;\r\n\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nvar StringUtils_1 = __webpack_require__(1);\r\n/**\r\n * @hidden\r\n */\r\nvar ClientInfo = /** @class */ (function () {\r\n    function ClientInfo(rawClientInfo) {\r\n        if (!rawClientInfo || StringUtils_1.StringUtils.isEmpty(rawClientInfo)) {\r\n            this.uid = \"\";\r\n            this.utid = \"\";\r\n            return;\r\n        }\r\n        try {\r\n            var decodedClientInfo = CryptoUtils_1.CryptoUtils.base64Decode(rawClientInfo);\r\n            var clientInfo = JSON.parse(decodedClientInfo);\r\n            if (clientInfo) {\r\n                if (clientInfo.hasOwnProperty(\"uid\")) {\r\n                    this.uid = clientInfo.uid;\r\n                }\r\n                if (clientInfo.hasOwnProperty(\"utid\")) {\r\n                    this.utid = clientInfo.utid;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError_1.ClientAuthError.createClientInfoDecodingError(e);\r\n        }\r\n    }\r\n    Object.defineProperty(ClientInfo.prototype, \"uid\", {\r\n        get: function () {\r\n            return this._uid ? this._uid : \"\";\r\n        },\r\n        set: function (uid) {\r\n            this._uid = uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClientInfo.prototype, \"utid\", {\r\n        get: function () {\r\n            return this._utid ? this._utid : \"\";\r\n        },\r\n        set: function (utid) {\r\n            this._utid = utid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ClientInfo;\r\n}());\r\nexports.ClientInfo = ClientInfo;\r\n\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nvar TokenUtils_1 = __webpack_require__(14);\r\nvar StringUtils_1 = __webpack_require__(1);\r\n/**\r\n * @hidden\r\n */\r\nvar IdToken = /** @class */ (function () {\r\n    /* tslint:disable:no-string-literal */\r\n    function IdToken(rawIdToken) {\r\n        if (StringUtils_1.StringUtils.isEmpty(rawIdToken)) {\r\n            throw ClientAuthError_1.ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\r\n        }\r\n        try {\r\n            this.rawIdToken = rawIdToken;\r\n            this.claims = TokenUtils_1.TokenUtils.extractIdToken(rawIdToken);\r\n            if (this.claims) {\r\n                if (this.claims.hasOwnProperty(\"iss\")) {\r\n                    this.issuer = this.claims[\"iss\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"oid\")) {\r\n                    this.objectId = this.claims[\"oid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"sub\")) {\r\n                    this.subject = this.claims[\"sub\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"tid\")) {\r\n                    this.tenantId = this.claims[\"tid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"ver\")) {\r\n                    this.version = this.claims[\"ver\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"preferred_username\")) {\r\n                    this.preferredName = this.claims[\"preferred_username\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"name\")) {\r\n                    this.name = this.claims[\"name\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"nonce\")) {\r\n                    this.nonce = this.claims[\"nonce\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"exp\")) {\r\n                    this.expiration = this.claims[\"exp\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"home_oid\")) {\r\n                    this.homeObjectId = this.claims[\"home_oid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"sid\")) {\r\n                    this.sid = this.claims[\"sid\"];\r\n                }\r\n                if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\r\n                    this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\r\n                }\r\n                /* tslint:enable:no-string-literal */\r\n            }\r\n        }\r\n        catch (e) {\r\n            /*\r\n             * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\r\n             * Need to add better error handling here to account for being unable to decode jwts.\r\n             */\r\n            throw ClientAuthError_1.ClientAuthError.createIdTokenParsingError(e);\r\n        }\r\n    }\r\n    return IdToken;\r\n}());\r\nexports.IdToken = IdToken;\r\n\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar AccessTokenCacheItem_1 = __webpack_require__(31);\r\nvar BrowserStorage_1 = __webpack_require__(32);\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\n/**\r\n * @hidden\r\n */\r\nvar AuthCache = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AuthCache, _super);\r\n    function AuthCache(clientId, cacheLocation, storeAuthStateInCookie) {\r\n        var _this = _super.call(this, cacheLocation) || this;\r\n        _this.clientId = clientId;\r\n        // This is hardcoded to true for now. We may make this configurable in the future\r\n        _this.rollbackEnabled = true;\r\n        _this.migrateCacheEntries(storeAuthStateInCookie);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Support roll back to old cache schema until the next major release: true by default now\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    AuthCache.prototype.migrateCacheEntries = function (storeAuthStateInCookie) {\r\n        var _this = this;\r\n        var idTokenKey = Constants_1.Constants.cachePrefix + \".\" + Constants_1.PersistentCacheKeys.IDTOKEN;\r\n        var clientInfoKey = Constants_1.Constants.cachePrefix + \".\" + Constants_1.PersistentCacheKeys.CLIENT_INFO;\r\n        var errorKey = Constants_1.Constants.cachePrefix + \".\" + Constants_1.ErrorCacheKeys.ERROR;\r\n        var errorDescKey = Constants_1.Constants.cachePrefix + \".\" + Constants_1.ErrorCacheKeys.ERROR_DESC;\r\n        var idTokenValue = _super.prototype.getItem.call(this, idTokenKey);\r\n        var clientInfoValue = _super.prototype.getItem.call(this, clientInfoKey);\r\n        var errorValue = _super.prototype.getItem.call(this, errorKey);\r\n        var errorDescValue = _super.prototype.getItem.call(this, errorDescKey);\r\n        var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        var keysToMigrate = [Constants_1.PersistentCacheKeys.IDTOKEN, Constants_1.PersistentCacheKeys.CLIENT_INFO, Constants_1.ErrorCacheKeys.ERROR, Constants_1.ErrorCacheKeys.ERROR_DESC];\r\n        keysToMigrate.forEach(function (cacheKey, index) { return _this.duplicateCacheEntry(cacheKey, values[index], storeAuthStateInCookie); });\r\n    };\r\n    /**\r\n     * Utility function to help with roll back keys\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    AuthCache.prototype.duplicateCacheEntry = function (newKey, value, storeAuthStateInCookie) {\r\n        if (value) {\r\n            this.setItem(newKey, value, storeAuthStateInCookie);\r\n        }\r\n    };\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    AuthCache.prototype.generateCacheKey = function (key, addInstanceId) {\r\n        try {\r\n            // Defined schemas do not need the key appended\r\n            JSON.parse(key);\r\n            return key;\r\n        }\r\n        catch (e) {\r\n            if (key.indexOf(\"\" + Constants_1.Constants.cachePrefix) === 0 || key.indexOf(Constants_1.Constants.adalIdToken) === 0) {\r\n                return key;\r\n            }\r\n            return addInstanceId ? Constants_1.Constants.cachePrefix + \".\" + this.clientId + \".\" + key : Constants_1.Constants.cachePrefix + \".\" + key;\r\n        }\r\n    };\r\n    /**\r\n     * add value to storage\r\n     * @param key\r\n     * @param value\r\n     * @param enableCookieStorage\r\n     */\r\n    AuthCache.prototype.setItem = function (key, value, enableCookieStorage, state) {\r\n        _super.prototype.setItem.call(this, this.generateCacheKey(key, true), value, enableCookieStorage);\r\n        if (this.rollbackEnabled) {\r\n            _super.prototype.setItem.call(this, this.generateCacheKey(key, false), value, enableCookieStorage);\r\n        }\r\n    };\r\n    /**\r\n     * get one item by key from storage\r\n     * @param key\r\n     * @param enableCookieStorage\r\n     */\r\n    AuthCache.prototype.getItem = function (key, enableCookieStorage) {\r\n        return _super.prototype.getItem.call(this, this.generateCacheKey(key, true), enableCookieStorage);\r\n    };\r\n    /**\r\n     * remove value from storage\r\n     * @param key\r\n     */\r\n    AuthCache.prototype.removeItem = function (key) {\r\n        _super.prototype.removeItem.call(this, this.generateCacheKey(key, true));\r\n        if (this.rollbackEnabled) {\r\n            _super.prototype.removeItem.call(this, this.generateCacheKey(key, false));\r\n        }\r\n    };\r\n    /**\r\n     * Reset the cache items\r\n     */\r\n    AuthCache.prototype.resetCacheItems = function () {\r\n        var storage = window[this.cacheLocation];\r\n        var key;\r\n        for (key in storage) {\r\n            // Check if key contains msal prefix; For now, we are clearing all cache items created by MSAL.js\r\n            if (storage.hasOwnProperty(key) && (key.indexOf(Constants_1.Constants.cachePrefix) !== -1)) {\r\n                _super.prototype.removeItem.call(this, key);\r\n                // TODO: Clear cache based on client id (clarify use cases where this is needed)\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reset all temporary cache items\r\n     */\r\n    AuthCache.prototype.resetTempCacheItems = function (state) {\r\n        var storage = window[this.cacheLocation];\r\n        var key;\r\n        // check state and remove associated cache\r\n        for (key in storage) {\r\n            if (!state || key.indexOf(state) !== -1) {\r\n                var splitKey = key.split(Constants_1.Constants.resourceDelimiter);\r\n                var keyState = splitKey.length > 1 ? splitKey[splitKey.length - 1] : null;\r\n                if (keyState === state && !this.tokenRenewalInProgress(keyState)) {\r\n                    this.removeItem(key);\r\n                    this.setItemCookie(key, \"\", -1);\r\n                    this.clearMsalCookie(state);\r\n                }\r\n            }\r\n        }\r\n        // delete the interaction status cache\r\n        this.removeItem(Constants_1.TemporaryCacheKeys.INTERACTION_STATUS);\r\n        this.removeItem(Constants_1.TemporaryCacheKeys.REDIRECT_REQUEST);\r\n    };\r\n    /**\r\n     * Set cookies for IE\r\n     * @param cName\r\n     * @param cValue\r\n     * @param expires\r\n     */\r\n    AuthCache.prototype.setItemCookie = function (cName, cValue, expires) {\r\n        _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, true), cValue, expires);\r\n        if (this.rollbackEnabled) {\r\n            _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, false), cValue, expires);\r\n        }\r\n    };\r\n    /**\r\n     * get one item by key from cookies\r\n     * @param cName\r\n     */\r\n    AuthCache.prototype.getItemCookie = function (cName) {\r\n        return _super.prototype.getItemCookie.call(this, this.generateCacheKey(cName, true));\r\n    };\r\n    /**\r\n     * Get all access tokens in the cache\r\n     * @param clientId\r\n     * @param homeAccountIdentifier\r\n     */\r\n    AuthCache.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {\r\n        var _this = this;\r\n        var results = Object.keys(window[this.cacheLocation]).reduce(function (tokens, key) {\r\n            var keyMatches = key.match(clientId) && key.match(homeAccountIdentifier) && key.match(Constants_1.Constants.scopes);\r\n            if (keyMatches) {\r\n                var value = _this.getItem(key);\r\n                if (value) {\r\n                    try {\r\n                        var parseAtKey = JSON.parse(key);\r\n                        var newAccessTokenCacheItem = new AccessTokenCacheItem_1.AccessTokenCacheItem(parseAtKey, JSON.parse(value));\r\n                        return tokens.concat([newAccessTokenCacheItem]);\r\n                    }\r\n                    catch (e) {\r\n                        throw ClientAuthError_1.ClientAuthError.createCacheParseError(key);\r\n                    }\r\n                }\r\n            }\r\n            return tokens;\r\n        }, []);\r\n        return results;\r\n    };\r\n    /**\r\n     * Return if the token renewal is still in progress\r\n     * @param stateValue\r\n     */\r\n    AuthCache.prototype.tokenRenewalInProgress = function (stateValue) {\r\n        var renewStatus = this.getItem(Constants_1.TemporaryCacheKeys.RENEW_STATUS + \"|\" + stateValue);\r\n        return !!(renewStatus && renewStatus === Constants_1.Constants.inProgress);\r\n    };\r\n    /**\r\n     * Clear all cookies\r\n     */\r\n    AuthCache.prototype.clearMsalCookie = function (state) {\r\n        this.clearItemCookie(Constants_1.TemporaryCacheKeys.NONCE_IDTOKEN + \"|\" + state);\r\n        this.clearItemCookie(Constants_1.TemporaryCacheKeys.STATE_LOGIN + \"|\" + state);\r\n        this.clearItemCookie(Constants_1.TemporaryCacheKeys.LOGIN_REQUEST + \"|\" + state);\r\n        this.clearItemCookie(Constants_1.TemporaryCacheKeys.STATE_ACQ_TOKEN + \"|\" + state);\r\n    };\r\n    /**\r\n     * Create acquireTokenAccountKey to cache account object\r\n     * @param accountId\r\n     * @param state\r\n     */\r\n    AuthCache.generateAcquireTokenAccountKey = function (accountId, state) {\r\n        return \"\" + Constants_1.TemporaryCacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants_1.Constants.resourceDelimiter + accountId + Constants_1.Constants.resourceDelimiter + state;\r\n    };\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    AuthCache.generateAuthorityKey = function (state) {\r\n        return \"\" + Constants_1.TemporaryCacheKeys.AUTHORITY + Constants_1.Constants.resourceDelimiter + state;\r\n    };\r\n    return AuthCache;\r\n}(BrowserStorage_1.BrowserStorage));\r\nexports.AuthCache = AuthCache;\r\n\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenCacheItem = /** @class */ (function () {\r\n    function AccessTokenCacheItem(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    return AccessTokenCacheItem;\r\n}());\r\nexports.AccessTokenCacheItem = AccessTokenCacheItem;\r\n\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar AuthError_1 = __webpack_require__(7);\r\n/**\r\n * @hidden\r\n */\r\nvar BrowserStorage = /** @class */ (function () {\r\n    function BrowserStorage(cacheLocation) {\r\n        if (!window) {\r\n            throw AuthError_1.AuthError.createNoWindowObjectError(\"Browser storage class could not find window object\");\r\n        }\r\n        var storageSupported = typeof window[cacheLocation] !== \"undefined\" && window[cacheLocation] != null;\r\n        if (!storageSupported) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createStorageNotSupportedError(cacheLocation);\r\n        }\r\n        this.cacheLocation = cacheLocation;\r\n    }\r\n    /**\r\n     * add value to storage\r\n     * @param key\r\n     * @param value\r\n     * @param enableCookieStorage\r\n     */\r\n    BrowserStorage.prototype.setItem = function (key, value, enableCookieStorage) {\r\n        window[this.cacheLocation].setItem(key, value);\r\n        if (enableCookieStorage) {\r\n            this.setItemCookie(key, value);\r\n        }\r\n    };\r\n    /**\r\n     * get one item by key from storage\r\n     * @param key\r\n     * @param enableCookieStorage\r\n     */\r\n    BrowserStorage.prototype.getItem = function (key, enableCookieStorage) {\r\n        if (enableCookieStorage && this.getItemCookie(key)) {\r\n            return this.getItemCookie(key);\r\n        }\r\n        return window[this.cacheLocation].getItem(key);\r\n    };\r\n    /**\r\n     * remove value from storage\r\n     * @param key\r\n     */\r\n    BrowserStorage.prototype.removeItem = function (key) {\r\n        return window[this.cacheLocation].removeItem(key);\r\n    };\r\n    /**\r\n     * clear storage (remove all items from it)\r\n     */\r\n    BrowserStorage.prototype.clear = function () {\r\n        return window[this.cacheLocation].clear();\r\n    };\r\n    /**\r\n     * add value to cookies\r\n     * @param cName\r\n     * @param cValue\r\n     * @param expires\r\n     */\r\n    BrowserStorage.prototype.setItemCookie = function (cName, cValue, expires) {\r\n        var cookieStr = cName + \"=\" + cValue + \";path=/;\";\r\n        if (expires) {\r\n            var expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += \"expires=\" + expireTime + \";\";\r\n        }\r\n        document.cookie = cookieStr;\r\n    };\r\n    /**\r\n     * get one item by key from cookies\r\n     * @param cName\r\n     */\r\n    BrowserStorage.prototype.getItemCookie = function (cName) {\r\n        var name = cName + \"=\";\r\n        var ca = document.cookie.split(\";\");\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) === \" \") {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cName\r\n     */\r\n    BrowserStorage.prototype.clearItemCookie = function (cName) {\r\n        this.setItemCookie(cName, \"\", -1);\r\n    };\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    BrowserStorage.prototype.getCookieExpirationTime = function (cookieLifeDays) {\r\n        var today = new Date();\r\n        var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);\r\n        return expr.toUTCString();\r\n    };\r\n    return BrowserStorage;\r\n}());\r\nexports.BrowserStorage = BrowserStorage;\r\n\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ClientAuthError_1 = __webpack_require__(6);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar WindowUtils = /** @class */ (function () {\r\n    function WindowUtils() {\r\n    }\r\n    /**\r\n     * @hidden\r\n     * Checks if the current page is running in an iframe.\r\n     * @ignore\r\n     */\r\n    WindowUtils.isInIframe = function () {\r\n        return window.parent !== window;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Check if the current page is running in a popup.\r\n     * @ignore\r\n     */\r\n    WindowUtils.isInPopup = function () {\r\n        return !!(window.opener && window.opener !== window);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Monitors a window until it loads a url with a hash\r\n     * @ignore\r\n     */\r\n    WindowUtils.monitorWindowForHash = function (contentWindow, timeout, urlNavigate) {\r\n        return new Promise(function (resolve, reject) {\r\n            var maxTicks = timeout / WindowUtils.POLLING_INTERVAL_MS;\r\n            var ticks = 0;\r\n            var intervalId = setInterval(function () {\r\n                if (contentWindow.closed) {\r\n                    clearInterval(intervalId);\r\n                    reject(ClientAuthError_1.ClientAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n                var href;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = contentWindow.location.href;\r\n                }\r\n                catch (e) { }\r\n                // Don't process blank pages or cross domain\r\n                if (!href || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n                // Only run clock when we are on same domain\r\n                ticks++;\r\n                if (UrlUtils_1.UrlUtils.urlContainsHash(href)) {\r\n                    clearInterval(intervalId);\r\n                    resolve(contentWindow.location.hash);\r\n                }\r\n                else if (ticks > maxTicks) {\r\n                    clearInterval(intervalId);\r\n                    reject(ClientAuthError_1.ClientAuthError.createTokenRenewalTimeoutError(urlNavigate)); // better error?\r\n                }\r\n            }, WindowUtils.POLLING_INTERVAL_MS);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Loads iframe with authorization endpoint URL\r\n     * @ignore\r\n     */\r\n    WindowUtils.loadFrame = function (urlNavigate, frameName, timeoutMs, logger) {\r\n        /*\r\n         * This trick overcomes iframe navigation in IE\r\n         * IE does not load the page consistently in iframe\r\n         */\r\n        logger.info(\"LoadFrame: \" + frameName);\r\n        return new Promise(function (resolve, reject) {\r\n            setTimeout(function () {\r\n                var frameHandle = WindowUtils.addHiddenIFrame(frameName, logger);\r\n                if (!frameHandle) {\r\n                    reject(\"Unable to load iframe with name: \" + frameName);\r\n                    return;\r\n                }\r\n                if (frameHandle.src === \"\" || frameHandle.src === \"about:blank\") {\r\n                    frameHandle.src = urlNavigate;\r\n                    logger.infoPii(\"Frame Name : \" + frameName + \" Navigated to: \" + urlNavigate);\r\n                }\r\n                resolve(frameHandle);\r\n            }, timeoutMs);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Adds the hidden iframe for silent token renewal.\r\n     * @ignore\r\n     */\r\n    WindowUtils.addHiddenIFrame = function (iframeId, logger) {\r\n        if (typeof iframeId === \"undefined\") {\r\n            return null;\r\n        }\r\n        logger.info(\"Add msal frame to document:\" + iframeId);\r\n        var adalFrame = document.getElementById(iframeId);\r\n        if (!adalFrame) {\r\n            if (document.createElement &&\r\n                document.documentElement &&\r\n                (window.navigator.userAgent.indexOf(\"MSIE 5.0\") === -1)) {\r\n                var ifr = document.createElement(\"iframe\");\r\n                ifr.setAttribute(\"id\", iframeId);\r\n                ifr.style.visibility = \"hidden\";\r\n                ifr.style.position = \"absolute\";\r\n                ifr.style.width = ifr.style.height = \"0\";\r\n                ifr.style.border = \"0\";\r\n                ifr.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\r\n                adalFrame = document.getElementsByTagName(\"body\")[0].appendChild(ifr);\r\n            }\r\n            else if (document.body && document.body.insertAdjacentHTML) {\r\n                document.body.insertAdjacentHTML(\"beforeend\", \"<iframe name='\" + iframeId + \"' id='\" + iframeId + \"' style='display:none'></iframe>\");\r\n            }\r\n            if (window.frames && window.frames[iframeId]) {\r\n                adalFrame = window.frames[iframeId];\r\n            }\r\n        }\r\n        return adalFrame;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Removes a hidden iframe from the page.\r\n     * @ignore\r\n     */\r\n    WindowUtils.removeHiddenIframe = function (iframe) {\r\n        if (document.body !== iframe.parentNode) {\r\n            document.body.removeChild(iframe);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Find and return the iframe element with the given hash\r\n     * @ignore\r\n     */\r\n    WindowUtils.getIframeWithHash = function (hash) {\r\n        var iframes = document.getElementsByTagName(\"iframe\");\r\n        var iframeArray = Array.apply(null, Array(iframes.length)).map(function (iframe, index) { return iframes.item(index); }); // eslint-disable-line prefer-spread\r\n        return iframeArray.filter(function (iframe) {\r\n            try {\r\n                return iframe.contentWindow.location.hash === hash;\r\n            }\r\n            catch (e) {\r\n                return false;\r\n            }\r\n        })[0];\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Returns an array of all the popups opened by MSAL\r\n     * @ignore\r\n     */\r\n    WindowUtils.getPopups = function () {\r\n        if (!window.openedWindows) {\r\n            window.openedWindows = [];\r\n        }\r\n        return window.openedWindows;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Find and return the popup with the given hash\r\n     * @ignore\r\n     */\r\n    WindowUtils.getPopUpWithHash = function (hash) {\r\n        return WindowUtils.getPopups().filter(function (popup) {\r\n            try {\r\n                return popup.location.hash === hash;\r\n            }\r\n            catch (e) {\r\n                return false;\r\n            }\r\n        })[0];\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Add the popup to the known list of popups\r\n     * @ignore\r\n     */\r\n    WindowUtils.trackPopup = function (popup) {\r\n        WindowUtils.getPopups().push(popup);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Close all popups\r\n     * @ignore\r\n     */\r\n    WindowUtils.closePopups = function () {\r\n        WindowUtils.getPopups().forEach(function (popup) { return popup.close(); });\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * blocks any login/acquireToken calls to reload from within a hidden iframe (generated for silent calls)\r\n     */\r\n    WindowUtils.blockReloadInHiddenIframes = function () {\r\n        // return an error if called from the hidden iframe created by the msal js silent calls\r\n        if (UrlUtils_1.UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\r\n            throw ClientAuthError_1.ClientAuthError.createBlockTokenRequestsInHiddenIframeError();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param cacheStorage\r\n     */\r\n    WindowUtils.checkIfBackButtonIsPressed = function (cacheStorage) {\r\n        var redirectCache = cacheStorage.getItem(Constants_1.TemporaryCacheKeys.REDIRECT_REQUEST);\r\n        // if redirect request is set and there is no hash\r\n        if (redirectCache && !UrlUtils_1.UrlUtils.urlContainsHash(window.location.hash)) {\r\n            var splitCache = redirectCache.split(Constants_1.Constants.resourceDelimiter);\r\n            var state = splitCache.length > 1 ? splitCache[splitCache.length - 1] : null;\r\n            cacheStorage.resetTempCacheItems(state);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Interval in milliseconds that we poll a window\r\n     * @ignore\r\n     */\r\n    WindowUtils.POLLING_INTERVAL_MS = 50;\r\n    return WindowUtils;\r\n}());\r\nexports.WindowUtils = WindowUtils;\r\n\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * Returns time in seconds for expiration based on string value passed in.\r\n     *\r\n     * @param expiresIn\r\n     */\r\n    TimeUtils.parseExpiresIn = function (expiresIn) {\r\n        // if AAD did not send \"expires_in\" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as \"expires_in\" value instead of 3600\r\n        if (!expiresIn) {\r\n            expiresIn = \"3599\";\r\n        }\r\n        return parseInt(expiresIn, 10);\r\n    };\r\n    /**\r\n     * return the current time in Unix time. Date.getTime() returns in milliseconds.\r\n     */\r\n    TimeUtils.now = function () {\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    return TimeUtils;\r\n}());\r\nexports.TimeUtils = TimeUtils;\r\n\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar Constants_1 = __webpack_require__(3);\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar ScopeSet_1 = __webpack_require__(10);\r\nvar StringUtils_1 = __webpack_require__(1);\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\n/**\r\n * @hidden\r\n */\r\nvar RequestUtils = /** @class */ (function () {\r\n    function RequestUtils() {\r\n    }\r\n    /**\r\n     * @ignore\r\n     *\r\n     * @param request\r\n     * @param isLoginCall\r\n     * @param requestType\r\n     * @param redirectCallbacksSet\r\n     * @param cacheStorage\r\n     * @param clientId\r\n     *\r\n     * validates all request parameters and generates a consumable request object\r\n     */\r\n    RequestUtils.validateRequest = function (request, isLoginCall, clientId, requestType, redirectCallbacksSet) {\r\n        // Throw error if request is empty for acquire * calls\r\n        if (!isLoginCall && !request) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n        // Throw error if callbacks are not set before redirect\r\n        if (requestType == Constants_1.Constants.interactionTypeRedirect && !redirectCallbacksSet) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createRedirectCallbacksNotSetError();\r\n        }\r\n        var scopes;\r\n        var extraQueryParameters;\r\n        if (request) {\r\n            // if extraScopesToConsent is passed in loginCall, append them to the login request; Validate and filter scopes (the validate function will throw if validation fails)\r\n            scopes = isLoginCall ? ScopeSet_1.ScopeSet.appendScopes(request.scopes, request.extraScopesToConsent) : request.scopes;\r\n            ScopeSet_1.ScopeSet.validateInputScope(scopes, !isLoginCall, clientId);\r\n            // validate prompt parameter\r\n            this.validatePromptParameter(request.prompt);\r\n            // validate extraQueryParameters\r\n            extraQueryParameters = this.validateEQParameters(request.extraQueryParameters, request.claimsRequest);\r\n            // validate claimsRequest\r\n            this.validateClaimsRequest(request.claimsRequest);\r\n        }\r\n        // validate and generate state and correlationId\r\n        var state = this.validateAndGenerateState(request && request.state);\r\n        var correlationId = this.validateAndGenerateCorrelationId(request && request.correlationId);\r\n        var validatedRequest = tslib_1.__assign({}, request, { extraQueryParameters: extraQueryParameters,\r\n            scopes: scopes,\r\n            state: state,\r\n            correlationId: correlationId });\r\n        return validatedRequest;\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Utility to test if valid prompt value is passed in the request\r\n     * @param request\r\n     */\r\n    RequestUtils.validatePromptParameter = function (prompt) {\r\n        if (prompt) {\r\n            if ([Constants_1.PromptState.LOGIN, Constants_1.PromptState.SELECT_ACCOUNT, Constants_1.PromptState.CONSENT, Constants_1.PromptState.NONE].indexOf(prompt) < 0) {\r\n                throw ClientConfigurationError_1.ClientConfigurationError.createInvalidPromptError(prompt);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestUtils.validateEQParameters = function (extraQueryParameters, claimsRequest) {\r\n        var eQParams = tslib_1.__assign({}, extraQueryParameters);\r\n        if (!eQParams) {\r\n            return null;\r\n        }\r\n        if (claimsRequest) {\r\n            // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\r\n            delete eQParams[Constants_1.Constants.claims];\r\n        }\r\n        Constants_1.BlacklistedEQParams.forEach(function (param) {\r\n            if (eQParams[param]) {\r\n                // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\r\n                delete eQParams[param];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Validates the claims passed in request is a JSON\r\n     * TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n     * @param claimsRequest\r\n     */\r\n    RequestUtils.validateClaimsRequest = function (claimsRequest) {\r\n        if (!claimsRequest) {\r\n            return;\r\n        }\r\n        var claims;\r\n        try {\r\n            claims = JSON.parse(claimsRequest);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createClaimsRequestParsingError(e);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * generate unique state per request\r\n     * @param request\r\n     */\r\n    RequestUtils.validateAndGenerateState = function (state) {\r\n        // append GUID to user set state  or set one for the user if null\r\n        return !StringUtils_1.StringUtils.isEmpty(state) ? CryptoUtils_1.CryptoUtils.createNewGuid() + \"|\" + state : CryptoUtils_1.CryptoUtils.createNewGuid();\r\n    };\r\n    /**\r\n     * @ignore\r\n     *\r\n     * validate correlationId and generate if not valid or not set by the user\r\n     * @param correlationId\r\n     */\r\n    RequestUtils.validateAndGenerateCorrelationId = function (correlationId) {\r\n        // validate user set correlationId or set one for the user if null\r\n        if (correlationId && !CryptoUtils_1.CryptoUtils.isGuid(correlationId)) {\r\n            throw ClientConfigurationError_1.ClientConfigurationError.createInvalidCorrelationIdError();\r\n        }\r\n        return CryptoUtils_1.CryptoUtils.isGuid(correlationId) ? correlationId : CryptoUtils_1.CryptoUtils.createNewGuid();\r\n    };\r\n    return RequestUtils;\r\n}());\r\nexports.RequestUtils = RequestUtils;\r\n\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar ResponseUtils = /** @class */ (function () {\r\n    function ResponseUtils() {\r\n    }\r\n    ResponseUtils.setResponseIdToken = function (originalResponse, idTokenObj) {\r\n        if (!originalResponse) {\r\n            return null;\r\n        }\r\n        else if (!idTokenObj) {\r\n            return originalResponse;\r\n        }\r\n        var exp = Number(idTokenObj.expiration);\r\n        if (exp && !originalResponse.expiresOn) {\r\n            originalResponse.expiresOn = new Date(exp * 1000);\r\n        }\r\n        return tslib_1.__assign({}, originalResponse, { idToken: idTokenObj, idTokenClaims: idTokenObj.claims, uniqueId: idTokenObj.objectId || idTokenObj.subject, tenantId: idTokenObj.tenantId });\r\n    };\r\n    return ResponseUtils;\r\n}());\r\nexports.ResponseUtils = ResponseUtils;\r\n\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @hidden\r\n */\r\nvar AadAuthority_1 = __webpack_require__(16);\r\nvar B2cAuthority_1 = __webpack_require__(18);\r\nvar Authority_1 = __webpack_require__(8);\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nvar UrlUtils_1 = __webpack_require__(5);\r\nvar StringUtils_1 = __webpack_require__(1);\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n     * Parse the url and determine the type of authority\r\n     */\r\n    AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {\r\n        authorityUrl = UrlUtils_1.UrlUtils.CanonicalizeUri(authorityUrl);\r\n        var components = UrlUtils_1.UrlUtils.GetUrlComponents(authorityUrl);\r\n        var pathSegments = components.PathSegments;\r\n        switch (pathSegments[0]) {\r\n            case \"tfp\":\r\n                return Authority_1.AuthorityType.B2C;\r\n            default:\r\n                return Authority_1.AuthorityType.Aad;\r\n        }\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n     */\r\n    AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {\r\n        if (StringUtils_1.StringUtils.isEmpty(authorityUrl)) {\r\n            return null;\r\n        }\r\n        var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl);\r\n        // Depending on above detection, create the right type.\r\n        switch (type) {\r\n            case Authority_1.AuthorityType.B2C:\r\n                return new B2cAuthority_1.B2cAuthority(authorityUrl, validateAuthority);\r\n            case Authority_1.AuthorityType.Aad:\r\n                return new AadAuthority_1.AadAuthority(authorityUrl, validateAuthority);\r\n            default:\r\n                throw ClientConfigurationError_1.ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n    };\r\n    return AuthorityFactory;\r\n}());\r\nexports.AuthorityFactory = AuthorityFactory;\r\n\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar DefaultEvent_1 = tslib_1.__importDefault(__webpack_require__(39));\r\n// for use in cache events\r\nvar MSAL_CACHE_EVENT_VALUE_PREFIX = \"msal.token\";\r\nvar MSAL_CACHE_EVENT_NAME = \"msal.cache_event\";\r\nvar createEventKey = function (event) { return (event.telemetryCorrelationId + \"-\" + event.eventId + \"-\" + event.eventName); };\r\nvar TelemetryManager = /** @class */ (function () {\r\n    function TelemetryManager(config, telemetryEmitter) {\r\n        // correlation Id to list of events\r\n        this.completedEvents = {};\r\n        // event key to event\r\n        this.inProgressEvents = {};\r\n        // correlation id to map of eventname to count\r\n        this.eventCountByCorrelationId = {};\r\n        // Implement after API EVENT\r\n        this.onlySendFailureTelemetry = false;\r\n        // TODO THROW if bad options\r\n        this.telemetryPlatform = config.platform;\r\n        this.clientId = config.clientId;\r\n        this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\r\n        /*\r\n         * TODO, when i get to wiring this through, think about what it means if\r\n         * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\r\n         * optional?\r\n         */\r\n        this.telemetryEmitter = telemetryEmitter;\r\n    }\r\n    TelemetryManager.prototype.startEvent = function (event) {\r\n        if (!this.telemetryEmitter) {\r\n            return;\r\n        }\r\n        var eventKey = createEventKey(event);\r\n        this.inProgressEvents[eventKey] = event;\r\n    };\r\n    TelemetryManager.prototype.stopEvent = function (event) {\r\n        var eventKey = createEventKey(event);\r\n        if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {\r\n            return;\r\n        }\r\n        event.stop();\r\n        this.incrementEventCount(event);\r\n        var completedEvents = this.completedEvents[event.telemetryCorrelationId];\r\n        this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);\r\n        delete this.inProgressEvents[eventKey];\r\n    };\r\n    TelemetryManager.prototype.flush = function (correlationId) {\r\n        var _this = this;\r\n        // If there is only unfinished events should this still return them?\r\n        if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\r\n            return;\r\n        }\r\n        var orphanedEvents = this.getOrphanedEvents(correlationId);\r\n        orphanedEvents.forEach(function (event) { return _this.incrementEventCount(event); });\r\n        var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);\r\n        delete this.completedEvents[correlationId];\r\n        var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];\r\n        delete this.eventCountByCorrelationId[correlationId];\r\n        // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\r\n        if (!eventsToFlush || !eventsToFlush.length) {\r\n            return;\r\n        }\r\n        var defaultEvent = new DefaultEvent_1.default(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);\r\n        var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);\r\n        this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) { return e.get(); }));\r\n    };\r\n    TelemetryManager.prototype.incrementEventCount = function (event) {\r\n        var _a;\r\n        /*\r\n         * TODO, name cache event different?\r\n         * if type is cache event, change name\r\n         */\r\n        var eventName = event.eventName;\r\n        var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\r\n        if (!eventCount) {\r\n            this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {},\r\n                _a[eventName] = 1,\r\n                _a);\r\n        }\r\n        else {\r\n            eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\r\n        }\r\n    };\r\n    TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {\r\n        var _this = this;\r\n        return Object.keys(this.inProgressEvents)\r\n            .reduce(function (memo, eventKey) {\r\n            if (eventKey.indexOf(correlationId) !== -1) {\r\n                var event = _this.inProgressEvents[eventKey];\r\n                delete _this.inProgressEvents[eventKey];\r\n                return memo.concat([event]);\r\n            }\r\n            return memo;\r\n        }, []);\r\n    };\r\n    return TelemetryManager;\r\n}());\r\nexports.default = TelemetryManager;\r\n\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar TelemetryConstants_1 = __webpack_require__(9);\r\nvar TelemetryEvent_1 = tslib_1.__importDefault(__webpack_require__(40));\r\nvar TelemetryUtils_1 = __webpack_require__(22);\r\nvar DefaultEvent = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DefaultEvent, _super);\r\n    // TODO Platform Type\r\n    function DefaultEvent(platform, correlationId, clientId, eventCount) {\r\n        var _this = _super.call(this, TelemetryUtils_1.prependEventNamePrefix(\"default_event\"), correlationId) || this;\r\n        _this.event[TelemetryUtils_1.prependEventNamePrefix(\"client_id\")] = clientId;\r\n        _this.event[TelemetryUtils_1.prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\r\n        _this.event[TelemetryUtils_1.prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\r\n        _this.event[TelemetryUtils_1.prependEventNamePrefix(\"application_name\")] = platform.applicationName;\r\n        _this.event[TelemetryUtils_1.prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\r\n        _this.event[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(TelemetryUtils_1.prependEventNamePrefix(\"ui_event\"), eventCount);\r\n        _this.event[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(TelemetryUtils_1.prependEventNamePrefix(\"http_event\"), eventCount);\r\n        _this.event[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(TelemetryUtils_1.prependEventNamePrefix(\"cache_event\"), eventCount);\r\n        return _this;\r\n        // / Device id?\r\n    }\r\n    DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\r\n        if (!eventCount[eventName]) {\r\n            return 0;\r\n        }\r\n        return eventCount[eventName];\r\n    };\r\n    return DefaultEvent;\r\n}(TelemetryEvent_1.default));\r\nexports.default = DefaultEvent;\r\n\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(0);\r\nvar TelemetryConstants_1 = __webpack_require__(9);\r\nvar TelemetryConstants_2 = __webpack_require__(9);\r\nvar TelemetryUtils_1 = __webpack_require__(22);\r\nvar CryptoUtils_1 = __webpack_require__(2);\r\nvar TelemetryEvent = /** @class */ (function () {\r\n    function TelemetryEvent(eventName, correlationId) {\r\n        var _a;\r\n        this.startTimestamp = Date.now();\r\n        this.eventId = CryptoUtils_1.CryptoUtils.createNewGuid();\r\n        this.event = (_a = {},\r\n            _a[TelemetryUtils_1.prependEventNamePrefix(TelemetryConstants_2.EVENT_NAME_KEY)] = eventName,\r\n            _a[TelemetryUtils_1.prependEventNamePrefix(TelemetryConstants_2.START_TIME_KEY)] = this.startTimestamp,\r\n            _a[TelemetryUtils_1.prependEventNamePrefix(TelemetryConstants_2.ELAPSED_TIME_KEY)] = -1,\r\n            _a[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,\r\n            _a);\r\n    }\r\n    TelemetryEvent.prototype.setElapsedTime = function (time) {\r\n        this.event[TelemetryUtils_1.prependEventNamePrefix(TelemetryConstants_2.ELAPSED_TIME_KEY)] = time;\r\n    };\r\n    TelemetryEvent.prototype.stop = function () {\r\n        // Set duration of event\r\n        this.setElapsedTime(+Date.now() - +this.startTimestamp);\r\n    };\r\n    Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\r\n        get: function () {\r\n            return this.event[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\r\n        },\r\n        set: function (value) {\r\n            this.event[\"\" + TelemetryConstants_1.TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\r\n        get: function () {\r\n            return this.event[TelemetryUtils_1.prependEventNamePrefix(TelemetryConstants_2.EVENT_NAME_KEY)];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TelemetryEvent.prototype.get = function () {\r\n        return tslib_1.__assign({}, this.event, { eventId: this.eventId });\r\n    };\r\n    return TelemetryEvent;\r\n}());\r\nexports.default = TelemetryEvent;\r\n\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ClientConfigurationError_1 = __webpack_require__(4);\r\nfunction validateClaimsRequest(request) {\r\n    if (!request.claimsRequest) {\r\n        return;\r\n    }\r\n    var claims;\r\n    try {\r\n        claims = JSON.parse(request.claimsRequest);\r\n    }\r\n    catch (e) {\r\n        throw ClientConfigurationError_1.ClientConfigurationError.createClaimsRequestParsingError(e);\r\n    }\r\n    // TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n}\r\nexports.validateClaimsRequest = validateClaimsRequest;\r\n\r\n\r\n/***/ })\r\n/******/ ]);\r\n});\r\n\n\n//# sourceURL=webpack://Implicit/./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js?");

/***/ }),

/***/ "./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts":
/*!************************************************************************!*\
  !*** ./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright (c) Microsoft. All rights reserved.\r\n */\r\n/// <reference path=\"./Definitions/IImplicitAuthConfig.d.ts\" />\r\n/// <reference path=\"./Definitions/IImplicitAuthResult.d.ts\" />\r\n// Above references are needed for ts-node\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Msal = __webpack_require__(/*! ../lib/msal.js */ \"./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js\");\r\nvar api_js_1 = __webpack_require__(/*! ../lib/api.js */ \"./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js\");\r\napi_js_1.addNamespaceMapping('Office.Identity.WebAuth.Implicit', '5c65bbc4edbf480d9637ace04d62bd98-12844893-8ab9-4dde-b850-5612cb12e0f2-7822');\r\nvar applications;\r\nexports.applications = applications;\r\n//////////\r\nvar authConfig;\r\nvar enableConsoleLog = false;\r\n/**\r\n * Internal Module includes definition of different constants\r\n */\r\nvar Constants;\r\n(function (Constants) {\r\n    var IdentityProvider = /** @class */ (function () {\r\n        function IdentityProvider() {\r\n        }\r\n        /**\r\n         * AAD\r\n         */\r\n        IdentityProvider.Aad = \"aad\";\r\n        /**\r\n         * MSA\r\n         */\r\n        IdentityProvider.Msa = \"msa\";\r\n        return IdentityProvider;\r\n    }());\r\n    Constants.IdentityProvider = IdentityProvider;\r\n    var PostMessageType = /** @class */ (function () {\r\n        function PostMessageType() {\r\n        }\r\n        PostMessageType.RequestAuthConfig = \"RequestAuthConfig\";\r\n        PostMessageType.ResponseAuthConfig = \"ResponseAuthConfig\";\r\n        PostMessageType.iFramePrefix = \"msalRenewFrame\";\r\n        PostMessageType.iFrameIdTokenPrefix = \"msalIdTokenFrame\";\r\n        return PostMessageType;\r\n    }());\r\n    Constants.PostMessageType = PostMessageType;\r\n    var Authority = /** @class */ (function () {\r\n        function Authority() {\r\n        }\r\n        /**\r\n         * Prod\r\n         */\r\n        Authority.Prod = \"https://login.microsoftonline.com/\";\r\n        /**\r\n         * Legacy Prod\r\n         */\r\n        Authority.ProdLegacy = \"https://login.windows.net/\";\r\n        /**\r\n         * PPE\r\n         */\r\n        Authority.Ppe = \"https://login.windows-ppe.net/\";\r\n        Authority.AadSuffix = \"common\";\r\n        Authority.MsaSuffix = \"consumers\";\r\n        return Authority;\r\n    }());\r\n    Constants.Authority = Authority;\r\n    var Telemetry = /** @class */ (function () {\r\n        function Telemetry() {\r\n        }\r\n        Telemetry.OtelInstance = \"otel\";\r\n        Telemetry.LoadTelemetryName = \"Office.Identity.WebAuth.Implicit.Load\";\r\n        Telemetry.GetTokenTelemetryName = \"Office.Identity.WebAuth.Implicit.GetToken\";\r\n        Telemetry.CheckUpnTelemetryName = \"Office.Identity.WebAuth.Implicit.CheckUpn\";\r\n        Telemetry.Duration = \"Duration\";\r\n        Telemetry.Succeeded = \"Succeeded\";\r\n        Telemetry.IdentityProvider = \"IdentityProvider\";\r\n        Telemetry.ApplicationId = \"ApplicationId\";\r\n        Telemetry.TokenScope = \"TokenScope\";\r\n        Telemetry.CorrelationId = \"CorrelationId\";\r\n        Telemetry.loadedApplicationCount = \"LoadedApplicationCount\";\r\n        Telemetry.ErrorCodeForGetToken = \"ErrorCodeForGetToken\";\r\n        Telemetry.ErrorMessageForGetToken = \"ErrorMessageForGetToken\";\r\n        Telemetry.ErrorCodeForCheckUpn = \"ErrorCodeForCheckUpn\";\r\n        Telemetry.ErrorMessageForCheckUpn = \"ErrorMessageForCheckUpn\";\r\n        return Telemetry;\r\n    }());\r\n    Constants.Telemetry = Telemetry;\r\n})(Constants || (Constants = {}));\r\nexports.Constants = Constants;\r\n/**\r\n * Internal Module contains utility methods for logging\r\n */\r\nvar LoggingUtils;\r\n(function (LoggingUtils) {\r\n    /**\r\n     * Returns if we should proceed with logging or not\r\n     * @param shouldLog - should this message be logged\r\n     */\r\n    function shouldProceed(shouldLog) {\r\n        if (shouldLog != null && shouldLog !== undefined && !shouldLog) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Logs message to the console\r\n     * @param message - message which was passed in\r\n     * @param shouldLog - should this message be logged\r\n     */\r\n    function log(message, shouldLog) {\r\n        if (!shouldProceed(shouldLog)) {\r\n            return false;\r\n        }\r\n        console.log(message);\r\n        return true;\r\n    }\r\n    LoggingUtils.log = log;\r\n    /**\r\n     * Logs warning message to the console\r\n     * @param message - message which was passed in\r\n     * @param shouldLog - should this message be logged\r\n     */\r\n    function warn(message, shouldLog) {\r\n        if (!shouldProceed(shouldLog)) {\r\n            return false;\r\n        }\r\n        console.warn(message);\r\n        return true;\r\n    }\r\n    LoggingUtils.warn = warn;\r\n    /**\r\n     * Logs error message to the console\r\n     * @param message - message which was passed in\r\n     * @param shouldLog - should this message be logged\r\n     */\r\n    function error(message, shouldLog) {\r\n        if (!shouldProceed(shouldLog)) {\r\n            return false;\r\n        }\r\n        console.error(message);\r\n        return true;\r\n    }\r\n    LoggingUtils.error = error;\r\n})(LoggingUtils || (LoggingUtils = {}));\r\nexports.LoggingUtils = LoggingUtils;\r\n/**\r\n * Internal Module contains utility methods for extracting tokens\r\n */\r\nvar ExtractUtils;\r\n(function (ExtractUtils) {\r\n    /**\r\n     * Extract AccessToken by decoding the RAWAccessToken\r\n     *\r\n     * @param encodedAccessToken\r\n     */\r\n    function extractAccessToken(encodedAccessToken) {\r\n        // access token will be decoded to get the username\r\n        var decodedToken = decodeJwt(encodedAccessToken);\r\n        if (!decodedToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            var base64AccessToken = decodedToken.JWSPayload;\r\n            var base64Decoded = base64Decode(base64AccessToken);\r\n            if (!base64Decoded) {\r\n                LoggingUtils.log(\"The returned access_token could not be base64 url safe decoded.\");\r\n                return null;\r\n            }\r\n            // ECMA script has JSON built-in support\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            LoggingUtils.error(\"The returned access_token could not be decoded\" + err);\r\n        }\r\n        return null;\r\n    }\r\n    ExtractUtils.extractAccessToken = extractAccessToken;\r\n    ;\r\n    /**\r\n     * Decodes a base64 encoded string.\r\n     *\r\n     * @param input\r\n     */\r\n    function base64Decode(input) {\r\n        var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n        return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(\"\"));\r\n    }\r\n    ;\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param jwtToken\r\n     */\r\n    function decodeJwt(jwtToken) {\r\n        if (jwtToken === \"undefined\" || !jwtToken || 0 === jwtToken.length) {\r\n            return null;\r\n        }\r\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = idTokenPartsRegex.exec(jwtToken);\r\n        if (!matches || matches.length < 4) {\r\n            LoggingUtils.warn(\"The returned access_token is not parseable.\");\r\n            return null;\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    }\r\n    ;\r\n})(ExtractUtils || (ExtractUtils = {}));\r\nexports.ExtractUtils = ExtractUtils;\r\n/**\r\n * Module includes timer related utilities\r\n */\r\nvar TimerUtils;\r\n(function (TimerUtils) {\r\n    /**\r\n     * Timer function\r\n     */\r\n    function timer() {\r\n        var timeStart = new Date().getTime();\r\n        return {\r\n            /**\r\n             * Returns time in seconds (example: 500)\r\n             */\r\n            get seconds() {\r\n                var seconds = Math.ceil((new Date().getTime() - timeStart) / 1000);\r\n                return seconds;\r\n            },\r\n            /**\r\n             * Returns time in Milliseconds (example: 2000)\r\n             */\r\n            get ms() {\r\n                var ms = (new Date().getTime() - timeStart);\r\n                return ms;\r\n            },\r\n            /**\r\n             * Returns formatted time in seconds (example: 500s)\r\n             */\r\n            get formattedSeconds() {\r\n                var seconds = Math.ceil(this.seconds / 1000) + \"s\";\r\n                return seconds;\r\n            },\r\n            /**\r\n             * Returns formatted time in Milliseconds (example: 2000ms)\r\n             */\r\n            get formattedMs() {\r\n                var ms = this.ms + \"ms\";\r\n                return ms;\r\n            }\r\n        };\r\n    }\r\n    TimerUtils.timer = timer;\r\n})(TimerUtils || (TimerUtils = {}));\r\n/**\r\n * Load implicit auth module\r\n * @param configurations - auth configs\r\n * @param correlationId - the same correlation ID exists under the caller's context, the same correlation ID will passed on to MSAL.js for unified experience\r\n * @returns the {@link IImplicitLoadResult} object\r\n */\r\nfunction Load(configurations, correlationId) {\r\n    var timerClock = TimerUtils.timer();\r\n    authConfig = configurations;\r\n    if (authConfig.enableConsoleLogging) {\r\n        enableConsoleLog = authConfig.enableConsoleLogging;\r\n    }\r\n    // Implicitly swap login.windows.net to login.microsoftonline.com\r\n    if (authConfig.authority) {\r\n        authConfig.authority = authConfig.authority.replace(Constants.Authority.ProdLegacy, Constants.Authority.Prod);\r\n    }\r\n    // Hidden iframe --> { request: 'RequestAuthConfig', iframe: id } --> Return iframe --> {request: 'ResponseAuthConfig', config:authConfig }\r\n    // Only add an event listener once\r\n    if (!applications) {\r\n        window.addEventListener('message', function (e) {\r\n            if (e.origin && e.origin == location.origin && e.data && e.data.iframe && e.data.request && e.data.request == Constants.PostMessageType.RequestAuthConfig) {\r\n                var targetIframeName = Constants.PostMessageType.iFramePrefix + e.data.iframe;\r\n                var targetiFrame = document.getElementById(targetIframeName.replace('+', ' '));\r\n                if (targetiFrame === null) {\r\n                    targetIframeName = Constants.PostMessageType.iFrameIdTokenPrefix;\r\n                    var targetiFrame = document.getElementById(targetIframeName.replace('+', ' '));\r\n                }\r\n                LoggingUtils.log('received from ' + targetIframeName, enableConsoleLog);\r\n                if (targetiFrame === null) {\r\n                    LoggingUtils.log('targetiFrame is null', enableConsoleLog);\r\n                    return;\r\n                }\r\n                var targetContentWindow = targetiFrame.contentWindow;\r\n                if (targetContentWindow != null) {\r\n                    LoggingUtils.log('returning to ' + e.data.iframe, enableConsoleLog);\r\n                    targetContentWindow.postMessage({ request: Constants.PostMessageType.ResponseAuthConfig, config: authConfig }, location.origin);\r\n                }\r\n            }\r\n        }, false);\r\n    }\r\n    if (authConfig.idp.toLowerCase() === Constants.IdentityProvider.Msa.toLowerCase()) {\r\n        // There is no guarantee that our callers will send MSAL.js supported authority to us,\r\n        // hard code the authority to be login.microsoftonline.com since there is no PPE tenant for MSA.\r\n        authConfig.authority = Constants.Authority.Prod + Constants.Authority.MsaSuffix;\r\n    }\r\n    else {\r\n        if (!authConfig.authority) {\r\n            authConfig.authority = Constants.Authority.Prod + Constants.Authority.AadSuffix;\r\n        }\r\n        // Add common suffix if it doesn't have\r\n        if (authConfig.authority.indexOf(Constants.Authority.AadSuffix) < 0) {\r\n            if (authConfig.authority.charAt(authConfig.authority.length - 1) == \"/\")\r\n                authConfig.authority += Constants.Authority.AadSuffix;\r\n            else\r\n                authConfig.authority += \"/\" + Constants.Authority.AadSuffix;\r\n        }\r\n    }\r\n    exports.applications = applications = new Array();\r\n    for (var _i = 0, _a = authConfig.appIds; _i < _a.length; _i++) {\r\n        var appId = _a[_i];\r\n        if (!appId || !IsGuid(appId)) {\r\n            continue;\r\n        }\r\n        var application = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: appId,\r\n                authority: authConfig.authority,\r\n                redirectUri: (authConfig.redirectUri) ? authConfig.redirectUri.split(\"?\")[0] : location.href.split(\"?\")[0],\r\n                navigateToLoginRequestUrl: (authConfig.navigateToLoginRequestUrl) ? authConfig.navigateToLoginRequestUrl : true,\r\n            },\r\n            cache: {\r\n                cacheLocation: 'localStorage',\r\n                // Store auth state in cookies can make the request too big and fail the request sometimes, need to keep it as false.\r\n                storeAuthStateInCookie: false\r\n            },\r\n            system: {\r\n                loadFrameTimeout: (authConfig.timeout) ? authConfig.timeout : 6000,\r\n            },\r\n        });\r\n        var entry = { applicationId: appId, application: application };\r\n        applications.push(entry);\r\n        HandleFragment(application);\r\n    }\r\n    ;\r\n    // For data fields that are null, blank or empty, the value is set to \"unknown\" at this point\r\n    // based on office-online-otel documentation: https://office.visualstudio.com/OC/_git/office-online-ui?path=%2Fpackages%2Foffice-online-otel%2FREADME.md&version=GBmaster\r\n    // Null or undefined value will cause exceptions down the line.\r\n    var dataFields = [\r\n        { name: Constants.Telemetry.Duration, int64: timerClock.ms },\r\n        { name: Constants.Telemetry.Succeeded, bool: true },\r\n        { name: Constants.Telemetry.IdentityProvider, string: authConfig.idp.toLowerCase() },\r\n        { name: Constants.Telemetry.CorrelationId, string: correlationId ? correlationId : 'unknown' },\r\n        { name: Constants.Telemetry.loadedApplicationCount, int64: applications.length }\r\n    ];\r\n    if (!authConfig.telemetryInstance && typeof OTel === \"undefined\") {\r\n        api_js_1.sendTelemetryEvent({\r\n            name: Constants.Telemetry.LoadTelemetryName,\r\n            dataFields: dataFields\r\n        });\r\n    }\r\n    return {\r\n        Telemetry: {\r\n            timeToLoad: timerClock.ms,\r\n            succeeded: true,\r\n            idp: authConfig.idp.toLowerCase(),\r\n            correlationId: correlationId ? correlationId : '',\r\n            loadedApplicationCount: applications.length\r\n        }\r\n    };\r\n}\r\nexports.Load = Load;\r\n/**\r\n * Saves data included in the hash fragment to storage.\r\n * @param application - The calling application\r\n */\r\nfunction HandleFragment(application) {\r\n    // isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.\r\n    if (application.isCallback(window.location.hash)) {\r\n        LoggingUtils.log(\"Hash: \" + window.location.hash, enableConsoleLog);\r\n        application.handleAuthenticationResponse();\r\n        LoggingUtils.log(\"Completed Hash Handling\", enableConsoleLog);\r\n    }\r\n    else {\r\n        // Clear the existing cache if it's not a callback\r\n        application.clearCache();\r\n    }\r\n}\r\nexports.HandleFragment = HandleFragment;\r\n/**\r\n * Acquire an access token by given target\r\n * @param target - resource for V1 token, scope for V2 token\r\n * @param applicationId - the application ID which needs access token\r\n * @param correlationId - the same correlation ID exists under the caller's context, the same correlation ID will passed on to MSAL.js for unified experience\r\n * @param popup - If true, popup. If false, no popup. Otherwise Auto\r\n * @returns {Promise.<IImplicitAuthResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link IImplicitAuthResult} object\r\n */\r\nfunction GetToken(target, applicationId, correlationId, popup) {\r\n    var timerClock = TimerUtils.timer();\r\n    var application = GetApplication(applicationId);\r\n    // Wrong format of correlation ID or blank are not valid in MSAL.js\r\n    // With an invalid correlation ID in the request, the access token acquiring request will be rejected by MSAL.js with exceptions.\r\n    // Correlation ID will be set to undefined in those cases and MSAL.js will generate a new correlation ID if it is undefined.\r\n    if (!correlationId || !IsGuid(correlationId)) {\r\n        correlationId = undefined;\r\n    }\r\n    var result = {};\r\n    if (!target) {\r\n        result.ErrorCode = 'missing_target';\r\n        result.ErrorMessage = 'The provided target for Implicit.GetToken is null, blank or empty';\r\n        LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, undefined, result.ErrorCode, result.ErrorMessage);\r\n        return Promise.reject(result);\r\n    }\r\n    var scopes = [GetScope(target)];\r\n    if (!applicationId || !IsGuid(applicationId)) {\r\n        result.ErrorCode = 'invalid_application_ID';\r\n        result.ErrorMessage = 'The provided application ID for Implicit.GetToken is null, blank, empty or with invalid format';\r\n        LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes, result.ErrorCode, result.ErrorMessage);\r\n        return Promise.reject(result);\r\n    }\r\n    var isMsa = authConfig.idp.toLowerCase() === Constants.IdentityProvider.Msa.toLowerCase();\r\n    // When popup = true, login will be attempted.\r\n    var attemptLogin = function () {\r\n        LoggingUtils.log(\"Logging in\", enableConsoleLog);\r\n        application.authResponseCallback = function () { HandleFragment(application); }; // callback must be set directly on the application.\r\n        return application.loginPopup({\r\n            // Prefill the UPN so that the user just needs to enter the password.\r\n            scopes: scopes,\r\n            loginHint: authConfig.upn,\r\n            correlationId: correlationId,\r\n        }).catch(function (error) {\r\n            application.clearCache();\r\n            return Promise.reject(error);\r\n        });\r\n    };\r\n    var acquireToken = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            LoggingUtils.log(\"Config: \" + JSON.stringify(application), enableConsoleLog);\r\n            LoggingUtils.log(\"application calls acquireTokenSilent\", enableConsoleLog);\r\n            application.acquireTokenSilent({\r\n                scopes: scopes,\r\n                loginHint: authConfig.upn,\r\n                correlationId: correlationId,\r\n            }).then(function (authResponse) {\r\n                var token = authResponse.accessToken;\r\n                if (token && UpnMatchesUpnFromIdToken(authResponse.account) && (isMsa || UpnMatchesUpnFromAccessToken(token))) {\r\n                    LoggingUtils.log(\"acquireToken->token: \" + token, enableConsoleLog);\r\n                    result.Token = token;\r\n                    LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes);\r\n                    return resolve(result);\r\n                }\r\n                else {\r\n                    result.ErrorCode = \"upn_mismatch\";\r\n                    result.ErrorMessage = \"upn doesn't match with given upn in config\";\r\n                    LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes, result.ErrorCode, result.ErrorMessage);\r\n                    LoggingUtils.log(\"acquireToken->error: \" + result.ErrorMessage, enableConsoleLog);\r\n                    application.clearCache();\r\n                    return reject(result);\r\n                }\r\n            }).catch(function (error) {\r\n                result.ErrorCode = error.errorCode;\r\n                result.ErrorMessage = error.errorMessage;\r\n                LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes, error.errorCode, error.errorMessage);\r\n                LoggingUtils.log(\"acquireToken->error: \" + result.ErrorMessage, enableConsoleLog);\r\n                application.clearCache();\r\n                return reject(result);\r\n            });\r\n        });\r\n    };\r\n    if (popup) {\r\n        return attemptLogin()\r\n            .catch(function (loginError) {\r\n            LoggingUtils.log(\"loginPopup->error: \" + loginError.errorMessage, enableConsoleLog);\r\n            result.ErrorCode = loginError.errorCode;\r\n            result.ErrorMessage = loginError.errorMessage;\r\n            LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes, loginError.errorCode, loginError.errorMessage);\r\n            return Promise.reject(result);\r\n        })\r\n            .then(acquireToken);\r\n    }\r\n    return acquireToken();\r\n}\r\nexports.GetToken = GetToken;\r\n/**\r\n * Log the telemetry data points in the provided {@link IImplicitAuthResult} or Otel pipeline.\r\n * @param result - the provided {@link IImplicitAuthResult} to log the telemetry data points into\r\n * @param correlationId - the same correlation ID exists under the caller's context, the same correlation ID will passed on to MSAL.js for unified experience\r\n * @param applicationId - the application ID in the access token request\r\n * @param timerClock - the timerClock to log the time duration\r\n * @param scopes - the scopes in the acquire token request\r\n * @param errorCode - the error code included in the exception, if any\r\n * @param errorMessage - the error message included in the exception, if any\r\n */\r\nfunction LogTelemetryDataFieldsForGetToken(result, correlationId, applicationId, timerClock, scopes, errorCode, errorMessage) {\r\n    // For data fields that are null, blank or empty, the value is set to \"unknown\" at this point\r\n    // based on office-online-otel documentation: https://office.visualstudio.com/OC/_git/office-online-ui?path=%2Fpackages%2Foffice-online-otel%2FREADME.md&version=GBmaster\r\n    // Null or undefined value will cause exceptions down the line.\r\n    var dataFields = [\r\n        { name: Constants.Telemetry.Duration, int64: timerClock.ms },\r\n        { name: Constants.Telemetry.Succeeded, bool: errorCode ? false : true },\r\n        { name: Constants.Telemetry.IdentityProvider, string: authConfig.idp.toLowerCase() },\r\n        { name: Constants.Telemetry.ApplicationId, string: applicationId },\r\n        { name: Constants.Telemetry.TokenScope, string: scopes ? scopes.toString() : 'unknown' },\r\n        { name: Constants.Telemetry.CorrelationId, string: correlationId ? correlationId : 'unknown' },\r\n        { name: Constants.Telemetry.ErrorCodeForGetToken, string: errorCode ? errorCode : 'unknown' },\r\n        { name: Constants.Telemetry.ErrorMessageForGetToken, string: errorMessage ? errorMessage : 'unknown' }\r\n    ];\r\n    if (!authConfig.telemetryInstance && typeof OTel === \"undefined\") {\r\n        api_js_1.sendTelemetryEvent({\r\n            name: Constants.Telemetry.GetTokenTelemetryName,\r\n            dataFields: dataFields\r\n        });\r\n    }\r\n    result.Telemetry = {\r\n        timeToGetToken: timerClock.ms,\r\n        succeeded: errorCode ? false : true,\r\n        idp: authConfig.idp.toLowerCase(),\r\n        applicationId: applicationId,\r\n        tokenScope: scopes ? scopes.toString() : undefined,\r\n        correlationId: correlationId,\r\n        errorCodeForGetToken: errorCode ? errorCode : undefined,\r\n        errorMessageForGetToken: errorMessage ? errorMessage : undefined\r\n    };\r\n}\r\n/**\r\n * Construct the Msal.UserAgentApplication instance for V2 endpoint calls.\r\n * @param applicationId - the application ID used to find or construct the MSAL instance.\r\n * @returns the Msal.UserAgentApplication instance to make calls to V2 endpoint.\r\n */\r\nfunction GetApplication(applicationId) {\r\n    var application = undefined;\r\n    applications.some(function (value) {\r\n        if (applicationId && value.applicationId && applicationId.toUpperCase() === value.applicationId.toUpperCase()) {\r\n            application = value.application;\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    if (!application) {\r\n        application = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: applicationId,\r\n                authority: authConfig.authority,\r\n                redirectUri: (authConfig.redirectUri) ? authConfig.redirectUri.split(\"?\")[0] : location.href.split(\"?\")[0],\r\n                navigateToLoginRequestUrl: (authConfig.navigateToLoginRequestUrl) ? authConfig.navigateToLoginRequestUrl : true,\r\n            },\r\n            cache: {\r\n                cacheLocation: 'localStorage',\r\n                // Store auth state in cookies can make the request too big and fail the request sometimes, need to keep it as false.\r\n                storeAuthStateInCookie: false\r\n            },\r\n            system: {\r\n                loadFrameTimeout: (authConfig.timeout) ? authConfig.timeout : 6000,\r\n            },\r\n        });\r\n        var entry = { applicationId: applicationId, application: application };\r\n        applications.push(entry);\r\n    }\r\n    return application;\r\n}\r\nexports.GetApplication = GetApplication;\r\n/**\r\n * Construct the scope for V2 endpoint calls.\r\n * @param target - resource for V1 token, scope for V2 token\r\n * @returns the right scope to make calls to V2 endpoint.\r\n */\r\nfunction GetScope(target) {\r\n    // To consume V2 endpoint, \"/.default\" needs to be added for given resources.\r\n    if (target.toUpperCase().startsWith(\"HTTPS\") || IsGuid(target)) {\r\n        return target + \"/.default\";\r\n    }\r\n    // Other cases could be that it is acquiring V2 tokens with scopes \"ConnectedServices.ReadWrite\" etc\r\n    // or wl.skydrive\r\n    return target;\r\n}\r\nexports.GetScope = GetScope;\r\n/**\r\n * Check whether the given string is in GUID format or not.\r\n * @param str - provided string for format checking.\r\n * @returns true if the string is in GUID format, returns false otherwise.\r\n */\r\nfunction IsGuid(str) {\r\n    // Checking GUID based on the GUID format\r\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n    return regexGuid.test(str);\r\n}\r\n/**\r\n * Acquire an Id token by given upn/target, and check if the upn matches context\r\n * @param correlationId - the same correlation ID exists under the caller's context, the same correlation ID will passed on to MSAL.js for unified experience\r\n * @returns {Promise.<IImplicitUpnResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link IImplicitUpnResult} object\r\n */\r\nfunction CheckUpnMatchIdToken(applicationId, correlationId) {\r\n    var timerClock = TimerUtils.timer();\r\n    // Wrong format of correlation ID or blank are not valid in MSAL.js\r\n    // With an invalid correlation ID in the request, the access token acquiring request will be rejected by MSAL.js with exceptions.\r\n    // Correlation ID will be set to undefined in those cases and MSAL.js will generate a new correlation ID if it is undefined.\r\n    if (!correlationId || !IsGuid(correlationId)) {\r\n        correlationId = undefined;\r\n    }\r\n    var result = {};\r\n    if (!applicationId || !IsGuid(applicationId)) {\r\n        result.ErrorCode = 'invalid_application_ID';\r\n        result.ErrorMessage = 'The provided application ID for Implicit.CheckUpnMatchIdToken is null, blank, empty or with invalid format';\r\n        LogTelemetryDataFieldsForCheckUpn(result, correlationId, applicationId, timerClock, undefined, result.ErrorCode, result.ErrorMessage);\r\n        return Promise.reject(result);\r\n    }\r\n    var application = GetApplication(applicationId);\r\n    var scopes = [application.config.auth.clientId]; /*It will acquire id token instead of access token if resource/scope is clientId*/\r\n    return new Promise(function (resolve, reject) {\r\n        LoggingUtils.log(\"Config: \" + JSON.stringify(application), enableConsoleLog);\r\n        LoggingUtils.log(\"application calls acquireTokenSilent\", enableConsoleLog);\r\n        application.acquireTokenSilent({\r\n            scopes: scopes,\r\n            loginHint: authConfig.upn,\r\n            correlationId: correlationId,\r\n        }).then(function (authResponse) {\r\n            result.IsUpnMatch = UpnMatchesUpnFromIdToken(authResponse.account);\r\n            if (result.IsUpnMatch) {\r\n                LogTelemetryDataFieldsForCheckUpn(result, correlationId, applicationId, timerClock, scopes);\r\n                return resolve(result);\r\n            }\r\n        }).catch(function (error) {\r\n            result.ErrorCode = error.errorCode;\r\n            result.ErrorMessage = error.errorMessage;\r\n            LoggingUtils.log(\"acquireToken->error: \" + result.ErrorMessage, enableConsoleLog);\r\n            result.IsUpnMatch = false;\r\n            LogTelemetryDataFieldsForCheckUpn(result, correlationId, applicationId, timerClock, scopes, error.errorCode, error.errorMessage);\r\n            return reject(result);\r\n        });\r\n    });\r\n}\r\nexports.CheckUpnMatchIdToken = CheckUpnMatchIdToken;\r\n/**\r\n * * Log the telemetry data points in the provided {@link IImplicitUpnResult} or Otel pipeline.\r\n * @param result - the provided {@link IImplicitUpnResult} to log the telemetry data points into\r\n * @param correlationId - the same correlation ID exists under the caller's context, the same correlation ID will passed on to MSAL.js for unified experience\r\n * @param applicationId - the application ID in the access token request\r\n * @param timerClock - the timerClock to log the time duration\r\n * @param scopes - the scopes in the acquire token request\r\n * @param errorCode - the error code included in the exception, if any\r\n * @param errorMessage - the error message included in the exception, if any\r\n */\r\nfunction LogTelemetryDataFieldsForCheckUpn(result, correlationId, applicationId, timerClock, scopes, errorCode, errorMessage) {\r\n    // For data fields that are null, blank or empty, the value is set to \"unknown\" at this point\r\n    // based on office-online-otel documentation: https://office.visualstudio.com/OC/_git/office-online-ui?path=%2Fpackages%2Foffice-online-otel%2FREADME.md&version=GBmaster\r\n    // Null or undefined value will cause exceptions down the line.\r\n    var dataFields = [\r\n        { name: Constants.Telemetry.Duration, int64: timerClock.ms },\r\n        { name: Constants.Telemetry.Succeeded, bool: errorCode ? false : true },\r\n        { name: Constants.Telemetry.IdentityProvider, string: authConfig.idp.toLowerCase() },\r\n        { name: Constants.Telemetry.ApplicationId, string: applicationId },\r\n        { name: Constants.Telemetry.TokenScope, string: scopes ? scopes.toString() : 'unknown' },\r\n        { name: Constants.Telemetry.CorrelationId, string: correlationId ? correlationId : 'unknown' },\r\n        { name: Constants.Telemetry.ErrorCodeForCheckUpn, string: errorCode ? errorCode : 'unknown' },\r\n        { name: Constants.Telemetry.ErrorMessageForCheckUpn, string: errorMessage ? errorMessage : 'unknown' }\r\n    ];\r\n    if (!authConfig.telemetryInstance && typeof OTel === \"undefined\") {\r\n        api_js_1.sendTelemetryEvent({\r\n            name: Constants.Telemetry.CheckUpnTelemetryName,\r\n            dataFields: dataFields\r\n        });\r\n    }\r\n    result.Telemetry = {\r\n        timeToCheckUPN: timerClock.ms,\r\n        succeeded: errorCode ? false : true,\r\n        idp: authConfig.idp.toLowerCase(),\r\n        applicationId: applicationId,\r\n        tokenScope: scopes ? scopes.toString() : undefined,\r\n        correlationId: correlationId,\r\n        errorCodeForCheckUPN: errorCode,\r\n        errorMessageForCheckUPN: errorMessage\r\n    };\r\n}\r\n/**\r\n * Get Authentication Config from parent.\r\n * This must be called if page is created by MSAL.js\r\n * @returns {Promise.<IImplicitAuthConfig>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link IImplicitAuthConfig} object\r\n */\r\nfunction GetAuthConfig() {\r\n    return new Promise(function (resolve, reject) {\r\n        HashHasState().then(function (result) {\r\n            // Receiver ResponseAuthConfig\r\n            window.addEventListener('message', function (e) {\r\n                if (e.origin && e.origin == location.origin && e.data && e.data.config && e.data.request && e.data.request == Constants.PostMessageType.ResponseAuthConfig) {\r\n                    resolve(e.data.config);\r\n                }\r\n            }, false);\r\n            // Requester RequestAuthContext\r\n            parent.postMessage({ request: Constants.PostMessageType.RequestAuthConfig, iframe: result }, location.origin);\r\n        }, function () { reject({}); });\r\n    });\r\n}\r\nexports.GetAuthConfig = GetAuthConfig;\r\n/**\r\n * Verify the upn in the config matches the upn for the cached user\r\n * @param account - the account information included in ID token.\r\n * @returns true if there is a match or there is no upn in the config\r\n */\r\nfunction UpnMatchesUpnFromIdToken(account) {\r\n    if (!authConfig || !authConfig.upn) {\r\n        LoggingUtils.log('Upn does not exist in the configuration, returning true', enableConsoleLog);\r\n        return true;\r\n    }\r\n    if (account && account.userName && account.userName.toLowerCase() === authConfig.upn.toLowerCase()) {\r\n        return true;\r\n    }\r\n    LoggingUtils.log('Upn in config does not match cached user upn', enableConsoleLog);\r\n    return false;\r\n}\r\nexports.UpnMatchesUpnFromIdToken = UpnMatchesUpnFromIdToken;\r\n/**\r\n * Verify the upn in the id token matches the Upn in the access token\r\n * @param token - the token to extract the upn from\r\n * @returns true if there is a match or there is no upn in the id token or access token\r\n */\r\nfunction UpnMatchesUpnFromAccessToken(token) {\r\n    if (!authConfig || !authConfig.upn) {\r\n        LoggingUtils.log('Upn does not exist in the configuration, returning true', enableConsoleLog);\r\n        return true;\r\n    }\r\n    var accessToken = ExtractUtils.extractAccessToken(token);\r\n    // AccessToken extraction would not work for future encrypted JWE tokens,\r\n    // If cannot be extracted, also return true\r\n    if (!accessToken || (accessToken && accessToken.upn && accessToken.upn.toLowerCase() === authConfig.upn.toLowerCase())) {\r\n        return true;\r\n    }\r\n    LoggingUtils.log('provided Upn does not match Upn extracted from token', enableConsoleLog);\r\n    return false;\r\n}\r\nexports.UpnMatchesUpnFromAccessToken = UpnMatchesUpnFromAccessToken;\r\n/**\r\n * Verify the state is in hash or not\r\n */\r\nfunction HashHasState() {\r\n    return new Promise(function (resolve, reject) {\r\n        if (window.location.hash) {\r\n            // Get hash\r\n            var hash = window.location.hash;\r\n            if (hash.indexOf('#/') > -1) {\r\n                hash = hash.substring(hash.indexOf('#/') + 2);\r\n            }\r\n            else if (hash.indexOf('#') > -1) {\r\n                hash = hash.substring(1);\r\n            }\r\n            // Get state from hash\r\n            var arrHash = hash.split('&');\r\n            for (var i = 0; i < arrHash.length; i++) {\r\n                var keyvalue = arrHash[i].split('=');\r\n                if (decodeURIComponent(keyvalue[0]) == \"state\") {\r\n                    var state = decodeURIComponent(keyvalue[1]).split('|');\r\n                    if (state.length == 2) {\r\n                        resolve(state[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        reject();\r\n    });\r\n}\r\nexports.HashHasState = HashHasState;\r\n/**\r\n * Logout current user from all registered applications\r\n */\r\nfunction Logout() {\r\n    applications.forEach(function (entry) {\r\n        LoggingUtils.log(\"application calls logOut\", enableConsoleLog);\r\n        entry.application.logOut();\r\n    });\r\n    // Also clear registered applications\r\n    exports.applications = applications = new Array();\r\n}\r\nexports.Logout = Logout;\r\n\n\n//# sourceURL=webpack://Implicit/./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts?");

/***/ }),

/***/ 0:
/*!***********************************************************************************************************************************************************************************************!*\
  !*** multi ./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js ./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js ./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts ***!
  \***********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! E:\\_work\\8\\s\\src\\packages\\Microsoft.Office.WebAuth.Implicit\\lib\\msal.js */\"./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js\");\n__webpack_require__(/*! E:\\_work\\8\\s\\src\\packages\\Microsoft.Office.WebAuth.Implicit\\lib\\api.js */\"./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js\");\nmodule.exports = __webpack_require__(/*! E:\\_work\\8\\s\\src\\packages\\Microsoft.Office.WebAuth.Implicit\\scripts\\Implicit.ts */\"./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts\");\n\n\n//# sourceURL=webpack://Implicit/multi_./packages/Microsoft.Office.WebAuth.Implicit/lib/msal.js_./packages/Microsoft.Office.WebAuth.Implicit/lib/api.js_./packages/Microsoft.Office.WebAuth.Implicit/scripts/Implicit.ts?");

/***/ })

/******/ });